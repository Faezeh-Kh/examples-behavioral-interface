/*
 * generated by Xtext 2.10.0
 */
package org.gemoc.activitydiagram.sequential.xactivitydiagram.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.gemoc.activitydiagram.sequential.xactivitydiagram.ide.contentassist.antlr.internal.InternalActivityDiagramParser;
import org.gemoc.activitydiagram.sequential.xactivitydiagram.services.ActivityDiagramGrammarAccess;

public class ActivityDiagramParser extends AbstractContentAssistParser {

	@Inject
	private ActivityDiagramGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalActivityDiagramParser createParser() {
		InternalActivityDiagramParser result = new InternalActivityDiagramParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getActivityNodeAccess().getAlternatives(), "rule__ActivityNode__Alternatives");
					put(grammarAccess.getVariableAccess().getAlternatives(), "rule__Variable__Alternatives");
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getVariableAssignmentAccess().getAlternatives(), "rule__VariableAssignment__Alternatives");
					put(grammarAccess.getIntegerExpressionAccess().getAlternatives(), "rule__IntegerExpression__Alternatives");
					put(grammarAccess.getBooleanExpressionAccess().getAlternatives(), "rule__BooleanExpression__Alternatives");
					put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
					put(grammarAccess.getIntegerCalculationOperatorAccess().getAlternatives(), "rule__IntegerCalculationOperator__Alternatives");
					put(grammarAccess.getIntegerComparisonOperatorAccess().getAlternatives(), "rule__IntegerComparisonOperator__Alternatives");
					put(grammarAccess.getBooleanBinaryOperatorAccess().getAlternatives(), "rule__BooleanBinaryOperator__Alternatives");
					put(grammarAccess.getActivityAccess().getGroup(), "rule__Activity__Group__0");
					put(grammarAccess.getActivityAccess().getGroup_4(), "rule__Activity__Group_4__0");
					put(grammarAccess.getActivityAccess().getGroup_4_1(), "rule__Activity__Group_4_1__0");
					put(grammarAccess.getActivityAccess().getGroup_5(), "rule__Activity__Group_5__0");
					put(grammarAccess.getActivityAccess().getGroup_5_3(), "rule__Activity__Group_5_3__0");
					put(grammarAccess.getActivityAccess().getGroup_6(), "rule__Activity__Group_6__0");
					put(grammarAccess.getActivityAccess().getGroup_6_3(), "rule__Activity__Group_6_3__0");
					put(grammarAccess.getActivityAccess().getGroup_7(), "rule__Activity__Group_7__0");
					put(grammarAccess.getActivityAccess().getGroup_7_3(), "rule__Activity__Group_7_3__0");
					put(grammarAccess.getEventAccess().getGroup(), "rule__Event__Group__0");
					put(grammarAccess.getOpaqueActionAccess().getGroup(), "rule__OpaqueAction__Group__0");
					put(grammarAccess.getOpaqueActionAccess().getGroup_3(), "rule__OpaqueAction__Group_3__0");
					put(grammarAccess.getOpaqueActionAccess().getGroup_3_3(), "rule__OpaqueAction__Group_3_3__0");
					put(grammarAccess.getOpaqueActionAccess().getGroup_4(), "rule__OpaqueAction__Group_4__0");
					put(grammarAccess.getOpaqueActionAccess().getGroup_5(), "rule__OpaqueAction__Group_5__0");
					put(grammarAccess.getAcceptEventActionAccess().getGroup(), "rule__AcceptEventAction__Group__0");
					put(grammarAccess.getAcceptEventActionAccess().getGroup_7(), "rule__AcceptEventAction__Group_7__0");
					put(grammarAccess.getAcceptEventActionAccess().getGroup_8(), "rule__AcceptEventAction__Group_8__0");
					put(grammarAccess.getInitialNodeAccess().getGroup(), "rule__InitialNode__Group__0");
					put(grammarAccess.getInitialNodeAccess().getGroup_3(), "rule__InitialNode__Group_3__0");
					put(grammarAccess.getActivityFinalNodeAccess().getGroup(), "rule__ActivityFinalNode__Group__0");
					put(grammarAccess.getActivityFinalNodeAccess().getGroup_3(), "rule__ActivityFinalNode__Group_3__0");
					put(grammarAccess.getForkNodeAccess().getGroup(), "rule__ForkNode__Group__0");
					put(grammarAccess.getForkNodeAccess().getGroup_3(), "rule__ForkNode__Group_3__0");
					put(grammarAccess.getForkNodeAccess().getGroup_4(), "rule__ForkNode__Group_4__0");
					put(grammarAccess.getForkNodeAccess().getGroup_4_3(), "rule__ForkNode__Group_4_3__0");
					put(grammarAccess.getJoinNodeAccess().getGroup(), "rule__JoinNode__Group__0");
					put(grammarAccess.getJoinNodeAccess().getGroup_3(), "rule__JoinNode__Group_3__0");
					put(grammarAccess.getJoinNodeAccess().getGroup_3_3(), "rule__JoinNode__Group_3_3__0");
					put(grammarAccess.getJoinNodeAccess().getGroup_4(), "rule__JoinNode__Group_4__0");
					put(grammarAccess.getMergeNodeAccess().getGroup(), "rule__MergeNode__Group__0");
					put(grammarAccess.getMergeNodeAccess().getGroup_3(), "rule__MergeNode__Group_3__0");
					put(grammarAccess.getMergeNodeAccess().getGroup_3_3(), "rule__MergeNode__Group_3_3__0");
					put(grammarAccess.getMergeNodeAccess().getGroup_4(), "rule__MergeNode__Group_4__0");
					put(grammarAccess.getDecisionNodeAccess().getGroup(), "rule__DecisionNode__Group__0");
					put(grammarAccess.getDecisionNodeAccess().getGroup_3(), "rule__DecisionNode__Group_3__0");
					put(grammarAccess.getDecisionNodeAccess().getGroup_4(), "rule__DecisionNode__Group_4__0");
					put(grammarAccess.getDecisionNodeAccess().getGroup_4_3(), "rule__DecisionNode__Group_4_3__0");
					put(grammarAccess.getIntegerVariableAssignmentAccess().getGroup(), "rule__IntegerVariableAssignment__Group__0");
					put(grammarAccess.getBooleanVariableAssignmentAccess().getGroup(), "rule__BooleanVariableAssignment__Group__0");
					put(grammarAccess.getIntegerBinaryExpressionAccess().getGroup(), "rule__IntegerBinaryExpression__Group__0");
					put(grammarAccess.getIntegerComparisonExpressionAccess().getGroup(), "rule__IntegerComparisonExpression__Group__0");
					put(grammarAccess.getBooleanUnaryExpressionAccess().getGroup(), "rule__BooleanUnaryExpression__Group__0");
					put(grammarAccess.getBooleanBinaryExpressionAccess().getGroup(), "rule__BooleanBinaryExpression__Group__0");
					put(grammarAccess.getIntegerVariableAccess().getGroup(), "rule__IntegerVariable__Group__0");
					put(grammarAccess.getIntegerVariableAccess().getGroup_3(), "rule__IntegerVariable__Group_3__0");
					put(grammarAccess.getBooleanVariableAccess().getGroup(), "rule__BooleanVariable__Group__0");
					put(grammarAccess.getBooleanVariableAccess().getGroup_3(), "rule__BooleanVariable__Group_3__0");
					put(grammarAccess.getEIntAccess().getGroup(), "rule__EInt__Group__0");
					put(grammarAccess.getControlFlowAccess().getGroup(), "rule__ControlFlow__Group__0");
					put(grammarAccess.getControlFlowAccess().getGroup_6(), "rule__ControlFlow__Group_6__0");
					put(grammarAccess.getActivityAccess().getNameAssignment_2(), "rule__Activity__NameAssignment_2");
					put(grammarAccess.getActivityAccess().getLocalsAssignment_4_0(), "rule__Activity__LocalsAssignment_4_0");
					put(grammarAccess.getActivityAccess().getLocalsAssignment_4_1_1(), "rule__Activity__LocalsAssignment_4_1_1");
					put(grammarAccess.getActivityAccess().getEventsAssignment_5_2(), "rule__Activity__EventsAssignment_5_2");
					put(grammarAccess.getActivityAccess().getEventsAssignment_5_3_1(), "rule__Activity__EventsAssignment_5_3_1");
					put(grammarAccess.getActivityAccess().getNodesAssignment_6_2(), "rule__Activity__NodesAssignment_6_2");
					put(grammarAccess.getActivityAccess().getNodesAssignment_6_3_1(), "rule__Activity__NodesAssignment_6_3_1");
					put(grammarAccess.getActivityAccess().getEdgesAssignment_7_2(), "rule__Activity__EdgesAssignment_7_2");
					put(grammarAccess.getActivityAccess().getEdgesAssignment_7_3_1(), "rule__Activity__EdgesAssignment_7_3_1");
					put(grammarAccess.getEventAccess().getNameAssignment_1(), "rule__Event__NameAssignment_1");
					put(grammarAccess.getOpaqueActionAccess().getNameAssignment_2(), "rule__OpaqueAction__NameAssignment_2");
					put(grammarAccess.getOpaqueActionAccess().getAssignmentsAssignment_3_2(), "rule__OpaqueAction__AssignmentsAssignment_3_2");
					put(grammarAccess.getOpaqueActionAccess().getAssignmentsAssignment_3_3_1(), "rule__OpaqueAction__AssignmentsAssignment_3_3_1");
					put(grammarAccess.getOpaqueActionAccess().getIncomingAssignment_4_2(), "rule__OpaqueAction__IncomingAssignment_4_2");
					put(grammarAccess.getOpaqueActionAccess().getOutgoingAssignment_5_2(), "rule__OpaqueAction__OutgoingAssignment_5_2");
					put(grammarAccess.getAcceptEventActionAccess().getNameAssignment_2(), "rule__AcceptEventAction__NameAssignment_2");
					put(grammarAccess.getAcceptEventActionAccess().getEventTypeAssignment_5(), "rule__AcceptEventAction__EventTypeAssignment_5");
					put(grammarAccess.getAcceptEventActionAccess().getIncomingAssignment_7_2(), "rule__AcceptEventAction__IncomingAssignment_7_2");
					put(grammarAccess.getAcceptEventActionAccess().getOutgoingAssignment_8_2(), "rule__AcceptEventAction__OutgoingAssignment_8_2");
					put(grammarAccess.getInitialNodeAccess().getNameAssignment_2(), "rule__InitialNode__NameAssignment_2");
					put(grammarAccess.getInitialNodeAccess().getOutgoingAssignment_3_2(), "rule__InitialNode__OutgoingAssignment_3_2");
					put(grammarAccess.getActivityFinalNodeAccess().getNameAssignment_2(), "rule__ActivityFinalNode__NameAssignment_2");
					put(grammarAccess.getActivityFinalNodeAccess().getIncomingAssignment_3_2(), "rule__ActivityFinalNode__IncomingAssignment_3_2");
					put(grammarAccess.getForkNodeAccess().getNameAssignment_2(), "rule__ForkNode__NameAssignment_2");
					put(grammarAccess.getForkNodeAccess().getIncomingAssignment_3_2(), "rule__ForkNode__IncomingAssignment_3_2");
					put(grammarAccess.getForkNodeAccess().getOutgoingAssignment_4_2(), "rule__ForkNode__OutgoingAssignment_4_2");
					put(grammarAccess.getForkNodeAccess().getOutgoingAssignment_4_3_1(), "rule__ForkNode__OutgoingAssignment_4_3_1");
					put(grammarAccess.getJoinNodeAccess().getNameAssignment_2(), "rule__JoinNode__NameAssignment_2");
					put(grammarAccess.getJoinNodeAccess().getIncomingAssignment_3_2(), "rule__JoinNode__IncomingAssignment_3_2");
					put(grammarAccess.getJoinNodeAccess().getIncomingAssignment_3_3_1(), "rule__JoinNode__IncomingAssignment_3_3_1");
					put(grammarAccess.getJoinNodeAccess().getOutgoingAssignment_4_2(), "rule__JoinNode__OutgoingAssignment_4_2");
					put(grammarAccess.getMergeNodeAccess().getNameAssignment_2(), "rule__MergeNode__NameAssignment_2");
					put(grammarAccess.getMergeNodeAccess().getIncomingAssignment_3_2(), "rule__MergeNode__IncomingAssignment_3_2");
					put(grammarAccess.getMergeNodeAccess().getIncomingAssignment_3_3_1(), "rule__MergeNode__IncomingAssignment_3_3_1");
					put(grammarAccess.getMergeNodeAccess().getOutgoingAssignment_4_2(), "rule__MergeNode__OutgoingAssignment_4_2");
					put(grammarAccess.getDecisionNodeAccess().getNameAssignment_2(), "rule__DecisionNode__NameAssignment_2");
					put(grammarAccess.getDecisionNodeAccess().getIncomingAssignment_3_2(), "rule__DecisionNode__IncomingAssignment_3_2");
					put(grammarAccess.getDecisionNodeAccess().getOutgoingAssignment_4_2(), "rule__DecisionNode__OutgoingAssignment_4_2");
					put(grammarAccess.getDecisionNodeAccess().getOutgoingAssignment_4_3_1(), "rule__DecisionNode__OutgoingAssignment_4_3_1");
					put(grammarAccess.getIntegerVariableAssignmentAccess().getAssigneeAssignment_0(), "rule__IntegerVariableAssignment__AssigneeAssignment_0");
					put(grammarAccess.getIntegerVariableAssignmentAccess().getExpressionAssignment_2(), "rule__IntegerVariableAssignment__ExpressionAssignment_2");
					put(grammarAccess.getBooleanVariableAssignmentAccess().getAssigneeAssignment_0(), "rule__BooleanVariableAssignment__AssigneeAssignment_0");
					put(grammarAccess.getBooleanVariableAssignmentAccess().getExpressionAssignment_2(), "rule__BooleanVariableAssignment__ExpressionAssignment_2");
					put(grammarAccess.getIntegerBinaryExpressionAccess().getOperand1Assignment_0(), "rule__IntegerBinaryExpression__Operand1Assignment_0");
					put(grammarAccess.getIntegerBinaryExpressionAccess().getOperatorAssignment_1(), "rule__IntegerBinaryExpression__OperatorAssignment_1");
					put(grammarAccess.getIntegerBinaryExpressionAccess().getOperand2Assignment_2(), "rule__IntegerBinaryExpression__Operand2Assignment_2");
					put(grammarAccess.getIntegerComparisonExpressionAccess().getOperand1Assignment_0(), "rule__IntegerComparisonExpression__Operand1Assignment_0");
					put(grammarAccess.getIntegerComparisonExpressionAccess().getOperatorAssignment_1(), "rule__IntegerComparisonExpression__OperatorAssignment_1");
					put(grammarAccess.getIntegerComparisonExpressionAccess().getOperand2Assignment_2(), "rule__IntegerComparisonExpression__Operand2Assignment_2");
					put(grammarAccess.getBooleanUnaryExpressionAccess().getOperatorAssignment_0(), "rule__BooleanUnaryExpression__OperatorAssignment_0");
					put(grammarAccess.getBooleanUnaryExpressionAccess().getOperandAssignment_1(), "rule__BooleanUnaryExpression__OperandAssignment_1");
					put(grammarAccess.getBooleanBinaryExpressionAccess().getOperand1Assignment_0(), "rule__BooleanBinaryExpression__Operand1Assignment_0");
					put(grammarAccess.getBooleanBinaryExpressionAccess().getOperatorAssignment_1(), "rule__BooleanBinaryExpression__OperatorAssignment_1");
					put(grammarAccess.getBooleanBinaryExpressionAccess().getOperand2Assignment_2(), "rule__BooleanBinaryExpression__Operand2Assignment_2");
					put(grammarAccess.getIntegerVariableAccess().getNameAssignment_2(), "rule__IntegerVariable__NameAssignment_2");
					put(grammarAccess.getIntegerVariableAccess().getInitialValueAssignment_3_1(), "rule__IntegerVariable__InitialValueAssignment_3_1");
					put(grammarAccess.getBooleanVariableAccess().getNameAssignment_2(), "rule__BooleanVariable__NameAssignment_2");
					put(grammarAccess.getBooleanVariableAccess().getInitialValueAssignment_3_1(), "rule__BooleanVariable__InitialValueAssignment_3_1");
					put(grammarAccess.getBooleanValueAccess().getValueAssignment(), "rule__BooleanValue__ValueAssignment");
					put(grammarAccess.getIntegerValueAccess().getValueAssignment(), "rule__IntegerValue__ValueAssignment");
					put(grammarAccess.getControlFlowAccess().getNameAssignment_1(), "rule__ControlFlow__NameAssignment_1");
					put(grammarAccess.getControlFlowAccess().getSourceAssignment_3(), "rule__ControlFlow__SourceAssignment_3");
					put(grammarAccess.getControlFlowAccess().getTargetAssignment_5(), "rule__ControlFlow__TargetAssignment_5");
					put(grammarAccess.getControlFlowAccess().getGuardAssignment_6_1(), "rule__ControlFlow__GuardAssignment_6_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalActivityDiagramParser typedParser = (InternalActivityDiagramParser) parser;
			typedParser.entryRuleActivity();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public ActivityDiagramGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(ActivityDiagramGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
