/*
 * generated by Xtext 2.10.0
 */
grammar InternalActivityDiagram;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.gemoc.activitydiagram.sequential.xactivitydiagram.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.gemoc.activitydiagram.sequential.xactivitydiagram.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.gemoc.activitydiagram.sequential.xactivitydiagram.services.ActivityDiagramGrammarAccess;

}

@parser::members {

 	private ActivityDiagramGrammarAccess grammarAccess;

    public InternalActivityDiagramParser(TokenStream input, ActivityDiagramGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Activity";
   	}

   	@Override
   	protected ActivityDiagramGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleActivity
entryRuleActivity returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActivityRule()); }
	iv_ruleActivity=ruleActivity
	{ $current=$iv_ruleActivity.current; }
	EOF;

// Rule Activity
ruleActivity returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getActivityAccess().getActivityAction_0(),
					$current);
			}
		)
		otherlv_1='activity'
		{
			newLeafNode(otherlv_1, grammarAccess.getActivityAccess().getActivityKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActivityAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActivityRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getActivityAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getActivityAccess().getLocalsVariableParserRuleCall_4_0_0());
					}
					lv_locals_4_0=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActivityRule());
						}
						add(
							$current,
							"locals",
							lv_locals_4_0,
							"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.Variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_5=','
				{
					newLeafNode(otherlv_5, grammarAccess.getActivityAccess().getCommaKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getActivityAccess().getLocalsVariableParserRuleCall_4_1_1_0());
						}
						lv_locals_6_0=ruleVariable
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getActivityRule());
							}
							add(
								$current,
								"locals",
								lv_locals_6_0,
								"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.Variable");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		(
			otherlv_7='events'
			{
				newLeafNode(otherlv_7, grammarAccess.getActivityAccess().getEventsKeyword_5_0());
			}
			otherlv_8='{'
			{
				newLeafNode(otherlv_8, grammarAccess.getActivityAccess().getLeftCurlyBracketKeyword_5_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getActivityAccess().getEventsEventParserRuleCall_5_2_0());
					}
					lv_events_9_0=ruleEvent
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActivityRule());
						}
						add(
							$current,
							"events",
							lv_events_9_0,
							"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.Event");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_10=','
				{
					newLeafNode(otherlv_10, grammarAccess.getActivityAccess().getCommaKeyword_5_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getActivityAccess().getEventsEventParserRuleCall_5_3_1_0());
						}
						lv_events_11_0=ruleEvent
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getActivityRule());
							}
							add(
								$current,
								"events",
								lv_events_11_0,
								"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.Event");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_12='}'
			{
				newLeafNode(otherlv_12, grammarAccess.getActivityAccess().getRightCurlyBracketKeyword_5_4());
			}
		)?
		(
			otherlv_13='nodes'
			{
				newLeafNode(otherlv_13, grammarAccess.getActivityAccess().getNodesKeyword_6_0());
			}
			otherlv_14='{'
			{
				newLeafNode(otherlv_14, grammarAccess.getActivityAccess().getLeftCurlyBracketKeyword_6_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getActivityAccess().getNodesActivityNodeParserRuleCall_6_2_0());
					}
					lv_nodes_15_0=ruleActivityNode
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActivityRule());
						}
						add(
							$current,
							"nodes",
							lv_nodes_15_0,
							"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.ActivityNode");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_16=','
				{
					newLeafNode(otherlv_16, grammarAccess.getActivityAccess().getCommaKeyword_6_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getActivityAccess().getNodesActivityNodeParserRuleCall_6_3_1_0());
						}
						lv_nodes_17_0=ruleActivityNode
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getActivityRule());
							}
							add(
								$current,
								"nodes",
								lv_nodes_17_0,
								"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.ActivityNode");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_18='}'
			{
				newLeafNode(otherlv_18, grammarAccess.getActivityAccess().getRightCurlyBracketKeyword_6_4());
			}
		)?
		(
			otherlv_19='edges'
			{
				newLeafNode(otherlv_19, grammarAccess.getActivityAccess().getEdgesKeyword_7_0());
			}
			otherlv_20='{'
			{
				newLeafNode(otherlv_20, grammarAccess.getActivityAccess().getLeftCurlyBracketKeyword_7_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getActivityAccess().getEdgesActivityEdgeParserRuleCall_7_2_0());
					}
					lv_edges_21_0=ruleActivityEdge
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActivityRule());
						}
						add(
							$current,
							"edges",
							lv_edges_21_0,
							"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.ActivityEdge");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_22=','
				{
					newLeafNode(otherlv_22, grammarAccess.getActivityAccess().getCommaKeyword_7_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getActivityAccess().getEdgesActivityEdgeParserRuleCall_7_3_1_0());
						}
						lv_edges_23_0=ruleActivityEdge
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getActivityRule());
							}
							add(
								$current,
								"edges",
								lv_edges_23_0,
								"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.ActivityEdge");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_24='}'
			{
				newLeafNode(otherlv_24, grammarAccess.getActivityAccess().getRightCurlyBracketKeyword_7_4());
			}
		)?
		otherlv_25='}'
		{
			newLeafNode(otherlv_25, grammarAccess.getActivityAccess().getRightCurlyBracketKeyword_8());
		}
	)
;

// Entry rule entryRuleEvent
entryRuleEvent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEventRule()); }
	iv_ruleEvent=ruleEvent
	{ $current=$iv_ruleEvent.current; }
	EOF;

// Rule Event
ruleEvent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEventAccess().getEventAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getEventAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEventRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleActivityNode
entryRuleActivityNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActivityNodeRule()); }
	iv_ruleActivityNode=ruleActivityNode
	{ $current=$iv_ruleActivityNode.current; }
	EOF;

// Rule ActivityNode
ruleActivityNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getActivityNodeAccess().getOpaqueActionParserRuleCall_0());
		}
		this_OpaqueAction_0=ruleOpaqueAction
		{
			$current = $this_OpaqueAction_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActivityNodeAccess().getAcceptEventActionParserRuleCall_1());
		}
		this_AcceptEventAction_1=ruleAcceptEventAction
		{
			$current = $this_AcceptEventAction_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActivityNodeAccess().getInitialNodeParserRuleCall_2());
		}
		this_InitialNode_2=ruleInitialNode
		{
			$current = $this_InitialNode_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActivityNodeAccess().getActivityFinalNodeParserRuleCall_3());
		}
		this_ActivityFinalNode_3=ruleActivityFinalNode
		{
			$current = $this_ActivityFinalNode_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActivityNodeAccess().getForkNodeParserRuleCall_4());
		}
		this_ForkNode_4=ruleForkNode
		{
			$current = $this_ForkNode_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActivityNodeAccess().getJoinNodeParserRuleCall_5());
		}
		this_JoinNode_5=ruleJoinNode
		{
			$current = $this_JoinNode_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActivityNodeAccess().getMergeNodeParserRuleCall_6());
		}
		this_MergeNode_6=ruleMergeNode
		{
			$current = $this_MergeNode_6.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getActivityNodeAccess().getDecisionNodeParserRuleCall_7());
		}
		this_DecisionNode_7=ruleDecisionNode
		{
			$current = $this_DecisionNode_7.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleActivityEdge
entryRuleActivityEdge returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActivityEdgeRule()); }
	iv_ruleActivityEdge=ruleActivityEdge
	{ $current=$iv_ruleActivityEdge.current; }
	EOF;

// Rule ActivityEdge
ruleActivityEdge returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getActivityEdgeAccess().getControlFlowParserRuleCall());
	}
	this_ControlFlow_0=ruleControlFlow
	{
		$current = $this_ControlFlow_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVariableAccess().getIntegerVariableParserRuleCall_0());
		}
		this_IntegerVariable_0=ruleIntegerVariable
		{
			$current = $this_IntegerVariable_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVariableAccess().getBooleanVariableParserRuleCall_1());
		}
		this_BooleanVariable_1=ruleBooleanVariable
		{
			$current = $this_BooleanVariable_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleOpaqueAction
entryRuleOpaqueAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOpaqueActionRule()); }
	iv_ruleOpaqueAction=ruleOpaqueAction
	{ $current=$iv_ruleOpaqueAction.current; }
	EOF;

// Rule OpaqueAction
ruleOpaqueAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getOpaqueActionAccess().getOpaqueActionAction_0(),
					$current);
			}
		)
		otherlv_1='action'
		{
			newLeafNode(otherlv_1, grammarAccess.getOpaqueActionAccess().getActionKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getOpaqueActionAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getOpaqueActionRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='comp'
			{
				newLeafNode(otherlv_3, grammarAccess.getOpaqueActionAccess().getCompKeyword_3_0());
			}
			otherlv_4='{'
			{
				newLeafNode(otherlv_4, grammarAccess.getOpaqueActionAccess().getLeftCurlyBracketKeyword_3_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getOpaqueActionAccess().getAssignmentsVariableAssignmentParserRuleCall_3_2_0());
					}
					lv_assignments_5_0=ruleVariableAssignment
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOpaqueActionRule());
						}
						add(
							$current,
							"assignments",
							lv_assignments_5_0,
							"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.VariableAssignment");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getOpaqueActionAccess().getCommaKeyword_3_3_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getOpaqueActionAccess().getAssignmentsVariableAssignmentParserRuleCall_3_3_1_0());
						}
						lv_assignments_7_0=ruleVariableAssignment
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getOpaqueActionRule());
							}
							add(
								$current,
								"assignments",
								lv_assignments_7_0,
								"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.VariableAssignment");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
			otherlv_8='}'
			{
				newLeafNode(otherlv_8, grammarAccess.getOpaqueActionAccess().getRightCurlyBracketKeyword_3_4());
			}
		)?
		(
			otherlv_9='in'
			{
				newLeafNode(otherlv_9, grammarAccess.getOpaqueActionAccess().getInKeyword_4_0());
			}
			otherlv_10='('
			{
				newLeafNode(otherlv_10, grammarAccess.getOpaqueActionAccess().getLeftParenthesisKeyword_4_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOpaqueActionRule());
						}
					}
					otherlv_11=RULE_ID
					{
						newLeafNode(otherlv_11, grammarAccess.getOpaqueActionAccess().getIncomingActivityEdgeCrossReference_4_2_0());
					}
				)
			)
			otherlv_12=')'
			{
				newLeafNode(otherlv_12, grammarAccess.getOpaqueActionAccess().getRightParenthesisKeyword_4_3());
			}
		)?
		(
			otherlv_13='out'
			{
				newLeafNode(otherlv_13, grammarAccess.getOpaqueActionAccess().getOutKeyword_5_0());
			}
			otherlv_14='('
			{
				newLeafNode(otherlv_14, grammarAccess.getOpaqueActionAccess().getLeftParenthesisKeyword_5_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOpaqueActionRule());
						}
					}
					otherlv_15=RULE_ID
					{
						newLeafNode(otherlv_15, grammarAccess.getOpaqueActionAccess().getOutgoingActivityEdgeCrossReference_5_2_0());
					}
				)
			)
			otherlv_16=')'
			{
				newLeafNode(otherlv_16, grammarAccess.getOpaqueActionAccess().getRightParenthesisKeyword_5_3());
			}
		)?
	)
;

// Entry rule entryRuleAcceptEventAction
entryRuleAcceptEventAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAcceptEventActionRule()); }
	iv_ruleAcceptEventAction=ruleAcceptEventAction
	{ $current=$iv_ruleAcceptEventAction.current; }
	EOF;

// Rule AcceptEventAction
ruleAcceptEventAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAcceptEventActionAccess().getAcceptEventActionAction_0(),
					$current);
			}
		)
		otherlv_1='accept'
		{
			newLeafNode(otherlv_1, grammarAccess.getAcceptEventActionAccess().getAcceptKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAcceptEventActionAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAcceptEventActionRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='type'
		{
			newLeafNode(otherlv_3, grammarAccess.getAcceptEventActionAccess().getTypeKeyword_3());
		}
		otherlv_4='('
		{
			newLeafNode(otherlv_4, grammarAccess.getAcceptEventActionAccess().getLeftParenthesisKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getAcceptEventActionRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getAcceptEventActionAccess().getEventTypeEventCrossReference_5_0());
				}
			)
		)
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getAcceptEventActionAccess().getRightParenthesisKeyword_6());
		}
		(
			otherlv_7='in'
			{
				newLeafNode(otherlv_7, grammarAccess.getAcceptEventActionAccess().getInKeyword_7_0());
			}
			otherlv_8='('
			{
				newLeafNode(otherlv_8, grammarAccess.getAcceptEventActionAccess().getLeftParenthesisKeyword_7_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAcceptEventActionRule());
						}
					}
					otherlv_9=RULE_ID
					{
						newLeafNode(otherlv_9, grammarAccess.getAcceptEventActionAccess().getIncomingActivityEdgeCrossReference_7_2_0());
					}
				)
			)
			otherlv_10=')'
			{
				newLeafNode(otherlv_10, grammarAccess.getAcceptEventActionAccess().getRightParenthesisKeyword_7_3());
			}
		)?
		(
			otherlv_11='out'
			{
				newLeafNode(otherlv_11, grammarAccess.getAcceptEventActionAccess().getOutKeyword_8_0());
			}
			otherlv_12='('
			{
				newLeafNode(otherlv_12, grammarAccess.getAcceptEventActionAccess().getLeftParenthesisKeyword_8_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getAcceptEventActionRule());
						}
					}
					otherlv_13=RULE_ID
					{
						newLeafNode(otherlv_13, grammarAccess.getAcceptEventActionAccess().getOutgoingActivityEdgeCrossReference_8_2_0());
					}
				)
			)
			otherlv_14=')'
			{
				newLeafNode(otherlv_14, grammarAccess.getAcceptEventActionAccess().getRightParenthesisKeyword_8_3());
			}
		)?
	)
;

// Entry rule entryRuleInitialNode
entryRuleInitialNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInitialNodeRule()); }
	iv_ruleInitialNode=ruleInitialNode
	{ $current=$iv_ruleInitialNode.current; }
	EOF;

// Rule InitialNode
ruleInitialNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInitialNodeAccess().getInitialNodeAction_0(),
					$current);
			}
		)
		otherlv_1='initial'
		{
			newLeafNode(otherlv_1, grammarAccess.getInitialNodeAccess().getInitialKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getInitialNodeAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getInitialNodeRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='out'
			{
				newLeafNode(otherlv_3, grammarAccess.getInitialNodeAccess().getOutKeyword_3_0());
			}
			otherlv_4='('
			{
				newLeafNode(otherlv_4, grammarAccess.getInitialNodeAccess().getLeftParenthesisKeyword_3_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInitialNodeRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getInitialNodeAccess().getOutgoingActivityEdgeCrossReference_3_2_0());
					}
				)
			)
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getInitialNodeAccess().getRightParenthesisKeyword_3_3());
			}
		)
	)
;

// Entry rule entryRuleActivityFinalNode
entryRuleActivityFinalNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActivityFinalNodeRule()); }
	iv_ruleActivityFinalNode=ruleActivityFinalNode
	{ $current=$iv_ruleActivityFinalNode.current; }
	EOF;

// Rule ActivityFinalNode
ruleActivityFinalNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getActivityFinalNodeAccess().getActivityFinalNodeAction_0(),
					$current);
			}
		)
		otherlv_1='final'
		{
			newLeafNode(otherlv_1, grammarAccess.getActivityFinalNodeAccess().getFinalKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getActivityFinalNodeAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getActivityFinalNodeRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='in'
			{
				newLeafNode(otherlv_3, grammarAccess.getActivityFinalNodeAccess().getInKeyword_3_0());
			}
			otherlv_4='('
			{
				newLeafNode(otherlv_4, grammarAccess.getActivityFinalNodeAccess().getLeftParenthesisKeyword_3_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getActivityFinalNodeRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getActivityFinalNodeAccess().getIncomingActivityEdgeCrossReference_3_2_0());
					}
				)
			)
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getActivityFinalNodeAccess().getRightParenthesisKeyword_3_3());
			}
		)
	)
;

// Entry rule entryRuleForkNode
entryRuleForkNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForkNodeRule()); }
	iv_ruleForkNode=ruleForkNode
	{ $current=$iv_ruleForkNode.current; }
	EOF;

// Rule ForkNode
ruleForkNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getForkNodeAccess().getForkNodeAction_0(),
					$current);
			}
		)
		otherlv_1='fork'
		{
			newLeafNode(otherlv_1, grammarAccess.getForkNodeAccess().getForkKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForkNodeAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForkNodeRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='in'
			{
				newLeafNode(otherlv_3, grammarAccess.getForkNodeAccess().getInKeyword_3_0());
			}
			otherlv_4='('
			{
				newLeafNode(otherlv_4, grammarAccess.getForkNodeAccess().getLeftParenthesisKeyword_3_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getForkNodeRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getForkNodeAccess().getIncomingActivityEdgeCrossReference_3_2_0());
					}
				)
			)
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getForkNodeAccess().getRightParenthesisKeyword_3_3());
			}
		)
		(
			otherlv_7='out'
			{
				newLeafNode(otherlv_7, grammarAccess.getForkNodeAccess().getOutKeyword_4_0());
			}
			otherlv_8='('
			{
				newLeafNode(otherlv_8, grammarAccess.getForkNodeAccess().getLeftParenthesisKeyword_4_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getForkNodeRule());
						}
					}
					otherlv_9=RULE_ID
					{
						newLeafNode(otherlv_9, grammarAccess.getForkNodeAccess().getOutgoingActivityEdgeCrossReference_4_2_0());
					}
				)
			)
			(
				otherlv_10=','
				{
					newLeafNode(otherlv_10, grammarAccess.getForkNodeAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getForkNodeRule());
							}
						}
						otherlv_11=RULE_ID
						{
							newLeafNode(otherlv_11, grammarAccess.getForkNodeAccess().getOutgoingActivityEdgeCrossReference_4_3_1_0());
						}
					)
				)
			)*
			otherlv_12=')'
			{
				newLeafNode(otherlv_12, grammarAccess.getForkNodeAccess().getRightParenthesisKeyword_4_4());
			}
		)?
	)
;

// Entry rule entryRuleJoinNode
entryRuleJoinNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getJoinNodeRule()); }
	iv_ruleJoinNode=ruleJoinNode
	{ $current=$iv_ruleJoinNode.current; }
	EOF;

// Rule JoinNode
ruleJoinNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getJoinNodeAccess().getJoinNodeAction_0(),
					$current);
			}
		)
		otherlv_1='join'
		{
			newLeafNode(otherlv_1, grammarAccess.getJoinNodeAccess().getJoinKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getJoinNodeAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getJoinNodeRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='in'
			{
				newLeafNode(otherlv_3, grammarAccess.getJoinNodeAccess().getInKeyword_3_0());
			}
			otherlv_4='('
			{
				newLeafNode(otherlv_4, grammarAccess.getJoinNodeAccess().getLeftParenthesisKeyword_3_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getJoinNodeRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getJoinNodeAccess().getIncomingActivityEdgeCrossReference_3_2_0());
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getJoinNodeAccess().getCommaKeyword_3_3_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getJoinNodeRule());
							}
						}
						otherlv_7=RULE_ID
						{
							newLeafNode(otherlv_7, grammarAccess.getJoinNodeAccess().getIncomingActivityEdgeCrossReference_3_3_1_0());
						}
					)
				)
			)*
			otherlv_8=')'
			{
				newLeafNode(otherlv_8, grammarAccess.getJoinNodeAccess().getRightParenthesisKeyword_3_4());
			}
		)?
		(
			otherlv_9='out'
			{
				newLeafNode(otherlv_9, grammarAccess.getJoinNodeAccess().getOutKeyword_4_0());
			}
			otherlv_10='('
			{
				newLeafNode(otherlv_10, grammarAccess.getJoinNodeAccess().getLeftParenthesisKeyword_4_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getJoinNodeRule());
						}
					}
					otherlv_11=RULE_ID
					{
						newLeafNode(otherlv_11, grammarAccess.getJoinNodeAccess().getOutgoingActivityEdgeCrossReference_4_2_0());
					}
				)
			)
			otherlv_12=')'
			{
				newLeafNode(otherlv_12, grammarAccess.getJoinNodeAccess().getRightParenthesisKeyword_4_3());
			}
		)
	)
;

// Entry rule entryRuleMergeNode
entryRuleMergeNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMergeNodeRule()); }
	iv_ruleMergeNode=ruleMergeNode
	{ $current=$iv_ruleMergeNode.current; }
	EOF;

// Rule MergeNode
ruleMergeNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMergeNodeAccess().getMergeNodeAction_0(),
					$current);
			}
		)
		otherlv_1='merge'
		{
			newLeafNode(otherlv_1, grammarAccess.getMergeNodeAccess().getMergeKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMergeNodeAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMergeNodeRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='in'
			{
				newLeafNode(otherlv_3, grammarAccess.getMergeNodeAccess().getInKeyword_3_0());
			}
			otherlv_4='('
			{
				newLeafNode(otherlv_4, grammarAccess.getMergeNodeAccess().getLeftParenthesisKeyword_3_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMergeNodeRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getMergeNodeAccess().getIncomingActivityEdgeCrossReference_3_2_0());
					}
				)
			)
			(
				otherlv_6=','
				{
					newLeafNode(otherlv_6, grammarAccess.getMergeNodeAccess().getCommaKeyword_3_3_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMergeNodeRule());
							}
						}
						otherlv_7=RULE_ID
						{
							newLeafNode(otherlv_7, grammarAccess.getMergeNodeAccess().getIncomingActivityEdgeCrossReference_3_3_1_0());
						}
					)
				)
			)*
			otherlv_8=')'
			{
				newLeafNode(otherlv_8, grammarAccess.getMergeNodeAccess().getRightParenthesisKeyword_3_4());
			}
		)?
		(
			otherlv_9='out'
			{
				newLeafNode(otherlv_9, grammarAccess.getMergeNodeAccess().getOutKeyword_4_0());
			}
			otherlv_10='('
			{
				newLeafNode(otherlv_10, grammarAccess.getMergeNodeAccess().getLeftParenthesisKeyword_4_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getMergeNodeRule());
						}
					}
					otherlv_11=RULE_ID
					{
						newLeafNode(otherlv_11, grammarAccess.getMergeNodeAccess().getOutgoingActivityEdgeCrossReference_4_2_0());
					}
				)
			)
			otherlv_12=')'
			{
				newLeafNode(otherlv_12, grammarAccess.getMergeNodeAccess().getRightParenthesisKeyword_4_3());
			}
		)
	)
;

// Entry rule entryRuleDecisionNode
entryRuleDecisionNode returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDecisionNodeRule()); }
	iv_ruleDecisionNode=ruleDecisionNode
	{ $current=$iv_ruleDecisionNode.current; }
	EOF;

// Rule DecisionNode
ruleDecisionNode returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDecisionNodeAccess().getDecisionNodeAction_0(),
					$current);
			}
		)
		otherlv_1='decision'
		{
			newLeafNode(otherlv_1, grammarAccess.getDecisionNodeAccess().getDecisionKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDecisionNodeAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDecisionNodeRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='in'
			{
				newLeafNode(otherlv_3, grammarAccess.getDecisionNodeAccess().getInKeyword_3_0());
			}
			otherlv_4='('
			{
				newLeafNode(otherlv_4, grammarAccess.getDecisionNodeAccess().getLeftParenthesisKeyword_3_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDecisionNodeRule());
						}
					}
					otherlv_5=RULE_ID
					{
						newLeafNode(otherlv_5, grammarAccess.getDecisionNodeAccess().getIncomingActivityEdgeCrossReference_3_2_0());
					}
				)
			)
			otherlv_6=')'
			{
				newLeafNode(otherlv_6, grammarAccess.getDecisionNodeAccess().getRightParenthesisKeyword_3_3());
			}
		)
		(
			otherlv_7='out'
			{
				newLeafNode(otherlv_7, grammarAccess.getDecisionNodeAccess().getOutKeyword_4_0());
			}
			otherlv_8='('
			{
				newLeafNode(otherlv_8, grammarAccess.getDecisionNodeAccess().getLeftParenthesisKeyword_4_1());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getDecisionNodeRule());
						}
					}
					otherlv_9=RULE_ID
					{
						newLeafNode(otherlv_9, grammarAccess.getDecisionNodeAccess().getOutgoingActivityEdgeCrossReference_4_2_0());
					}
				)
			)
			(
				otherlv_10=','
				{
					newLeafNode(otherlv_10, grammarAccess.getDecisionNodeAccess().getCommaKeyword_4_3_0());
				}
				(
					(
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getDecisionNodeRule());
							}
						}
						otherlv_11=RULE_ID
						{
							newLeafNode(otherlv_11, grammarAccess.getDecisionNodeAccess().getOutgoingActivityEdgeCrossReference_4_3_1_0());
						}
					)
				)
			)*
			otherlv_12=')'
			{
				newLeafNode(otherlv_12, grammarAccess.getDecisionNodeAccess().getRightParenthesisKeyword_4_4());
			}
		)?
	)
;

// Entry rule entryRuleVariableAssignment
entryRuleVariableAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableAssignmentRule()); }
	iv_ruleVariableAssignment=ruleVariableAssignment
	{ $current=$iv_ruleVariableAssignment.current; }
	EOF;

// Rule VariableAssignment
ruleVariableAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getVariableAssignmentAccess().getIntegerVariableAssignmentParserRuleCall_0());
		}
		this_IntegerVariableAssignment_0=ruleIntegerVariableAssignment
		{
			$current = $this_IntegerVariableAssignment_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getVariableAssignmentAccess().getBooleanVariableAssignmentParserRuleCall_1());
		}
		this_BooleanVariableAssignment_1=ruleBooleanVariableAssignment
		{
			$current = $this_BooleanVariableAssignment_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIntegerVariableAssignment
entryRuleIntegerVariableAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerVariableAssignmentRule()); }
	iv_ruleIntegerVariableAssignment=ruleIntegerVariableAssignment
	{ $current=$iv_ruleIntegerVariableAssignment.current; }
	EOF;

// Rule IntegerVariableAssignment
ruleIntegerVariableAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntegerVariableAssignmentRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getIntegerVariableAssignmentAccess().getAssigneeIntegerVariableCrossReference_0_0());
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getIntegerVariableAssignmentAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIntegerVariableAssignmentAccess().getExpressionIntegerExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleIntegerExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntegerVariableAssignmentRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.IntegerExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBooleanVariableAssignment
entryRuleBooleanVariableAssignment returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanVariableAssignmentRule()); }
	iv_ruleBooleanVariableAssignment=ruleBooleanVariableAssignment
	{ $current=$iv_ruleBooleanVariableAssignment.current; }
	EOF;

// Rule BooleanVariableAssignment
ruleBooleanVariableAssignment returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanVariableAssignmentRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getBooleanVariableAssignmentAccess().getAssigneeBooleanVariableCrossReference_0_0());
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getBooleanVariableAssignmentAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBooleanVariableAssignmentAccess().getExpressionBooleanExpressionParserRuleCall_2_0());
				}
				lv_expression_2_0=ruleBooleanExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBooleanVariableAssignmentRule());
					}
					set(
						$current,
						"expression",
						lv_expression_2_0,
						"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.BooleanExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIntegerExpression
entryRuleIntegerExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerExpressionRule()); }
	iv_ruleIntegerExpression=ruleIntegerExpression
	{ $current=$iv_ruleIntegerExpression.current; }
	EOF;

// Rule IntegerExpression
ruleIntegerExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getIntegerExpressionAccess().getIntegerBinaryExpressionParserRuleCall_0());
		}
		this_IntegerBinaryExpression_0=ruleIntegerBinaryExpression
		{
			$current = $this_IntegerBinaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getIntegerExpressionAccess().getIntegerValueParserRuleCall_1());
		}
		this_IntegerValue_1=ruleIntegerValue
		{
			$current = $this_IntegerValue_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getIntegerExpressionAccess().getIntegerVariableParserRuleCall_2());
		}
		this_IntegerVariable_2=ruleIntegerVariable
		{
			$current = $this_IntegerVariable_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanExpressionRule()); }
	iv_ruleBooleanExpression=ruleBooleanExpression
	{ $current=$iv_ruleBooleanExpression.current; }
	EOF;

// Rule BooleanExpression
ruleBooleanExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getBooleanExpressionAccess().getBooleanBinaryExpressionParserRuleCall_0());
		}
		this_BooleanBinaryExpression_0=ruleBooleanBinaryExpression
		{
			$current = $this_BooleanBinaryExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBooleanExpressionAccess().getBooleanUnaryExpressionParserRuleCall_1());
		}
		this_BooleanUnaryExpression_1=ruleBooleanUnaryExpression
		{
			$current = $this_BooleanUnaryExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBooleanExpressionAccess().getIntegerComparisonExpressionParserRuleCall_2());
		}
		this_IntegerComparisonExpression_2=ruleIntegerComparisonExpression
		{
			$current = $this_IntegerComparisonExpression_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBooleanExpressionAccess().getBooleanValueParserRuleCall_3());
		}
		this_BooleanValue_3=ruleBooleanValue
		{
			$current = $this_BooleanValue_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getBooleanExpressionAccess().getBooleanVariableParserRuleCall_4());
		}
		this_BooleanVariable_4=ruleBooleanVariable
		{
			$current = $this_BooleanVariable_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleIntegerBinaryExpression
entryRuleIntegerBinaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerBinaryExpressionRule()); }
	iv_ruleIntegerBinaryExpression=ruleIntegerBinaryExpression
	{ $current=$iv_ruleIntegerBinaryExpression.current; }
	EOF;

// Rule IntegerBinaryExpression
ruleIntegerBinaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntegerBinaryExpressionRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getIntegerBinaryExpressionAccess().getOperand1IntegerExpressionCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIntegerBinaryExpressionAccess().getOperatorIntegerCalculationOperatorEnumRuleCall_1_0());
				}
				lv_operator_1_0=ruleIntegerCalculationOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntegerBinaryExpressionRule());
					}
					set(
						$current,
						"operator",
						lv_operator_1_0,
						"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.IntegerCalculationOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntegerBinaryExpressionRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getIntegerBinaryExpressionAccess().getOperand2IntegerExpressionCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleIntegerComparisonExpression
entryRuleIntegerComparisonExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerComparisonExpressionRule()); }
	iv_ruleIntegerComparisonExpression=ruleIntegerComparisonExpression
	{ $current=$iv_ruleIntegerComparisonExpression.current; }
	EOF;

// Rule IntegerComparisonExpression
ruleIntegerComparisonExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntegerComparisonExpressionRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getIntegerComparisonExpressionAccess().getOperand1IntegerExpressionCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIntegerComparisonExpressionAccess().getOperatorIntegerComparisonOperatorEnumRuleCall_1_0());
				}
				lv_operator_1_0=ruleIntegerComparisonOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntegerComparisonExpressionRule());
					}
					set(
						$current,
						"operator",
						lv_operator_1_0,
						"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.IntegerComparisonOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getIntegerComparisonExpressionRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getIntegerComparisonExpressionAccess().getOperand2IntegerExpressionCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleBooleanUnaryExpression
entryRuleBooleanUnaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanUnaryExpressionRule()); }
	iv_ruleBooleanUnaryExpression=ruleBooleanUnaryExpression
	{ $current=$iv_ruleBooleanUnaryExpression.current; }
	EOF;

// Rule BooleanUnaryExpression
ruleBooleanUnaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getBooleanUnaryExpressionAccess().getOperatorBooleanUnaryOperatorEnumRuleCall_0_0());
				}
				lv_operator_0_0=ruleBooleanUnaryOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBooleanUnaryExpressionRule());
					}
					set(
						$current,
						"operator",
						lv_operator_0_0,
						"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.BooleanUnaryOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanUnaryExpressionRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getBooleanUnaryExpressionAccess().getOperandBooleanVariableCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleBooleanBinaryExpression
entryRuleBooleanBinaryExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanBinaryExpressionRule()); }
	iv_ruleBooleanBinaryExpression=ruleBooleanBinaryExpression
	{ $current=$iv_ruleBooleanBinaryExpression.current; }
	EOF;

// Rule BooleanBinaryExpression
ruleBooleanBinaryExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanBinaryExpressionRule());
					}
				}
				otherlv_0=RULE_ID
				{
					newLeafNode(otherlv_0, grammarAccess.getBooleanBinaryExpressionAccess().getOperand1BooleanVariableCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getBooleanBinaryExpressionAccess().getOperatorBooleanBinaryOperatorEnumRuleCall_1_0());
				}
				lv_operator_1_0=ruleBooleanBinaryOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBooleanBinaryExpressionRule());
					}
					set(
						$current,
						"operator",
						lv_operator_1_0,
						"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.BooleanBinaryOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBooleanBinaryExpressionRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getBooleanBinaryExpressionAccess().getOperand2BooleanVariableCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleIntegerVariable
entryRuleIntegerVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerVariableRule()); }
	iv_ruleIntegerVariable=ruleIntegerVariable
	{ $current=$iv_ruleIntegerVariable.current; }
	EOF;

// Rule IntegerVariable
ruleIntegerVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getIntegerVariableAccess().getIntegerVariableAction_0(),
					$current);
			}
		)
		otherlv_1='int'
		{
			newLeafNode(otherlv_1, grammarAccess.getIntegerVariableAccess().getIntKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIntegerVariableAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIntegerVariableRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getIntegerVariableAccess().getEqualsSignKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIntegerVariableAccess().getInitialValueEIntParserRuleCall_3_1_0());
					}
					lv_initialValue_4_0=ruleEInt
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIntegerVariableRule());
						}
						set(
							$current,
							"initialValue",
							lv_initialValue_4_0,
							"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.EInt");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleBooleanVariable
entryRuleBooleanVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanVariableRule()); }
	iv_ruleBooleanVariable=ruleBooleanVariable
	{ $current=$iv_ruleBooleanVariable.current; }
	EOF;

// Rule BooleanVariable
ruleBooleanVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBooleanVariableAccess().getBooleanVariableAction_0(),
					$current);
			}
		)
		otherlv_1='bool'
		{
			newLeafNode(otherlv_1, grammarAccess.getBooleanVariableAccess().getBoolKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBooleanVariableAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBooleanVariableRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_3='='
			{
				newLeafNode(otherlv_3, grammarAccess.getBooleanVariableAccess().getEqualsSignKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBooleanVariableAccess().getInitialValueEBooleanParserRuleCall_3_1_0());
					}
					lv_initialValue_4_0=ruleEBoolean
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBooleanVariableRule());
						}
						set(
							$current,
							"initialValue",
							lv_initialValue_4_0,
							"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.EBoolean");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
	)
;

// Entry rule entryRuleBooleanValue
entryRuleBooleanValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBooleanValueRule()); }
	iv_ruleBooleanValue=ruleBooleanValue
	{ $current=$iv_ruleBooleanValue.current; }
	EOF;

// Rule BooleanValue
ruleBooleanValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getBooleanValueAccess().getValueEBooleanParserRuleCall_0());
			}
			lv_value_0_0=ruleEBoolean
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getBooleanValueRule());
				}
				set(
					$current,
					"value",
					lv_value_0_0,
					"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.EBoolean");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleIntegerValue
entryRuleIntegerValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntegerValueRule()); }
	iv_ruleIntegerValue=ruleIntegerValue
	{ $current=$iv_ruleIntegerValue.current; }
	EOF;

// Rule IntegerValue
ruleIntegerValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getIntegerValueAccess().getValueEIntParserRuleCall_0());
			}
			lv_value_0_0=ruleEInt
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getIntegerValueRule());
				}
				set(
					$current,
					"value",
					lv_value_0_0,
					"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.EInt");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleEBoolean
entryRuleEBoolean returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEBooleanRule()); }
	iv_ruleEBoolean=ruleEBoolean
	{ $current=$iv_ruleEBoolean.current.getText(); }
	EOF;

// Rule EBoolean
ruleEBoolean returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		kw='true'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanAccess().getTrueKeyword_0());
		}
		    |
		kw='false'
		{
			$current.merge(kw);
			newLeafNode(kw, grammarAccess.getEBooleanAccess().getFalseKeyword_1());
		}
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleControlFlow
entryRuleControlFlow returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getControlFlowRule()); }
	iv_ruleControlFlow=ruleControlFlow
	{ $current=$iv_ruleControlFlow.current; }
	EOF;

// Rule ControlFlow
ruleControlFlow returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='flow'
		{
			newLeafNode(otherlv_0, grammarAccess.getControlFlowAccess().getFlowKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getControlFlowAccess().getNameEStringParserRuleCall_1_0());
				}
				lv_name_1_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getControlFlowRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='from'
		{
			newLeafNode(otherlv_2, grammarAccess.getControlFlowAccess().getFromKeyword_2());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getControlFlowRule());
					}
				}
				otherlv_3=RULE_ID
				{
					newLeafNode(otherlv_3, grammarAccess.getControlFlowAccess().getSourceActivityNodeCrossReference_3_0());
				}
			)
		)
		otherlv_4='to'
		{
			newLeafNode(otherlv_4, grammarAccess.getControlFlowAccess().getToKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getControlFlowRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getControlFlowAccess().getTargetActivityNodeCrossReference_5_0());
				}
			)
		)
		(
			otherlv_6='['
			{
				newLeafNode(otherlv_6, grammarAccess.getControlFlowAccess().getLeftSquareBracketKeyword_6_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getControlFlowRule());
						}
					}
					otherlv_7=RULE_ID
					{
						newLeafNode(otherlv_7, grammarAccess.getControlFlowAccess().getGuardBooleanVariableCrossReference_6_1_0());
					}
				)
			)
			otherlv_8=']'
			{
				newLeafNode(otherlv_8, grammarAccess.getControlFlowAccess().getRightSquareBracketKeyword_6_2());
			}
		)?
	)
;

// Rule IntegerCalculationOperator
ruleIntegerCalculationOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='+'
			{
				$current = grammarAccess.getIntegerCalculationOperatorAccess().getADDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getIntegerCalculationOperatorAccess().getADDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='-'
			{
				$current = grammarAccess.getIntegerCalculationOperatorAccess().getSUBRACTEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getIntegerCalculationOperatorAccess().getSUBRACTEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule IntegerComparisonOperator
ruleIntegerComparisonOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='<'
			{
				$current = grammarAccess.getIntegerComparisonOperatorAccess().getSMALLEREnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getIntegerComparisonOperatorAccess().getSMALLEREnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='<='
			{
				$current = grammarAccess.getIntegerComparisonOperatorAccess().getSMALLER_EQUALSEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getIntegerComparisonOperatorAccess().getSMALLER_EQUALSEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='=='
			{
				$current = grammarAccess.getIntegerComparisonOperatorAccess().getEQUALSEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getIntegerComparisonOperatorAccess().getEQUALSEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='>='
			{
				$current = grammarAccess.getIntegerComparisonOperatorAccess().getGREATER_EQUALSEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getIntegerComparisonOperatorAccess().getGREATER_EQUALSEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='>'
			{
				$current = grammarAccess.getIntegerComparisonOperatorAccess().getGREATEREnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getIntegerComparisonOperatorAccess().getGREATEREnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule BooleanUnaryOperator
ruleBooleanUnaryOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='!'
		{
			$current = grammarAccess.getBooleanUnaryOperatorAccess().getNOTEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getBooleanUnaryOperatorAccess().getNOTEnumLiteralDeclaration());
		}
	)
;

// Rule BooleanBinaryOperator
ruleBooleanBinaryOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='&'
			{
				$current = grammarAccess.getBooleanBinaryOperatorAccess().getANDEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getBooleanBinaryOperatorAccess().getANDEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='|'
			{
				$current = grammarAccess.getBooleanBinaryOperatorAccess().getOREnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getBooleanBinaryOperatorAccess().getOREnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
