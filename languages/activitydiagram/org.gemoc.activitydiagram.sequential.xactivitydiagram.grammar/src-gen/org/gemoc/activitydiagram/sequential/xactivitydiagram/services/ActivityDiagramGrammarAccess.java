/*
 * generated by Xtext 2.10.0
 */
package org.gemoc.activitydiagram.sequential.xactivitydiagram.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ActivityDiagramGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ActivityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.Activity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActivityAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActivityKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cLocalsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cLocalsVariableParserRuleCall_4_0_0 = (RuleCall)cLocalsAssignment_4_0.eContents().get(0);
		private final Group cGroup_4_1 = (Group)cGroup_4.eContents().get(1);
		private final Keyword cCommaKeyword_4_1_0 = (Keyword)cGroup_4_1.eContents().get(0);
		private final Assignment cLocalsAssignment_4_1_1 = (Assignment)cGroup_4_1.eContents().get(1);
		private final RuleCall cLocalsVariableParserRuleCall_4_1_1_0 = (RuleCall)cLocalsAssignment_4_1_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cEventsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cEventsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cEventsEventParserRuleCall_5_2_0 = (RuleCall)cEventsAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cEventsAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cEventsEventParserRuleCall_5_3_1_0 = (RuleCall)cEventsAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cNodesKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cNodesAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cNodesActivityNodeParserRuleCall_6_2_0 = (RuleCall)cNodesAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cNodesAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cNodesActivityNodeParserRuleCall_6_3_1_0 = (RuleCall)cNodesAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cEdgesKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cEdgesAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cEdgesActivityEdgeParserRuleCall_7_2_0 = (RuleCall)cEdgesAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cEdgesAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cEdgesActivityEdgeParserRuleCall_7_3_1_0 = (RuleCall)cEdgesAssignment_7_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Activity:
		//	{Activity}
		//	'activity'
		//	name=EString
		//	'{' (locals+=Variable ("," locals+=Variable)*)? ('events' '{' events+=Event ("," events+=Event)* '}')? ('nodes' '{'
		//	nodes+=ActivityNode ("," nodes+=ActivityNode)* '}')? ('edges' '{' edges+=ActivityEdge ("," edges+=ActivityEdge)* '}')?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Activity} 'activity' name=EString '{' (locals+=Variable ("," locals+=Variable)*)? ('events' '{' events+=Event (","
		//events+=Event)* '}')? ('nodes' '{' nodes+=ActivityNode ("," nodes+=ActivityNode)* '}')? ('edges' '{'
		//edges+=ActivityEdge ("," edges+=ActivityEdge)* '}')? '}'
		public Group getGroup() { return cGroup; }
		
		//{Activity}
		public Action getActivityAction_0() { return cActivityAction_0; }
		
		//'activity'
		public Keyword getActivityKeyword_1() { return cActivityKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//(locals+=Variable ("," locals+=Variable)*)?
		public Group getGroup_4() { return cGroup_4; }
		
		//locals+=Variable
		public Assignment getLocalsAssignment_4_0() { return cLocalsAssignment_4_0; }
		
		//Variable
		public RuleCall getLocalsVariableParserRuleCall_4_0_0() { return cLocalsVariableParserRuleCall_4_0_0; }
		
		//("," locals+=Variable)*
		public Group getGroup_4_1() { return cGroup_4_1; }
		
		//","
		public Keyword getCommaKeyword_4_1_0() { return cCommaKeyword_4_1_0; }
		
		//locals+=Variable
		public Assignment getLocalsAssignment_4_1_1() { return cLocalsAssignment_4_1_1; }
		
		//Variable
		public RuleCall getLocalsVariableParserRuleCall_4_1_1_0() { return cLocalsVariableParserRuleCall_4_1_1_0; }
		
		//('events' '{' events+=Event ("," events+=Event)* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'events'
		public Keyword getEventsKeyword_5_0() { return cEventsKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//events+=Event
		public Assignment getEventsAssignment_5_2() { return cEventsAssignment_5_2; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_5_2_0() { return cEventsEventParserRuleCall_5_2_0; }
		
		//("," events+=Event)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//events+=Event
		public Assignment getEventsAssignment_5_3_1() { return cEventsAssignment_5_3_1; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_5_3_1_0() { return cEventsEventParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//('nodes' '{' nodes+=ActivityNode ("," nodes+=ActivityNode)* '}')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'nodes'
		public Keyword getNodesKeyword_6_0() { return cNodesKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//nodes+=ActivityNode
		public Assignment getNodesAssignment_6_2() { return cNodesAssignment_6_2; }
		
		//ActivityNode
		public RuleCall getNodesActivityNodeParserRuleCall_6_2_0() { return cNodesActivityNodeParserRuleCall_6_2_0; }
		
		//("," nodes+=ActivityNode)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//nodes+=ActivityNode
		public Assignment getNodesAssignment_6_3_1() { return cNodesAssignment_6_3_1; }
		
		//ActivityNode
		public RuleCall getNodesActivityNodeParserRuleCall_6_3_1_0() { return cNodesActivityNodeParserRuleCall_6_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
		
		//('edges' '{' edges+=ActivityEdge ("," edges+=ActivityEdge)* '}')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'edges'
		public Keyword getEdgesKeyword_7_0() { return cEdgesKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//edges+=ActivityEdge
		public Assignment getEdgesAssignment_7_2() { return cEdgesAssignment_7_2; }
		
		//ActivityEdge
		public RuleCall getEdgesActivityEdgeParserRuleCall_7_2_0() { return cEdgesActivityEdgeParserRuleCall_7_2_0; }
		
		//("," edges+=ActivityEdge)*
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//","
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }
		
		//edges+=ActivityEdge
		public Assignment getEdgesAssignment_7_3_1() { return cEdgesAssignment_7_3_1; }
		
		//ActivityEdge
		public RuleCall getEdgesActivityEdgeParserRuleCall_7_3_1_0() { return cEdgesActivityEdgeParserRuleCall_7_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_4() { return cRightCurlyBracketKeyword_7_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cEventAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Event:
		//	{Event} name=EString;
		@Override public ParserRule getRule() { return rule; }
		
		//{Event} name=EString
		public Group getGroup() { return cGroup; }
		
		//{Event}
		public Action getEventAction_0() { return cEventAction_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}
	public class ActivityNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.ActivityNode");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cOpaqueActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cAcceptEventActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cInitialNodeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cActivityFinalNodeParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cForkNodeParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cJoinNodeParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cMergeNodeParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		private final RuleCall cDecisionNodeParserRuleCall_7 = (RuleCall)cAlternatives.eContents().get(7);
		
		//ActivityNode:
		//	OpaqueAction | AcceptEventAction | InitialNode | ActivityFinalNode | ForkNode | JoinNode | MergeNode | DecisionNode;
		@Override public ParserRule getRule() { return rule; }
		
		//OpaqueAction | AcceptEventAction | InitialNode | ActivityFinalNode | ForkNode | JoinNode | MergeNode | DecisionNode
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//OpaqueAction
		public RuleCall getOpaqueActionParserRuleCall_0() { return cOpaqueActionParserRuleCall_0; }
		
		//AcceptEventAction
		public RuleCall getAcceptEventActionParserRuleCall_1() { return cAcceptEventActionParserRuleCall_1; }
		
		//InitialNode
		public RuleCall getInitialNodeParserRuleCall_2() { return cInitialNodeParserRuleCall_2; }
		
		//ActivityFinalNode
		public RuleCall getActivityFinalNodeParserRuleCall_3() { return cActivityFinalNodeParserRuleCall_3; }
		
		//ForkNode
		public RuleCall getForkNodeParserRuleCall_4() { return cForkNodeParserRuleCall_4; }
		
		//JoinNode
		public RuleCall getJoinNodeParserRuleCall_5() { return cJoinNodeParserRuleCall_5; }
		
		//MergeNode
		public RuleCall getMergeNodeParserRuleCall_6() { return cMergeNodeParserRuleCall_6; }
		
		//DecisionNode
		public RuleCall getDecisionNodeParserRuleCall_7() { return cDecisionNodeParserRuleCall_7; }
	}
	public class ActivityEdgeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.ActivityEdge");
		private final RuleCall cControlFlowParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ActivityEdge:
		//	ControlFlow;
		@Override public ParserRule getRule() { return rule; }
		
		//ControlFlow
		public RuleCall getControlFlowParserRuleCall() { return cControlFlowParserRuleCall; }
	}
	public class VariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.Variable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerVariableParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Variable:
		//	IntegerVariable | BooleanVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerVariable | BooleanVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerVariable
		public RuleCall getIntegerVariableParserRuleCall_0() { return cIntegerVariableParserRuleCall_0; }
		
		//BooleanVariable
		public RuleCall getBooleanVariableParserRuleCall_1() { return cBooleanVariableParserRuleCall_1; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerBinaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerComparisonExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBooleanUnaryExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanBinaryExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Expression:
		//	IntegerBinaryExpression | IntegerComparisonExpression | BooleanUnaryExpression | BooleanBinaryExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerBinaryExpression | IntegerComparisonExpression | BooleanUnaryExpression | BooleanBinaryExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerBinaryExpression
		public RuleCall getIntegerBinaryExpressionParserRuleCall_0() { return cIntegerBinaryExpressionParserRuleCall_0; }
		
		//IntegerComparisonExpression
		public RuleCall getIntegerComparisonExpressionParserRuleCall_1() { return cIntegerComparisonExpressionParserRuleCall_1; }
		
		//BooleanUnaryExpression
		public RuleCall getBooleanUnaryExpressionParserRuleCall_2() { return cBooleanUnaryExpressionParserRuleCall_2; }
		
		//BooleanBinaryExpression
		public RuleCall getBooleanBinaryExpressionParserRuleCall_3() { return cBooleanBinaryExpressionParserRuleCall_3; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString:
		//	STRING | ID;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}
	public class OpaqueActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.OpaqueAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cOpaqueActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cActionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCompKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cAssignmentsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cAssignmentsVariableAssignmentParserRuleCall_3_2_0 = (RuleCall)cAssignmentsAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cAssignmentsAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cAssignmentsVariableAssignmentParserRuleCall_3_3_1_0 = (RuleCall)cAssignmentsAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cIncomingAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cIncomingActivityEdgeCrossReference_4_2_0 = (CrossReference)cIncomingAssignment_4_2.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_4_2_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_4_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cOutKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cOutgoingAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final CrossReference cOutgoingActivityEdgeCrossReference_5_2_0 = (CrossReference)cOutgoingAssignment_5_2.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_5_2_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_5_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//OpaqueAction:
		//	{OpaqueAction}
		//	'action'
		//	name=EString ('comp' '{' assignments+=VariableAssignment ("," assignments+=VariableAssignment)* '}')? ('in' '('
		//	incoming=[ActivityEdge] ')')? ('out' '(' outgoing=[ActivityEdge] ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{OpaqueAction} 'action' name=EString ('comp' '{' assignments+=VariableAssignment ("," assignments+=VariableAssignment)*
		//'}')? ('in' '(' incoming=[ActivityEdge] ')')? ('out' '(' outgoing=[ActivityEdge] ')')?
		public Group getGroup() { return cGroup; }
		
		//{OpaqueAction}
		public Action getOpaqueActionAction_0() { return cOpaqueActionAction_0; }
		
		//'action'
		public Keyword getActionKeyword_1() { return cActionKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//('comp' '{' assignments+=VariableAssignment ("," assignments+=VariableAssignment)* '}')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'comp'
		public Keyword getCompKeyword_3_0() { return cCompKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//assignments+=VariableAssignment
		public Assignment getAssignmentsAssignment_3_2() { return cAssignmentsAssignment_3_2; }
		
		//VariableAssignment
		public RuleCall getAssignmentsVariableAssignmentParserRuleCall_3_2_0() { return cAssignmentsVariableAssignmentParserRuleCall_3_2_0; }
		
		//("," assignments+=VariableAssignment)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//assignments+=VariableAssignment
		public Assignment getAssignmentsAssignment_3_3_1() { return cAssignmentsAssignment_3_3_1; }
		
		//VariableAssignment
		public RuleCall getAssignmentsVariableAssignmentParserRuleCall_3_3_1_0() { return cAssignmentsVariableAssignmentParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//('in' '(' incoming=[ActivityEdge] ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'in'
		public Keyword getInKeyword_4_0() { return cInKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//incoming=[ActivityEdge]
		public Assignment getIncomingAssignment_4_2() { return cIncomingAssignment_4_2; }
		
		//[ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_4_2_0() { return cIncomingActivityEdgeCrossReference_4_2_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_4_2_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_4_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
		
		//('out' '(' outgoing=[ActivityEdge] ')')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'out'
		public Keyword getOutKeyword_5_0() { return cOutKeyword_5_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_1() { return cLeftParenthesisKeyword_5_1; }
		
		//outgoing=[ActivityEdge]
		public Assignment getOutgoingAssignment_5_2() { return cOutgoingAssignment_5_2; }
		
		//[ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_5_2_0() { return cOutgoingActivityEdgeCrossReference_5_2_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_5_2_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_5_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
	}
	public class AcceptEventActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.AcceptEventAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAcceptEventActionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAcceptKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cTypeKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cEventTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cEventTypeEventCrossReference_5_0 = (CrossReference)cEventTypeAssignment_5.eContents().get(0);
		private final RuleCall cEventTypeEventIDTerminalRuleCall_5_0_1 = (RuleCall)cEventTypeEventCrossReference_5_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cInKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cIncomingAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final CrossReference cIncomingActivityEdgeCrossReference_7_2_0 = (CrossReference)cIncomingAssignment_7_2.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_7_2_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_7_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cOutKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_8_1 = (Keyword)cGroup_8.eContents().get(1);
		private final Assignment cOutgoingAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final CrossReference cOutgoingActivityEdgeCrossReference_8_2_0 = (CrossReference)cOutgoingAssignment_8_2.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_8_2_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_8_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_8_3 = (Keyword)cGroup_8.eContents().get(3);
		
		//AcceptEventAction:
		//	{AcceptEventAction}
		//	'accept'
		//	name=EString
		//	'type' '(' eventType=[Event] ')' ('in' '(' incoming=[ActivityEdge] ')')? ('out' '(' outgoing=[ActivityEdge] ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{AcceptEventAction} 'accept' name=EString 'type' '(' eventType=[Event] ')' ('in' '(' incoming=[ActivityEdge] ')')?
		//('out' '(' outgoing=[ActivityEdge] ')')?
		public Group getGroup() { return cGroup; }
		
		//{AcceptEventAction}
		public Action getAcceptEventActionAction_0() { return cAcceptEventActionAction_0; }
		
		//'accept'
		public Keyword getAcceptKeyword_1() { return cAcceptKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'type'
		public Keyword getTypeKeyword_3() { return cTypeKeyword_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4() { return cLeftParenthesisKeyword_4; }
		
		//eventType=[Event]
		public Assignment getEventTypeAssignment_5() { return cEventTypeAssignment_5; }
		
		//[Event]
		public CrossReference getEventTypeEventCrossReference_5_0() { return cEventTypeEventCrossReference_5_0; }
		
		//ID
		public RuleCall getEventTypeEventIDTerminalRuleCall_5_0_1() { return cEventTypeEventIDTerminalRuleCall_5_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_6() { return cRightParenthesisKeyword_6; }
		
		//('in' '(' incoming=[ActivityEdge] ')')?
		public Group getGroup_7() { return cGroup_7; }
		
		//'in'
		public Keyword getInKeyword_7_0() { return cInKeyword_7_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_7_1() { return cLeftParenthesisKeyword_7_1; }
		
		//incoming=[ActivityEdge]
		public Assignment getIncomingAssignment_7_2() { return cIncomingAssignment_7_2; }
		
		//[ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_7_2_0() { return cIncomingActivityEdgeCrossReference_7_2_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_7_2_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_7_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_7_3() { return cRightParenthesisKeyword_7_3; }
		
		//('out' '(' outgoing=[ActivityEdge] ')')?
		public Group getGroup_8() { return cGroup_8; }
		
		//'out'
		public Keyword getOutKeyword_8_0() { return cOutKeyword_8_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_8_1() { return cLeftParenthesisKeyword_8_1; }
		
		//outgoing=[ActivityEdge]
		public Assignment getOutgoingAssignment_8_2() { return cOutgoingAssignment_8_2; }
		
		//[ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_8_2_0() { return cOutgoingActivityEdgeCrossReference_8_2_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_8_2_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_8_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_8_3() { return cRightParenthesisKeyword_8_3; }
	}
	public class InitialNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.InitialNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInitialNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInitialKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOutKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cOutgoingAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cOutgoingActivityEdgeCrossReference_3_2_0 = (CrossReference)cOutgoingAssignment_3_2.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_3_2_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_3_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//InitialNode:
		//	{InitialNode}
		//	'initial'
		//	name=EString ('out' '(' outgoing=[ActivityEdge] ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{InitialNode} 'initial' name=EString ('out' '(' outgoing=[ActivityEdge] ')')
		public Group getGroup() { return cGroup; }
		
		//{InitialNode}
		public Action getInitialNodeAction_0() { return cInitialNodeAction_0; }
		
		//'initial'
		public Keyword getInitialKeyword_1() { return cInitialKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//('out' '(' outgoing=[ActivityEdge] ')')
		public Group getGroup_3() { return cGroup_3; }
		
		//'out'
		public Keyword getOutKeyword_3_0() { return cOutKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//outgoing=[ActivityEdge]
		public Assignment getOutgoingAssignment_3_2() { return cOutgoingAssignment_3_2; }
		
		//[ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_3_2_0() { return cOutgoingActivityEdgeCrossReference_3_2_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_3_2_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_3_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
	}
	public class ActivityFinalNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.ActivityFinalNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cActivityFinalNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cFinalKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cIncomingAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cIncomingActivityEdgeCrossReference_3_2_0 = (CrossReference)cIncomingAssignment_3_2.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_3_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//ActivityFinalNode:
		//	{ActivityFinalNode}
		//	'final'
		//	name=EString ('in' '(' incoming=[ActivityEdge] ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{ActivityFinalNode} 'final' name=EString ('in' '(' incoming=[ActivityEdge] ')')
		public Group getGroup() { return cGroup; }
		
		//{ActivityFinalNode}
		public Action getActivityFinalNodeAction_0() { return cActivityFinalNodeAction_0; }
		
		//'final'
		public Keyword getFinalKeyword_1() { return cFinalKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//('in' '(' incoming=[ActivityEdge] ')')
		public Group getGroup_3() { return cGroup_3; }
		
		//'in'
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//incoming=[ActivityEdge]
		public Assignment getIncomingAssignment_3_2() { return cIncomingAssignment_3_2; }
		
		//[ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_3_2_0() { return cIncomingActivityEdgeCrossReference_3_2_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
	}
	public class ForkNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.ForkNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cForkNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cForkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cIncomingAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cIncomingActivityEdgeCrossReference_3_2_0 = (CrossReference)cIncomingAssignment_3_2.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_3_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOutKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cOutgoingAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cOutgoingActivityEdgeCrossReference_4_2_0 = (CrossReference)cOutgoingAssignment_4_2.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_4_2_0.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cOutgoingAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final CrossReference cOutgoingActivityEdgeCrossReference_4_3_1_0 = (CrossReference)cOutgoingAssignment_4_3_1.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_4_3_1_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_4_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		
		//ForkNode:
		//	{ForkNode}
		//	'fork'
		//	name=EString ('in' '(' incoming=[ActivityEdge] ')') ('out' '(' outgoing+=[ActivityEdge] (","
		//	outgoing+=[ActivityEdge])* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{ForkNode} 'fork' name=EString ('in' '(' incoming=[ActivityEdge] ')') ('out' '(' outgoing+=[ActivityEdge] (","
		//outgoing+=[ActivityEdge])* ')')?
		public Group getGroup() { return cGroup; }
		
		//{ForkNode}
		public Action getForkNodeAction_0() { return cForkNodeAction_0; }
		
		//'fork'
		public Keyword getForkKeyword_1() { return cForkKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//('in' '(' incoming=[ActivityEdge] ')')
		public Group getGroup_3() { return cGroup_3; }
		
		//'in'
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//incoming=[ActivityEdge]
		public Assignment getIncomingAssignment_3_2() { return cIncomingAssignment_3_2; }
		
		//[ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_3_2_0() { return cIncomingActivityEdgeCrossReference_3_2_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//('out' '(' outgoing+=[ActivityEdge] ("," outgoing+=[ActivityEdge])* ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'out'
		public Keyword getOutKeyword_4_0() { return cOutKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//outgoing+=[ActivityEdge]
		public Assignment getOutgoingAssignment_4_2() { return cOutgoingAssignment_4_2; }
		
		//[ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_4_2_0() { return cOutgoingActivityEdgeCrossReference_4_2_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1; }
		
		//("," outgoing+=[ActivityEdge])*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//outgoing+=[ActivityEdge]
		public Assignment getOutgoingAssignment_4_3_1() { return cOutgoingAssignment_4_3_1; }
		
		//[ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_4_3_1_0() { return cOutgoingActivityEdgeCrossReference_4_3_1_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_4_3_1_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_4_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
	}
	public class JoinNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.JoinNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cJoinNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cJoinKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cIncomingAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cIncomingActivityEdgeCrossReference_3_2_0 = (CrossReference)cIncomingAssignment_3_2.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cIncomingAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final CrossReference cIncomingActivityEdgeCrossReference_3_3_1_0 = (CrossReference)cIncomingAssignment_3_3_1.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_3_3_1_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_3_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOutKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cOutgoingAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cOutgoingActivityEdgeCrossReference_4_2_0 = (CrossReference)cOutgoingAssignment_4_2.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_4_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//JoinNode:
		//	{JoinNode}
		//	'join'
		//	name=EString ('in' '(' incoming+=[ActivityEdge] ("," incoming+=[ActivityEdge])* ')')? ('out' '('
		//	outgoing=[ActivityEdge] ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{JoinNode} 'join' name=EString ('in' '(' incoming+=[ActivityEdge] ("," incoming+=[ActivityEdge])* ')')? ('out' '('
		//outgoing=[ActivityEdge] ')')
		public Group getGroup() { return cGroup; }
		
		//{JoinNode}
		public Action getJoinNodeAction_0() { return cJoinNodeAction_0; }
		
		//'join'
		public Keyword getJoinKeyword_1() { return cJoinKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//('in' '(' incoming+=[ActivityEdge] ("," incoming+=[ActivityEdge])* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'in'
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//incoming+=[ActivityEdge]
		public Assignment getIncomingAssignment_3_2() { return cIncomingAssignment_3_2; }
		
		//[ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_3_2_0() { return cIncomingActivityEdgeCrossReference_3_2_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1; }
		
		//("," incoming+=[ActivityEdge])*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//incoming+=[ActivityEdge]
		public Assignment getIncomingAssignment_3_3_1() { return cIncomingAssignment_3_3_1; }
		
		//[ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_3_3_1_0() { return cIncomingActivityEdgeCrossReference_3_3_1_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_3_3_1_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_3_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
		
		//('out' '(' outgoing=[ActivityEdge] ')')
		public Group getGroup_4() { return cGroup_4; }
		
		//'out'
		public Keyword getOutKeyword_4_0() { return cOutKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//outgoing=[ActivityEdge]
		public Assignment getOutgoingAssignment_4_2() { return cOutgoingAssignment_4_2; }
		
		//[ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_4_2_0() { return cOutgoingActivityEdgeCrossReference_4_2_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
	}
	public class MergeNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.MergeNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMergeNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMergeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cIncomingAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cIncomingActivityEdgeCrossReference_3_2_0 = (CrossReference)cIncomingAssignment_3_2.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_3_2_0.eContents().get(1);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cIncomingAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final CrossReference cIncomingActivityEdgeCrossReference_3_3_1_0 = (CrossReference)cIncomingAssignment_3_3_1.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_3_3_1_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_3_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOutKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cOutgoingAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cOutgoingActivityEdgeCrossReference_4_2_0 = (CrossReference)cOutgoingAssignment_4_2.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_4_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		
		//MergeNode:
		//	{MergeNode}
		//	'merge'
		//	name=EString ('in' '(' incoming+=[ActivityEdge] ("," incoming+=[ActivityEdge])* ')')? ('out' '('
		//	outgoing=[ActivityEdge] ')');
		@Override public ParserRule getRule() { return rule; }
		
		//{MergeNode} 'merge' name=EString ('in' '(' incoming+=[ActivityEdge] ("," incoming+=[ActivityEdge])* ')')? ('out' '('
		//outgoing=[ActivityEdge] ')')
		public Group getGroup() { return cGroup; }
		
		//{MergeNode}
		public Action getMergeNodeAction_0() { return cMergeNodeAction_0; }
		
		//'merge'
		public Keyword getMergeKeyword_1() { return cMergeKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//('in' '(' incoming+=[ActivityEdge] ("," incoming+=[ActivityEdge])* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'in'
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//incoming+=[ActivityEdge]
		public Assignment getIncomingAssignment_3_2() { return cIncomingAssignment_3_2; }
		
		//[ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_3_2_0() { return cIncomingActivityEdgeCrossReference_3_2_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1; }
		
		//("," incoming+=[ActivityEdge])*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//incoming+=[ActivityEdge]
		public Assignment getIncomingAssignment_3_3_1() { return cIncomingAssignment_3_3_1; }
		
		//[ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_3_3_1_0() { return cIncomingActivityEdgeCrossReference_3_3_1_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_3_3_1_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_3_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_4() { return cRightParenthesisKeyword_3_4; }
		
		//('out' '(' outgoing=[ActivityEdge] ')')
		public Group getGroup_4() { return cGroup_4; }
		
		//'out'
		public Keyword getOutKeyword_4_0() { return cOutKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//outgoing=[ActivityEdge]
		public Assignment getOutgoingAssignment_4_2() { return cOutgoingAssignment_4_2; }
		
		//[ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_4_2_0() { return cOutgoingActivityEdgeCrossReference_4_2_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_3() { return cRightParenthesisKeyword_4_3; }
	}
	public class DecisionNodeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.DecisionNode");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDecisionNodeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cDecisionKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cInKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cIncomingAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cIncomingActivityEdgeCrossReference_3_2_0 = (CrossReference)cIncomingAssignment_3_2.eContents().get(0);
		private final RuleCall cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1 = (RuleCall)cIncomingActivityEdgeCrossReference_3_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cOutKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cOutgoingAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final CrossReference cOutgoingActivityEdgeCrossReference_4_2_0 = (CrossReference)cOutgoingAssignment_4_2.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_4_2_0.eContents().get(1);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cOutgoingAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final CrossReference cOutgoingActivityEdgeCrossReference_4_3_1_0 = (CrossReference)cOutgoingAssignment_4_3_1.eContents().get(0);
		private final RuleCall cOutgoingActivityEdgeIDTerminalRuleCall_4_3_1_0_1 = (RuleCall)cOutgoingActivityEdgeCrossReference_4_3_1_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		
		//DecisionNode:
		//	{DecisionNode}
		//	'decision'
		//	name=EString ('in' '(' incoming=[ActivityEdge] ')') ('out' '(' outgoing+=[ActivityEdge] (","
		//	outgoing+=[ActivityEdge])* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//{DecisionNode} 'decision' name=EString ('in' '(' incoming=[ActivityEdge] ')') ('out' '(' outgoing+=[ActivityEdge] (","
		//outgoing+=[ActivityEdge])* ')')?
		public Group getGroup() { return cGroup; }
		
		//{DecisionNode}
		public Action getDecisionNodeAction_0() { return cDecisionNodeAction_0; }
		
		//'decision'
		public Keyword getDecisionKeyword_1() { return cDecisionKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//('in' '(' incoming=[ActivityEdge] ')')
		public Group getGroup_3() { return cGroup_3; }
		
		//'in'
		public Keyword getInKeyword_3_0() { return cInKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//incoming=[ActivityEdge]
		public Assignment getIncomingAssignment_3_2() { return cIncomingAssignment_3_2; }
		
		//[ActivityEdge]
		public CrossReference getIncomingActivityEdgeCrossReference_3_2_0() { return cIncomingActivityEdgeCrossReference_3_2_0; }
		
		//ID
		public RuleCall getIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1() { return cIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//('out' '(' outgoing+=[ActivityEdge] ("," outgoing+=[ActivityEdge])* ')')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'out'
		public Keyword getOutKeyword_4_0() { return cOutKeyword_4_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }
		
		//outgoing+=[ActivityEdge]
		public Assignment getOutgoingAssignment_4_2() { return cOutgoingAssignment_4_2; }
		
		//[ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_4_2_0() { return cOutgoingActivityEdgeCrossReference_4_2_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_4_2_0_1; }
		
		//("," outgoing+=[ActivityEdge])*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//outgoing+=[ActivityEdge]
		public Assignment getOutgoingAssignment_4_3_1() { return cOutgoingAssignment_4_3_1; }
		
		//[ActivityEdge]
		public CrossReference getOutgoingActivityEdgeCrossReference_4_3_1_0() { return cOutgoingActivityEdgeCrossReference_4_3_1_0; }
		
		//ID
		public RuleCall getOutgoingActivityEdgeIDTerminalRuleCall_4_3_1_0_1() { return cOutgoingActivityEdgeIDTerminalRuleCall_4_3_1_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
	}
	public class VariableAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.VariableAssignment");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerVariableAssignmentParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanVariableAssignmentParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VariableAssignment:
		//	IntegerVariableAssignment | BooleanVariableAssignment;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerVariableAssignment | BooleanVariableAssignment
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerVariableAssignment
		public RuleCall getIntegerVariableAssignmentParserRuleCall_0() { return cIntegerVariableAssignmentParserRuleCall_0; }
		
		//BooleanVariableAssignment
		public RuleCall getBooleanVariableAssignmentParserRuleCall_1() { return cBooleanVariableAssignmentParserRuleCall_1; }
	}
	public class IntegerVariableAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.IntegerVariableAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssigneeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAssigneeIntegerVariableCrossReference_0_0 = (CrossReference)cAssigneeAssignment_0.eContents().get(0);
		private final RuleCall cAssigneeIntegerVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cAssigneeIntegerVariableCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionIntegerExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//IntegerVariableAssignment:
		//	assignee=[IntegerVariable] '=' expression=IntegerExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//assignee=[IntegerVariable] '=' expression=IntegerExpression
		public Group getGroup() { return cGroup; }
		
		//assignee=[IntegerVariable]
		public Assignment getAssigneeAssignment_0() { return cAssigneeAssignment_0; }
		
		//[IntegerVariable]
		public CrossReference getAssigneeIntegerVariableCrossReference_0_0() { return cAssigneeIntegerVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getAssigneeIntegerVariableIDTerminalRuleCall_0_0_1() { return cAssigneeIntegerVariableIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//expression=IntegerExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//IntegerExpression
		public RuleCall getExpressionIntegerExpressionParserRuleCall_2_0() { return cExpressionIntegerExpressionParserRuleCall_2_0; }
	}
	public class BooleanVariableAssignmentElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.BooleanVariableAssignment");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cAssigneeAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cAssigneeBooleanVariableCrossReference_0_0 = (CrossReference)cAssigneeAssignment_0.eContents().get(0);
		private final RuleCall cAssigneeBooleanVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cAssigneeBooleanVariableCrossReference_0_0.eContents().get(1);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExpressionBooleanExpressionParserRuleCall_2_0 = (RuleCall)cExpressionAssignment_2.eContents().get(0);
		
		//BooleanVariableAssignment:
		//	assignee=[BooleanVariable] '=' expression=BooleanExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//assignee=[BooleanVariable] '=' expression=BooleanExpression
		public Group getGroup() { return cGroup; }
		
		//assignee=[BooleanVariable]
		public Assignment getAssigneeAssignment_0() { return cAssigneeAssignment_0; }
		
		//[BooleanVariable]
		public CrossReference getAssigneeBooleanVariableCrossReference_0_0() { return cAssigneeBooleanVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getAssigneeBooleanVariableIDTerminalRuleCall_0_0_1() { return cAssigneeBooleanVariableIDTerminalRuleCall_0_0_1; }
		
		//'='
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }
		
		//expression=BooleanExpression
		public Assignment getExpressionAssignment_2() { return cExpressionAssignment_2; }
		
		//BooleanExpression
		public RuleCall getExpressionBooleanExpressionParserRuleCall_2_0() { return cExpressionBooleanExpressionParserRuleCall_2_0; }
	}
	public class IntegerExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.IntegerExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerBinaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerVariableParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//IntegerExpression:
		//	IntegerBinaryExpression | IntegerValue | IntegerVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//IntegerBinaryExpression | IntegerValue | IntegerVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntegerBinaryExpression
		public RuleCall getIntegerBinaryExpressionParserRuleCall_0() { return cIntegerBinaryExpressionParserRuleCall_0; }
		
		//IntegerValue
		public RuleCall getIntegerValueParserRuleCall_1() { return cIntegerValueParserRuleCall_1; }
		
		//IntegerVariable
		public RuleCall getIntegerVariableParserRuleCall_2() { return cIntegerVariableParserRuleCall_2; }
	}
	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.BooleanExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBooleanBinaryExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBooleanUnaryExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cIntegerComparisonExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBooleanValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cBooleanVariableParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//BooleanExpression:
		//	BooleanBinaryExpression | BooleanUnaryExpression | IntegerComparisonExpression | BooleanValue | BooleanVariable;
		@Override public ParserRule getRule() { return rule; }
		
		//BooleanBinaryExpression | BooleanUnaryExpression | IntegerComparisonExpression | BooleanValue | BooleanVariable
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//BooleanBinaryExpression
		public RuleCall getBooleanBinaryExpressionParserRuleCall_0() { return cBooleanBinaryExpressionParserRuleCall_0; }
		
		//BooleanUnaryExpression
		public RuleCall getBooleanUnaryExpressionParserRuleCall_1() { return cBooleanUnaryExpressionParserRuleCall_1; }
		
		//IntegerComparisonExpression
		public RuleCall getIntegerComparisonExpressionParserRuleCall_2() { return cIntegerComparisonExpressionParserRuleCall_2; }
		
		//BooleanValue
		public RuleCall getBooleanValueParserRuleCall_3() { return cBooleanValueParserRuleCall_3; }
		
		//BooleanVariable
		public RuleCall getBooleanVariableParserRuleCall_4() { return cBooleanVariableParserRuleCall_4; }
	}
	public class IntegerBinaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.IntegerBinaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperand1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cOperand1IntegerExpressionCrossReference_0_0 = (CrossReference)cOperand1Assignment_0.eContents().get(0);
		private final RuleCall cOperand1IntegerExpressionIDTerminalRuleCall_0_0_1 = (RuleCall)cOperand1IntegerExpressionCrossReference_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorIntegerCalculationOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cOperand2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOperand2IntegerExpressionCrossReference_2_0 = (CrossReference)cOperand2Assignment_2.eContents().get(0);
		private final RuleCall cOperand2IntegerExpressionIDTerminalRuleCall_2_0_1 = (RuleCall)cOperand2IntegerExpressionCrossReference_2_0.eContents().get(1);
		
		//IntegerBinaryExpression:
		//	operand1=[IntegerExpression] operator=IntegerCalculationOperator
		//	operand2=[IntegerExpression];
		@Override public ParserRule getRule() { return rule; }
		
		//operand1=[IntegerExpression] operator=IntegerCalculationOperator operand2=[IntegerExpression]
		public Group getGroup() { return cGroup; }
		
		//operand1=[IntegerExpression]
		public Assignment getOperand1Assignment_0() { return cOperand1Assignment_0; }
		
		//[IntegerExpression]
		public CrossReference getOperand1IntegerExpressionCrossReference_0_0() { return cOperand1IntegerExpressionCrossReference_0_0; }
		
		//ID
		public RuleCall getOperand1IntegerExpressionIDTerminalRuleCall_0_0_1() { return cOperand1IntegerExpressionIDTerminalRuleCall_0_0_1; }
		
		//operator=IntegerCalculationOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//IntegerCalculationOperator
		public RuleCall getOperatorIntegerCalculationOperatorEnumRuleCall_1_0() { return cOperatorIntegerCalculationOperatorEnumRuleCall_1_0; }
		
		//operand2=[IntegerExpression]
		public Assignment getOperand2Assignment_2() { return cOperand2Assignment_2; }
		
		//[IntegerExpression]
		public CrossReference getOperand2IntegerExpressionCrossReference_2_0() { return cOperand2IntegerExpressionCrossReference_2_0; }
		
		//ID
		public RuleCall getOperand2IntegerExpressionIDTerminalRuleCall_2_0_1() { return cOperand2IntegerExpressionIDTerminalRuleCall_2_0_1; }
	}
	public class IntegerComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.IntegerComparisonExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperand1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cOperand1IntegerExpressionCrossReference_0_0 = (CrossReference)cOperand1Assignment_0.eContents().get(0);
		private final RuleCall cOperand1IntegerExpressionIDTerminalRuleCall_0_0_1 = (RuleCall)cOperand1IntegerExpressionCrossReference_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorIntegerComparisonOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cOperand2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOperand2IntegerExpressionCrossReference_2_0 = (CrossReference)cOperand2Assignment_2.eContents().get(0);
		private final RuleCall cOperand2IntegerExpressionIDTerminalRuleCall_2_0_1 = (RuleCall)cOperand2IntegerExpressionCrossReference_2_0.eContents().get(1);
		
		//IntegerComparisonExpression:
		//	operand1=[IntegerExpression] operator=IntegerComparisonOperator
		//	operand2=[IntegerExpression];
		@Override public ParserRule getRule() { return rule; }
		
		//operand1=[IntegerExpression] operator=IntegerComparisonOperator operand2=[IntegerExpression]
		public Group getGroup() { return cGroup; }
		
		//operand1=[IntegerExpression]
		public Assignment getOperand1Assignment_0() { return cOperand1Assignment_0; }
		
		//[IntegerExpression]
		public CrossReference getOperand1IntegerExpressionCrossReference_0_0() { return cOperand1IntegerExpressionCrossReference_0_0; }
		
		//ID
		public RuleCall getOperand1IntegerExpressionIDTerminalRuleCall_0_0_1() { return cOperand1IntegerExpressionIDTerminalRuleCall_0_0_1; }
		
		//operator=IntegerComparisonOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//IntegerComparisonOperator
		public RuleCall getOperatorIntegerComparisonOperatorEnumRuleCall_1_0() { return cOperatorIntegerComparisonOperatorEnumRuleCall_1_0; }
		
		//operand2=[IntegerExpression]
		public Assignment getOperand2Assignment_2() { return cOperand2Assignment_2; }
		
		//[IntegerExpression]
		public CrossReference getOperand2IntegerExpressionCrossReference_2_0() { return cOperand2IntegerExpressionCrossReference_2_0; }
		
		//ID
		public RuleCall getOperand2IntegerExpressionIDTerminalRuleCall_2_0_1() { return cOperand2IntegerExpressionIDTerminalRuleCall_2_0_1; }
	}
	public class BooleanUnaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.BooleanUnaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperatorBooleanUnaryOperatorEnumRuleCall_0_0 = (RuleCall)cOperatorAssignment_0.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cOperandBooleanVariableCrossReference_1_0 = (CrossReference)cOperandAssignment_1.eContents().get(0);
		private final RuleCall cOperandBooleanVariableIDTerminalRuleCall_1_0_1 = (RuleCall)cOperandBooleanVariableCrossReference_1_0.eContents().get(1);
		
		//BooleanUnaryExpression:
		//	operator=BooleanUnaryOperator
		//	operand=[BooleanVariable];
		@Override public ParserRule getRule() { return rule; }
		
		//operator=BooleanUnaryOperator operand=[BooleanVariable]
		public Group getGroup() { return cGroup; }
		
		//operator=BooleanUnaryOperator
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//BooleanUnaryOperator
		public RuleCall getOperatorBooleanUnaryOperatorEnumRuleCall_0_0() { return cOperatorBooleanUnaryOperatorEnumRuleCall_0_0; }
		
		//operand=[BooleanVariable]
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }
		
		//[BooleanVariable]
		public CrossReference getOperandBooleanVariableCrossReference_1_0() { return cOperandBooleanVariableCrossReference_1_0; }
		
		//ID
		public RuleCall getOperandBooleanVariableIDTerminalRuleCall_1_0_1() { return cOperandBooleanVariableIDTerminalRuleCall_1_0_1; }
	}
	public class BooleanBinaryExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.BooleanBinaryExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperand1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cOperand1BooleanVariableCrossReference_0_0 = (CrossReference)cOperand1Assignment_0.eContents().get(0);
		private final RuleCall cOperand1BooleanVariableIDTerminalRuleCall_0_0_1 = (RuleCall)cOperand1BooleanVariableCrossReference_0_0.eContents().get(1);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorBooleanBinaryOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cOperand2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOperand2BooleanVariableCrossReference_2_0 = (CrossReference)cOperand2Assignment_2.eContents().get(0);
		private final RuleCall cOperand2BooleanVariableIDTerminalRuleCall_2_0_1 = (RuleCall)cOperand2BooleanVariableCrossReference_2_0.eContents().get(1);
		
		//BooleanBinaryExpression:
		//	operand1=[BooleanVariable] operator=BooleanBinaryOperator
		//	operand2=[BooleanVariable];
		@Override public ParserRule getRule() { return rule; }
		
		//operand1=[BooleanVariable] operator=BooleanBinaryOperator operand2=[BooleanVariable]
		public Group getGroup() { return cGroup; }
		
		//operand1=[BooleanVariable]
		public Assignment getOperand1Assignment_0() { return cOperand1Assignment_0; }
		
		//[BooleanVariable]
		public CrossReference getOperand1BooleanVariableCrossReference_0_0() { return cOperand1BooleanVariableCrossReference_0_0; }
		
		//ID
		public RuleCall getOperand1BooleanVariableIDTerminalRuleCall_0_0_1() { return cOperand1BooleanVariableIDTerminalRuleCall_0_0_1; }
		
		//operator=BooleanBinaryOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//BooleanBinaryOperator
		public RuleCall getOperatorBooleanBinaryOperatorEnumRuleCall_1_0() { return cOperatorBooleanBinaryOperatorEnumRuleCall_1_0; }
		
		//operand2=[BooleanVariable]
		public Assignment getOperand2Assignment_2() { return cOperand2Assignment_2; }
		
		//[BooleanVariable]
		public CrossReference getOperand2BooleanVariableCrossReference_2_0() { return cOperand2BooleanVariableCrossReference_2_0; }
		
		//ID
		public RuleCall getOperand2BooleanVariableIDTerminalRuleCall_2_0_1() { return cOperand2BooleanVariableIDTerminalRuleCall_2_0_1; }
	}
	public class IntegerVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.IntegerVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cIntegerVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cIntKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInitialValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInitialValueEIntParserRuleCall_3_1_0 = (RuleCall)cInitialValueAssignment_3_1.eContents().get(0);
		
		//IntegerVariable:
		//	{IntegerVariable}
		//	'int'
		//	name=EString ('=' initialValue=EInt)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{IntegerVariable} 'int' name=EString ('=' initialValue=EInt)?
		public Group getGroup() { return cGroup; }
		
		//{IntegerVariable}
		public Action getIntegerVariableAction_0() { return cIntegerVariableAction_0; }
		
		//'int'
		public Keyword getIntKeyword_1() { return cIntKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//('=' initialValue=EInt)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//initialValue=EInt
		public Assignment getInitialValueAssignment_3_1() { return cInitialValueAssignment_3_1; }
		
		//EInt
		public RuleCall getInitialValueEIntParserRuleCall_3_1_0() { return cInitialValueEIntParserRuleCall_3_1_0; }
	}
	public class BooleanVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.BooleanVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBooleanVariableAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBoolKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEqualsSignKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cInitialValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cInitialValueEBooleanParserRuleCall_3_1_0 = (RuleCall)cInitialValueAssignment_3_1.eContents().get(0);
		
		//BooleanVariable:
		//	{BooleanVariable}
		//	'bool'
		//	name=EString ('=' initialValue=EBoolean)?;
		@Override public ParserRule getRule() { return rule; }
		
		//{BooleanVariable} 'bool' name=EString ('=' initialValue=EBoolean)?
		public Group getGroup() { return cGroup; }
		
		//{BooleanVariable}
		public Action getBooleanVariableAction_0() { return cBooleanVariableAction_0; }
		
		//'bool'
		public Keyword getBoolKeyword_1() { return cBoolKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//('=' initialValue=EBoolean)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'='
		public Keyword getEqualsSignKeyword_3_0() { return cEqualsSignKeyword_3_0; }
		
		//initialValue=EBoolean
		public Assignment getInitialValueAssignment_3_1() { return cInitialValueAssignment_3_1; }
		
		//EBoolean
		public RuleCall getInitialValueEBooleanParserRuleCall_3_1_0() { return cInitialValueEBooleanParserRuleCall_3_1_0; }
	}
	public class BooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.BooleanValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEBooleanParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BooleanValue:
		//	value=EBoolean;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EBoolean
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EBoolean
		public RuleCall getValueEBooleanParserRuleCall_0() { return cValueEBooleanParserRuleCall_0; }
	}
	public class IntegerValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.IntegerValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEIntParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//IntegerValue:
		//	value=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EInt
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_0() { return cValueEIntParserRuleCall_0; }
	}
	public class EBooleanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.EBoolean");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//EBoolean ecore::EBoolean:
		//	'true' | 'false'
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//EInt ecore::EInt:
		//	'-'? INT
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	public class ControlFlowElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.ControlFlow");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFlowKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cFromKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cSourceActivityNodeCrossReference_3_0 = (CrossReference)cSourceAssignment_3.eContents().get(0);
		private final RuleCall cSourceActivityNodeIDTerminalRuleCall_3_0_1 = (RuleCall)cSourceActivityNodeCrossReference_3_0.eContents().get(1);
		private final Keyword cToKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTargetAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cTargetActivityNodeCrossReference_5_0 = (CrossReference)cTargetAssignment_5.eContents().get(0);
		private final RuleCall cTargetActivityNodeIDTerminalRuleCall_5_0_1 = (RuleCall)cTargetActivityNodeCrossReference_5_0.eContents().get(1);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cLeftSquareBracketKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cGuardAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final CrossReference cGuardBooleanVariableCrossReference_6_1_0 = (CrossReference)cGuardAssignment_6_1.eContents().get(0);
		private final RuleCall cGuardBooleanVariableIDTerminalRuleCall_6_1_0_1 = (RuleCall)cGuardBooleanVariableCrossReference_6_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		
		//ControlFlow:
		//	'flow'
		//	name=EString
		//	'from' source=[ActivityNode]
		//	'to' target=[ActivityNode] ('[' guard=[BooleanVariable] ']')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'flow' name=EString 'from' source=[ActivityNode] 'to' target=[ActivityNode] ('[' guard=[BooleanVariable] ']')?
		public Group getGroup() { return cGroup; }
		
		//'flow'
		public Keyword getFlowKeyword_0() { return cFlowKeyword_0; }
		
		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
		
		//'from'
		public Keyword getFromKeyword_2() { return cFromKeyword_2; }
		
		//source=[ActivityNode]
		public Assignment getSourceAssignment_3() { return cSourceAssignment_3; }
		
		//[ActivityNode]
		public CrossReference getSourceActivityNodeCrossReference_3_0() { return cSourceActivityNodeCrossReference_3_0; }
		
		//ID
		public RuleCall getSourceActivityNodeIDTerminalRuleCall_3_0_1() { return cSourceActivityNodeIDTerminalRuleCall_3_0_1; }
		
		//'to'
		public Keyword getToKeyword_4() { return cToKeyword_4; }
		
		//target=[ActivityNode]
		public Assignment getTargetAssignment_5() { return cTargetAssignment_5; }
		
		//[ActivityNode]
		public CrossReference getTargetActivityNodeCrossReference_5_0() { return cTargetActivityNodeCrossReference_5_0; }
		
		//ID
		public RuleCall getTargetActivityNodeIDTerminalRuleCall_5_0_1() { return cTargetActivityNodeIDTerminalRuleCall_5_0_1; }
		
		//('[' guard=[BooleanVariable] ']')?
		public Group getGroup_6() { return cGroup_6; }
		
		//'['
		public Keyword getLeftSquareBracketKeyword_6_0() { return cLeftSquareBracketKeyword_6_0; }
		
		//guard=[BooleanVariable]
		public Assignment getGuardAssignment_6_1() { return cGuardAssignment_6_1; }
		
		//[BooleanVariable]
		public CrossReference getGuardBooleanVariableCrossReference_6_1_0() { return cGuardBooleanVariableCrossReference_6_1_0; }
		
		//ID
		public RuleCall getGuardBooleanVariableIDTerminalRuleCall_6_1_0_1() { return cGuardBooleanVariableIDTerminalRuleCall_6_1_0_1; }
		
		//']'
		public Keyword getRightSquareBracketKeyword_6_2() { return cRightSquareBracketKeyword_6_2; }
	}
	
	public class IntegerCalculationOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.IntegerCalculationOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cADDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cADDPlusSignKeyword_0_0 = (Keyword)cADDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSUBRACTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSUBRACTHyphenMinusKeyword_1_0 = (Keyword)cSUBRACTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum IntegerCalculationOperator:
		//	ADD='+' | SUBRACT='-';
		public EnumRule getRule() { return rule; }
		
		//ADD='+' | SUBRACT='-'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ADD='+'
		public EnumLiteralDeclaration getADDEnumLiteralDeclaration_0() { return cADDEnumLiteralDeclaration_0; }
		
		//'+'
		public Keyword getADDPlusSignKeyword_0_0() { return cADDPlusSignKeyword_0_0; }
		
		//SUBRACT='-'
		public EnumLiteralDeclaration getSUBRACTEnumLiteralDeclaration_1() { return cSUBRACTEnumLiteralDeclaration_1; }
		
		//'-'
		public Keyword getSUBRACTHyphenMinusKeyword_1_0() { return cSUBRACTHyphenMinusKeyword_1_0; }
	}
	public class IntegerComparisonOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.IntegerComparisonOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSMALLEREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSMALLERLessThanSignKeyword_0_0 = (Keyword)cSMALLEREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cSMALLER_EQUALSEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cSMALLER_EQUALSLessThanSignEqualsSignKeyword_1_0 = (Keyword)cSMALLER_EQUALSEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEQUALSEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEQUALSEqualsSignEqualsSignKeyword_2_0 = (Keyword)cEQUALSEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGREATER_EQUALSEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGREATER_EQUALSGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGREATER_EQUALSEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGREATEREnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGREATERGreaterThanSignKeyword_4_0 = (Keyword)cGREATEREnumLiteralDeclaration_4.eContents().get(0);
		
		//enum IntegerComparisonOperator:
		//	SMALLER='<' | SMALLER_EQUALS='<=' | EQUALS='==' | GREATER_EQUALS='>=' | GREATER='>';
		public EnumRule getRule() { return rule; }
		
		//SMALLER='<' | SMALLER_EQUALS='<=' | EQUALS='==' | GREATER_EQUALS='>=' | GREATER='>'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SMALLER='<'
		public EnumLiteralDeclaration getSMALLEREnumLiteralDeclaration_0() { return cSMALLEREnumLiteralDeclaration_0; }
		
		//'<'
		public Keyword getSMALLERLessThanSignKeyword_0_0() { return cSMALLERLessThanSignKeyword_0_0; }
		
		//SMALLER_EQUALS='<='
		public EnumLiteralDeclaration getSMALLER_EQUALSEnumLiteralDeclaration_1() { return cSMALLER_EQUALSEnumLiteralDeclaration_1; }
		
		//'<='
		public Keyword getSMALLER_EQUALSLessThanSignEqualsSignKeyword_1_0() { return cSMALLER_EQUALSLessThanSignEqualsSignKeyword_1_0; }
		
		//EQUALS='=='
		public EnumLiteralDeclaration getEQUALSEnumLiteralDeclaration_2() { return cEQUALSEnumLiteralDeclaration_2; }
		
		//'=='
		public Keyword getEQUALSEqualsSignEqualsSignKeyword_2_0() { return cEQUALSEqualsSignEqualsSignKeyword_2_0; }
		
		//GREATER_EQUALS='>='
		public EnumLiteralDeclaration getGREATER_EQUALSEnumLiteralDeclaration_3() { return cGREATER_EQUALSEnumLiteralDeclaration_3; }
		
		//'>='
		public Keyword getGREATER_EQUALSGreaterThanSignEqualsSignKeyword_3_0() { return cGREATER_EQUALSGreaterThanSignEqualsSignKeyword_3_0; }
		
		//GREATER='>'
		public EnumLiteralDeclaration getGREATEREnumLiteralDeclaration_4() { return cGREATEREnumLiteralDeclaration_4; }
		
		//'>'
		public Keyword getGREATERGreaterThanSignKeyword_4_0() { return cGREATERGreaterThanSignKeyword_4_0; }
	}
	public class BooleanUnaryOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.BooleanUnaryOperator");
		private final EnumLiteralDeclaration cNOTEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cNOTExclamationMarkKeyword_0 = (Keyword)cNOTEnumLiteralDeclaration.eContents().get(0);
		
		//enum BooleanUnaryOperator:
		//	NOT='!';
		public EnumRule getRule() { return rule; }
		
		//NOT='!'
		public EnumLiteralDeclaration getNOTEnumLiteralDeclaration() { return cNOTEnumLiteralDeclaration; }
		
		//'!'
		public Keyword getNOTExclamationMarkKeyword_0() { return cNOTExclamationMarkKeyword_0; }
	}
	public class BooleanBinaryOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram.BooleanBinaryOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cANDEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cANDAmpersandKeyword_0_0 = (Keyword)cANDEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOREnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cORVerticalLineKeyword_1_0 = (Keyword)cOREnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BooleanBinaryOperator:
		//	AND='&' | OR='|';
		public EnumRule getRule() { return rule; }
		
		//AND='&' | OR='|'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//AND='&'
		public EnumLiteralDeclaration getANDEnumLiteralDeclaration_0() { return cANDEnumLiteralDeclaration_0; }
		
		//'&'
		public Keyword getANDAmpersandKeyword_0_0() { return cANDAmpersandKeyword_0_0; }
		
		//OR='|'
		public EnumLiteralDeclaration getOREnumLiteralDeclaration_1() { return cOREnumLiteralDeclaration_1; }
		
		//'|'
		public Keyword getORVerticalLineKeyword_1_0() { return cORVerticalLineKeyword_1_0; }
	}
	
	private final ActivityElements pActivity;
	private final EventElements pEvent;
	private final ActivityNodeElements pActivityNode;
	private final ActivityEdgeElements pActivityEdge;
	private final VariableElements pVariable;
	private final ExpressionElements pExpression;
	private final EStringElements pEString;
	private final OpaqueActionElements pOpaqueAction;
	private final AcceptEventActionElements pAcceptEventAction;
	private final InitialNodeElements pInitialNode;
	private final ActivityFinalNodeElements pActivityFinalNode;
	private final ForkNodeElements pForkNode;
	private final JoinNodeElements pJoinNode;
	private final MergeNodeElements pMergeNode;
	private final DecisionNodeElements pDecisionNode;
	private final VariableAssignmentElements pVariableAssignment;
	private final IntegerVariableAssignmentElements pIntegerVariableAssignment;
	private final BooleanVariableAssignmentElements pBooleanVariableAssignment;
	private final IntegerExpressionElements pIntegerExpression;
	private final BooleanExpressionElements pBooleanExpression;
	private final IntegerBinaryExpressionElements pIntegerBinaryExpression;
	private final IntegerComparisonExpressionElements pIntegerComparisonExpression;
	private final BooleanUnaryExpressionElements pBooleanUnaryExpression;
	private final BooleanBinaryExpressionElements pBooleanBinaryExpression;
	private final IntegerVariableElements pIntegerVariable;
	private final BooleanVariableElements pBooleanVariable;
	private final BooleanValueElements pBooleanValue;
	private final IntegerValueElements pIntegerValue;
	private final EBooleanElements pEBoolean;
	private final EIntElements pEInt;
	private final IntegerCalculationOperatorElements eIntegerCalculationOperator;
	private final IntegerComparisonOperatorElements eIntegerComparisonOperator;
	private final BooleanUnaryOperatorElements eBooleanUnaryOperator;
	private final BooleanBinaryOperatorElements eBooleanBinaryOperator;
	private final ControlFlowElements pControlFlow;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ActivityDiagramGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pActivity = new ActivityElements();
		this.pEvent = new EventElements();
		this.pActivityNode = new ActivityNodeElements();
		this.pActivityEdge = new ActivityEdgeElements();
		this.pVariable = new VariableElements();
		this.pExpression = new ExpressionElements();
		this.pEString = new EStringElements();
		this.pOpaqueAction = new OpaqueActionElements();
		this.pAcceptEventAction = new AcceptEventActionElements();
		this.pInitialNode = new InitialNodeElements();
		this.pActivityFinalNode = new ActivityFinalNodeElements();
		this.pForkNode = new ForkNodeElements();
		this.pJoinNode = new JoinNodeElements();
		this.pMergeNode = new MergeNodeElements();
		this.pDecisionNode = new DecisionNodeElements();
		this.pVariableAssignment = new VariableAssignmentElements();
		this.pIntegerVariableAssignment = new IntegerVariableAssignmentElements();
		this.pBooleanVariableAssignment = new BooleanVariableAssignmentElements();
		this.pIntegerExpression = new IntegerExpressionElements();
		this.pBooleanExpression = new BooleanExpressionElements();
		this.pIntegerBinaryExpression = new IntegerBinaryExpressionElements();
		this.pIntegerComparisonExpression = new IntegerComparisonExpressionElements();
		this.pBooleanUnaryExpression = new BooleanUnaryExpressionElements();
		this.pBooleanBinaryExpression = new BooleanBinaryExpressionElements();
		this.pIntegerVariable = new IntegerVariableElements();
		this.pBooleanVariable = new BooleanVariableElements();
		this.pBooleanValue = new BooleanValueElements();
		this.pIntegerValue = new IntegerValueElements();
		this.pEBoolean = new EBooleanElements();
		this.pEInt = new EIntElements();
		this.eIntegerCalculationOperator = new IntegerCalculationOperatorElements();
		this.eIntegerComparisonOperator = new IntegerComparisonOperatorElements();
		this.eBooleanUnaryOperator = new BooleanUnaryOperatorElements();
		this.eBooleanBinaryOperator = new BooleanBinaryOperatorElements();
		this.pControlFlow = new ControlFlowElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Activity:
	//	{Activity}
	//	'activity'
	//	name=EString
	//	'{' (locals+=Variable ("," locals+=Variable)*)? ('events' '{' events+=Event ("," events+=Event)* '}')? ('nodes' '{'
	//	nodes+=ActivityNode ("," nodes+=ActivityNode)* '}')? ('edges' '{' edges+=ActivityEdge ("," edges+=ActivityEdge)* '}')?
	//	'}';
	public ActivityElements getActivityAccess() {
		return pActivity;
	}
	
	public ParserRule getActivityRule() {
		return getActivityAccess().getRule();
	}
	
	//Event:
	//	{Event} name=EString;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//ActivityNode:
	//	OpaqueAction | AcceptEventAction | InitialNode | ActivityFinalNode | ForkNode | JoinNode | MergeNode | DecisionNode;
	public ActivityNodeElements getActivityNodeAccess() {
		return pActivityNode;
	}
	
	public ParserRule getActivityNodeRule() {
		return getActivityNodeAccess().getRule();
	}
	
	//ActivityEdge:
	//	ControlFlow;
	public ActivityEdgeElements getActivityEdgeAccess() {
		return pActivityEdge;
	}
	
	public ParserRule getActivityEdgeRule() {
		return getActivityEdgeAccess().getRule();
	}
	
	//Variable:
	//	IntegerVariable | BooleanVariable;
	public VariableElements getVariableAccess() {
		return pVariable;
	}
	
	public ParserRule getVariableRule() {
		return getVariableAccess().getRule();
	}
	
	//Expression:
	//	IntegerBinaryExpression | IntegerComparisonExpression | BooleanUnaryExpression | BooleanBinaryExpression;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//OpaqueAction:
	//	{OpaqueAction}
	//	'action'
	//	name=EString ('comp' '{' assignments+=VariableAssignment ("," assignments+=VariableAssignment)* '}')? ('in' '('
	//	incoming=[ActivityEdge] ')')? ('out' '(' outgoing=[ActivityEdge] ')')?;
	public OpaqueActionElements getOpaqueActionAccess() {
		return pOpaqueAction;
	}
	
	public ParserRule getOpaqueActionRule() {
		return getOpaqueActionAccess().getRule();
	}
	
	//AcceptEventAction:
	//	{AcceptEventAction}
	//	'accept'
	//	name=EString
	//	'type' '(' eventType=[Event] ')' ('in' '(' incoming=[ActivityEdge] ')')? ('out' '(' outgoing=[ActivityEdge] ')')?;
	public AcceptEventActionElements getAcceptEventActionAccess() {
		return pAcceptEventAction;
	}
	
	public ParserRule getAcceptEventActionRule() {
		return getAcceptEventActionAccess().getRule();
	}
	
	//InitialNode:
	//	{InitialNode}
	//	'initial'
	//	name=EString ('out' '(' outgoing=[ActivityEdge] ')');
	public InitialNodeElements getInitialNodeAccess() {
		return pInitialNode;
	}
	
	public ParserRule getInitialNodeRule() {
		return getInitialNodeAccess().getRule();
	}
	
	//ActivityFinalNode:
	//	{ActivityFinalNode}
	//	'final'
	//	name=EString ('in' '(' incoming=[ActivityEdge] ')');
	public ActivityFinalNodeElements getActivityFinalNodeAccess() {
		return pActivityFinalNode;
	}
	
	public ParserRule getActivityFinalNodeRule() {
		return getActivityFinalNodeAccess().getRule();
	}
	
	//ForkNode:
	//	{ForkNode}
	//	'fork'
	//	name=EString ('in' '(' incoming=[ActivityEdge] ')') ('out' '(' outgoing+=[ActivityEdge] (","
	//	outgoing+=[ActivityEdge])* ')')?;
	public ForkNodeElements getForkNodeAccess() {
		return pForkNode;
	}
	
	public ParserRule getForkNodeRule() {
		return getForkNodeAccess().getRule();
	}
	
	//JoinNode:
	//	{JoinNode}
	//	'join'
	//	name=EString ('in' '(' incoming+=[ActivityEdge] ("," incoming+=[ActivityEdge])* ')')? ('out' '('
	//	outgoing=[ActivityEdge] ')');
	public JoinNodeElements getJoinNodeAccess() {
		return pJoinNode;
	}
	
	public ParserRule getJoinNodeRule() {
		return getJoinNodeAccess().getRule();
	}
	
	//MergeNode:
	//	{MergeNode}
	//	'merge'
	//	name=EString ('in' '(' incoming+=[ActivityEdge] ("," incoming+=[ActivityEdge])* ')')? ('out' '('
	//	outgoing=[ActivityEdge] ')');
	public MergeNodeElements getMergeNodeAccess() {
		return pMergeNode;
	}
	
	public ParserRule getMergeNodeRule() {
		return getMergeNodeAccess().getRule();
	}
	
	//DecisionNode:
	//	{DecisionNode}
	//	'decision'
	//	name=EString ('in' '(' incoming=[ActivityEdge] ')') ('out' '(' outgoing+=[ActivityEdge] (","
	//	outgoing+=[ActivityEdge])* ')')?;
	public DecisionNodeElements getDecisionNodeAccess() {
		return pDecisionNode;
	}
	
	public ParserRule getDecisionNodeRule() {
		return getDecisionNodeAccess().getRule();
	}
	
	//VariableAssignment:
	//	IntegerVariableAssignment | BooleanVariableAssignment;
	public VariableAssignmentElements getVariableAssignmentAccess() {
		return pVariableAssignment;
	}
	
	public ParserRule getVariableAssignmentRule() {
		return getVariableAssignmentAccess().getRule();
	}
	
	//IntegerVariableAssignment:
	//	assignee=[IntegerVariable] '=' expression=IntegerExpression;
	public IntegerVariableAssignmentElements getIntegerVariableAssignmentAccess() {
		return pIntegerVariableAssignment;
	}
	
	public ParserRule getIntegerVariableAssignmentRule() {
		return getIntegerVariableAssignmentAccess().getRule();
	}
	
	//BooleanVariableAssignment:
	//	assignee=[BooleanVariable] '=' expression=BooleanExpression;
	public BooleanVariableAssignmentElements getBooleanVariableAssignmentAccess() {
		return pBooleanVariableAssignment;
	}
	
	public ParserRule getBooleanVariableAssignmentRule() {
		return getBooleanVariableAssignmentAccess().getRule();
	}
	
	//IntegerExpression:
	//	IntegerBinaryExpression | IntegerValue | IntegerVariable;
	public IntegerExpressionElements getIntegerExpressionAccess() {
		return pIntegerExpression;
	}
	
	public ParserRule getIntegerExpressionRule() {
		return getIntegerExpressionAccess().getRule();
	}
	
	//BooleanExpression:
	//	BooleanBinaryExpression | BooleanUnaryExpression | IntegerComparisonExpression | BooleanValue | BooleanVariable;
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return pBooleanExpression;
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}
	
	//IntegerBinaryExpression:
	//	operand1=[IntegerExpression] operator=IntegerCalculationOperator
	//	operand2=[IntegerExpression];
	public IntegerBinaryExpressionElements getIntegerBinaryExpressionAccess() {
		return pIntegerBinaryExpression;
	}
	
	public ParserRule getIntegerBinaryExpressionRule() {
		return getIntegerBinaryExpressionAccess().getRule();
	}
	
	//IntegerComparisonExpression:
	//	operand1=[IntegerExpression] operator=IntegerComparisonOperator
	//	operand2=[IntegerExpression];
	public IntegerComparisonExpressionElements getIntegerComparisonExpressionAccess() {
		return pIntegerComparisonExpression;
	}
	
	public ParserRule getIntegerComparisonExpressionRule() {
		return getIntegerComparisonExpressionAccess().getRule();
	}
	
	//BooleanUnaryExpression:
	//	operator=BooleanUnaryOperator
	//	operand=[BooleanVariable];
	public BooleanUnaryExpressionElements getBooleanUnaryExpressionAccess() {
		return pBooleanUnaryExpression;
	}
	
	public ParserRule getBooleanUnaryExpressionRule() {
		return getBooleanUnaryExpressionAccess().getRule();
	}
	
	//BooleanBinaryExpression:
	//	operand1=[BooleanVariable] operator=BooleanBinaryOperator
	//	operand2=[BooleanVariable];
	public BooleanBinaryExpressionElements getBooleanBinaryExpressionAccess() {
		return pBooleanBinaryExpression;
	}
	
	public ParserRule getBooleanBinaryExpressionRule() {
		return getBooleanBinaryExpressionAccess().getRule();
	}
	
	//IntegerVariable:
	//	{IntegerVariable}
	//	'int'
	//	name=EString ('=' initialValue=EInt)?;
	public IntegerVariableElements getIntegerVariableAccess() {
		return pIntegerVariable;
	}
	
	public ParserRule getIntegerVariableRule() {
		return getIntegerVariableAccess().getRule();
	}
	
	//BooleanVariable:
	//	{BooleanVariable}
	//	'bool'
	//	name=EString ('=' initialValue=EBoolean)?;
	public BooleanVariableElements getBooleanVariableAccess() {
		return pBooleanVariable;
	}
	
	public ParserRule getBooleanVariableRule() {
		return getBooleanVariableAccess().getRule();
	}
	
	//BooleanValue:
	//	value=EBoolean;
	public BooleanValueElements getBooleanValueAccess() {
		return pBooleanValue;
	}
	
	public ParserRule getBooleanValueRule() {
		return getBooleanValueAccess().getRule();
	}
	
	//IntegerValue:
	//	value=EInt;
	public IntegerValueElements getIntegerValueAccess() {
		return pIntegerValue;
	}
	
	public ParserRule getIntegerValueRule() {
		return getIntegerValueAccess().getRule();
	}
	
	//EBoolean ecore::EBoolean:
	//	'true' | 'false'
	public EBooleanElements getEBooleanAccess() {
		return pEBoolean;
	}
	
	public ParserRule getEBooleanRule() {
		return getEBooleanAccess().getRule();
	}
	
	//EInt ecore::EInt:
	//	'-'? INT
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//enum IntegerCalculationOperator:
	//	ADD='+' | SUBRACT='-';
	public IntegerCalculationOperatorElements getIntegerCalculationOperatorAccess() {
		return eIntegerCalculationOperator;
	}
	
	public EnumRule getIntegerCalculationOperatorRule() {
		return getIntegerCalculationOperatorAccess().getRule();
	}
	
	//enum IntegerComparisonOperator:
	//	SMALLER='<' | SMALLER_EQUALS='<=' | EQUALS='==' | GREATER_EQUALS='>=' | GREATER='>';
	public IntegerComparisonOperatorElements getIntegerComparisonOperatorAccess() {
		return eIntegerComparisonOperator;
	}
	
	public EnumRule getIntegerComparisonOperatorRule() {
		return getIntegerComparisonOperatorAccess().getRule();
	}
	
	//enum BooleanUnaryOperator:
	//	NOT='!';
	public BooleanUnaryOperatorElements getBooleanUnaryOperatorAccess() {
		return eBooleanUnaryOperator;
	}
	
	public EnumRule getBooleanUnaryOperatorRule() {
		return getBooleanUnaryOperatorAccess().getRule();
	}
	
	//enum BooleanBinaryOperator:
	//	AND='&' | OR='|';
	public BooleanBinaryOperatorElements getBooleanBinaryOperatorAccess() {
		return eBooleanBinaryOperator;
	}
	
	public EnumRule getBooleanBinaryOperatorRule() {
		return getBooleanBinaryOperatorAccess().getRule();
	}
	
	//ControlFlow:
	//	'flow'
	//	name=EString
	//	'from' source=[ActivityNode]
	//	'to' target=[ActivityNode] ('[' guard=[BooleanVariable] ']')?;
	public ControlFlowElements getControlFlowAccess() {
		return pControlFlow;
	}
	
	public ParserRule getControlFlowRule() {
		return getControlFlowAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
