/**
 */
package org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.util.XActivityDiagramPropertyAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class XActivityDiagramPropertyItemProviderAdapterFactory extends XActivityDiagramPropertyAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public XActivityDiagramPropertyItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityNodeRemoveTokenProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityNodeRemoveTokenPropertyItemProvider activityNodeRemoveTokenPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityNodeRemoveTokenProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityNodeRemoveTokenPropertyAdapter() {
		if (activityNodeRemoveTokenPropertyItemProvider == null) {
			activityNodeRemoveTokenPropertyItemProvider = new ActivityNodeRemoveTokenPropertyItemProvider(this);
		}

		return activityNodeRemoveTokenPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.MergeNodeExecuteProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MergeNodeExecutePropertyItemProvider mergeNodeExecutePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.MergeNodeExecuteProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMergeNodeExecutePropertyAdapter() {
		if (mergeNodeExecutePropertyItemProvider == null) {
			mergeNodeExecutePropertyItemProvider = new MergeNodeExecutePropertyItemProvider(this);
		}

		return mergeNodeExecutePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.AcceptEventActionAcceptProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AcceptEventActionAcceptPropertyItemProvider acceptEventActionAcceptPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.AcceptEventActionAcceptProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAcceptEventActionAcceptPropertyAdapter() {
		if (acceptEventActionAcceptPropertyItemProvider == null) {
			acceptEventActionAcceptPropertyItemProvider = new AcceptEventActionAcceptPropertyItemProvider(this);
		}

		return acceptEventActionAcceptPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.IntegerVariableAssignmentExecuteProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerVariableAssignmentExecutePropertyItemProvider integerVariableAssignmentExecutePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.IntegerVariableAssignmentExecuteProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerVariableAssignmentExecutePropertyAdapter() {
		if (integerVariableAssignmentExecutePropertyItemProvider == null) {
			integerVariableAssignmentExecutePropertyItemProvider = new IntegerVariableAssignmentExecutePropertyItemProvider(this);
		}

		return integerVariableAssignmentExecutePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityNodeAddTokenProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityNodeAddTokenPropertyItemProvider activityNodeAddTokenPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityNodeAddTokenProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityNodeAddTokenPropertyAdapter() {
		if (activityNodeAddTokenPropertyItemProvider == null) {
			activityNodeAddTokenPropertyItemProvider = new ActivityNodeAddTokenPropertyItemProvider(this);
		}

		return activityNodeAddTokenPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityNodeTerminateProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityNodeTerminatePropertyItemProvider activityNodeTerminatePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityNodeTerminateProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityNodeTerminatePropertyAdapter() {
		if (activityNodeTerminatePropertyItemProvider == null) {
			activityNodeTerminatePropertyItemProvider = new ActivityNodeTerminatePropertyItemProvider(this);
		}

		return activityNodeTerminatePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.AcceptEventActionExecuteProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AcceptEventActionExecutePropertyItemProvider acceptEventActionExecutePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.AcceptEventActionExecuteProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAcceptEventActionExecutePropertyAdapter() {
		if (acceptEventActionExecutePropertyItemProvider == null) {
			acceptEventActionExecutePropertyItemProvider = new AcceptEventActionExecutePropertyItemProvider(this);
		}

		return acceptEventActionExecutePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.FinalNodeExecuteProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FinalNodeExecutePropertyItemProvider finalNodeExecutePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.FinalNodeExecuteProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFinalNodeExecutePropertyAdapter() {
		if (finalNodeExecutePropertyItemProvider == null) {
			finalNodeExecutePropertyItemProvider = new FinalNodeExecutePropertyItemProvider(this);
		}

		return finalNodeExecutePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityNodeExecuteProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityNodeExecutePropertyItemProvider activityNodeExecutePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityNodeExecuteProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityNodeExecutePropertyAdapter() {
		if (activityNodeExecutePropertyItemProvider == null) {
			activityNodeExecutePropertyItemProvider = new ActivityNodeExecutePropertyItemProvider(this);
		}

		return activityNodeExecutePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.FlowFinalNodeExecuteProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowFinalNodeExecutePropertyItemProvider flowFinalNodeExecutePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.FlowFinalNodeExecuteProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowFinalNodeExecutePropertyAdapter() {
		if (flowFinalNodeExecutePropertyItemProvider == null) {
			flowFinalNodeExecutePropertyItemProvider = new FlowFinalNodeExecutePropertyItemProvider(this);
		}

		return flowFinalNodeExecutePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.DecisionNodeExecuteProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecisionNodeExecutePropertyItemProvider decisionNodeExecutePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.DecisionNodeExecuteProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecisionNodeExecutePropertyAdapter() {
		if (decisionNodeExecutePropertyItemProvider == null) {
			decisionNodeExecutePropertyItemProvider = new DecisionNodeExecutePropertyItemProvider(this);
		}

		return decisionNodeExecutePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.VariableAssignmentExecuteProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableAssignmentExecutePropertyItemProvider variableAssignmentExecutePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.VariableAssignmentExecuteProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableAssignmentExecutePropertyAdapter() {
		if (variableAssignmentExecutePropertyItemProvider == null) {
			variableAssignmentExecutePropertyItemProvider = new VariableAssignmentExecutePropertyItemProvider(this);
		}

		return variableAssignmentExecutePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.AcceptEventActionWaitForEventProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AcceptEventActionWaitForEventPropertyItemProvider acceptEventActionWaitForEventPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.AcceptEventActionWaitForEventProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAcceptEventActionWaitForEventPropertyAdapter() {
		if (acceptEventActionWaitForEventPropertyItemProvider == null) {
			acceptEventActionWaitForEventPropertyItemProvider = new AcceptEventActionWaitForEventPropertyItemProvider(this);
		}

		return acceptEventActionWaitForEventPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BooleanVariableAssignmentExecuteProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanVariableAssignmentExecutePropertyItemProvider booleanVariableAssignmentExecutePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BooleanVariableAssignmentExecuteProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanVariableAssignmentExecutePropertyAdapter() {
		if (booleanVariableAssignmentExecutePropertyItemProvider == null) {
			booleanVariableAssignmentExecutePropertyItemProvider = new BooleanVariableAssignmentExecutePropertyItemProvider(this);
		}

		return booleanVariableAssignmentExecutePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityExecuteProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityExecutePropertyItemProvider activityExecutePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityExecuteProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityExecutePropertyAdapter() {
		if (activityExecutePropertyItemProvider == null) {
			activityExecutePropertyItemProvider = new ActivityExecutePropertyItemProvider(this);
		}

		return activityExecutePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.OpaqueActionExecuteProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpaqueActionExecutePropertyItemProvider opaqueActionExecutePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.OpaqueActionExecuteProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpaqueActionExecutePropertyAdapter() {
		if (opaqueActionExecutePropertyItemProvider == null) {
			opaqueActionExecutePropertyItemProvider = new OpaqueActionExecutePropertyItemProvider(this);
		}

		return opaqueActionExecutePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityFinalNodeExecuteProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityFinalNodeExecutePropertyItemProvider activityFinalNodeExecutePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityFinalNodeExecuteProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityFinalNodeExecutePropertyAdapter() {
		if (activityFinalNodeExecutePropertyItemProvider == null) {
			activityFinalNodeExecutePropertyItemProvider = new ActivityFinalNodeExecutePropertyItemProvider(this);
		}

		return activityFinalNodeExecutePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.VariableInitProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableInitPropertyItemProvider variableInitPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.VariableInitProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableInitPropertyAdapter() {
		if (variableInitPropertyItemProvider == null) {
			variableInitPropertyItemProvider = new VariableInitPropertyItemProvider(this);
		}

		return variableInitPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.InitialNodeExecuteProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitialNodeExecutePropertyItemProvider initialNodeExecutePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.InitialNodeExecuteProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitialNodeExecutePropertyAdapter() {
		if (initialNodeExecutePropertyItemProvider == null) {
			initialNodeExecutePropertyItemProvider = new InitialNodeExecutePropertyItemProvider(this);
		}

		return initialNodeExecutePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.JoinNodeExecuteProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JoinNodeExecutePropertyItemProvider joinNodeExecutePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.JoinNodeExecuteProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJoinNodeExecutePropertyAdapter() {
		if (joinNodeExecutePropertyItemProvider == null) {
			joinNodeExecutePropertyItemProvider = new JoinNodeExecutePropertyItemProvider(this);
		}

		return joinNodeExecutePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ForkNodeExecuteProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForkNodeExecutePropertyItemProvider forkNodeExecutePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ForkNodeExecuteProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForkNodeExecutePropertyAdapter() {
		if (forkNodeExecutePropertyItemProvider == null) {
			forkNodeExecutePropertyItemProvider = new ForkNodeExecutePropertyItemProvider(this);
		}

		return forkNodeExecutePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryNamedElementProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryNamedElementPropertyItemProvider unaryNamedElementPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryNamedElementProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryNamedElementPropertyAdapter() {
		if (unaryNamedElementPropertyItemProvider == null) {
			unaryNamedElementPropertyItemProvider = new UnaryNamedElementPropertyItemProvider(this);
		}

		return unaryNamedElementPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryNamedElementProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryNamedElementPropertyItemProvider binaryNamedElementPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryNamedElementProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryNamedElementPropertyAdapter() {
		if (binaryNamedElementPropertyItemProvider == null) {
			binaryNamedElementPropertyItemProvider = new BinaryNamedElementPropertyItemProvider(this);
		}

		return binaryNamedElementPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.NamedElementNameProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedElementNamePropertyItemProvider namedElementNamePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.NamedElementNameProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedElementNamePropertyAdapter() {
		if (namedElementNamePropertyItemProvider == null) {
			namedElementNamePropertyItemProvider = new NamedElementNamePropertyItemProvider(this);
		}

		return namedElementNamePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryActivityProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryActivityPropertyItemProvider unaryActivityPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryActivityProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryActivityPropertyAdapter() {
		if (unaryActivityPropertyItemProvider == null) {
			unaryActivityPropertyItemProvider = new UnaryActivityPropertyItemProvider(this);
		}

		return unaryActivityPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryActivityProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryActivityPropertyItemProvider binaryActivityPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryActivityProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryActivityPropertyAdapter() {
		if (binaryActivityPropertyItemProvider == null) {
			binaryActivityPropertyItemProvider = new BinaryActivityPropertyItemProvider(this);
		}

		return binaryActivityPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityNameProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityNamePropertyItemProvider activityNamePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityNameProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityNamePropertyAdapter() {
		if (activityNamePropertyItemProvider == null) {
			activityNamePropertyItemProvider = new ActivityNamePropertyItemProvider(this);
		}

		return activityNamePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.EventActivityContainerProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventActivityContainerPropertyItemProvider eventActivityContainerPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.EventActivityContainerProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventActivityContainerPropertyAdapter() {
		if (eventActivityContainerPropertyItemProvider == null) {
			eventActivityContainerPropertyItemProvider = new EventActivityContainerPropertyItemProvider(this);
		}

		return eventActivityContainerPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryEventProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryEventPropertyItemProvider unaryEventPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryEventProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryEventPropertyAdapter() {
		if (unaryEventPropertyItemProvider == null) {
			unaryEventPropertyItemProvider = new UnaryEventPropertyItemProvider(this);
		}

		return unaryEventPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryEventProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryEventPropertyItemProvider binaryEventPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryEventProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryEventPropertyAdapter() {
		if (binaryEventPropertyItemProvider == null) {
			binaryEventPropertyItemProvider = new BinaryEventPropertyItemProvider(this);
		}

		return binaryEventPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.EventNameProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventNamePropertyItemProvider eventNamePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.EventNameProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventNamePropertyAdapter() {
		if (eventNamePropertyItemProvider == null) {
			eventNamePropertyItemProvider = new EventNamePropertyItemProvider(this);
		}

		return eventNamePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityEventsProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityEventsPropertyItemProvider activityEventsPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityEventsProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityEventsPropertyAdapter() {
		if (activityEventsPropertyItemProvider == null) {
			activityEventsPropertyItemProvider = new ActivityEventsPropertyItemProvider(this);
		}

		return activityEventsPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityNodesProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityNodesPropertyItemProvider activityNodesPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityNodesProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityNodesPropertyAdapter() {
		if (activityNodesPropertyItemProvider == null) {
			activityNodesPropertyItemProvider = new ActivityNodesPropertyItemProvider(this);
		}

		return activityNodesPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryActivityNodeProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryActivityNodePropertyItemProvider unaryActivityNodePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryActivityNodeProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryActivityNodePropertyAdapter() {
		if (unaryActivityNodePropertyItemProvider == null) {
			unaryActivityNodePropertyItemProvider = new UnaryActivityNodePropertyItemProvider(this);
		}

		return unaryActivityNodePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryActivityNodeProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryActivityNodePropertyItemProvider binaryActivityNodePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryActivityNodeProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryActivityNodePropertyAdapter() {
		if (binaryActivityNodePropertyItemProvider == null) {
			binaryActivityNodePropertyItemProvider = new BinaryActivityNodePropertyItemProvider(this);
		}

		return binaryActivityNodePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityNodeNameProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityNodeNamePropertyItemProvider activityNodeNamePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityNodeNameProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityNodeNamePropertyAdapter() {
		if (activityNodeNamePropertyItemProvider == null) {
			activityNodeNamePropertyItemProvider = new ActivityNodeNamePropertyItemProvider(this);
		}

		return activityNodeNamePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityNodeActivityProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityNodeActivityPropertyItemProvider activityNodeActivityPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityNodeActivityProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityNodeActivityPropertyAdapter() {
		if (activityNodeActivityPropertyItemProvider == null) {
			activityNodeActivityPropertyItemProvider = new ActivityNodeActivityPropertyItemProvider(this);
		}

		return activityNodeActivityPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityNodeRunningProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityNodeRunningPropertyItemProvider activityNodeRunningPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityNodeRunningProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityNodeRunningPropertyAdapter() {
		if (activityNodeRunningPropertyItemProvider == null) {
			activityNodeRunningPropertyItemProvider = new ActivityNodeRunningPropertyItemProvider(this);
		}

		return activityNodeRunningPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenActivityNodeContainerProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlTokenActivityNodeContainerPropertyItemProvider controlTokenActivityNodeContainerPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenActivityNodeContainerProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlTokenActivityNodeContainerPropertyAdapter() {
		if (controlTokenActivityNodeContainerPropertyItemProvider == null) {
			controlTokenActivityNodeContainerPropertyItemProvider = new ControlTokenActivityNodeContainerPropertyItemProvider(this);
		}

		return controlTokenActivityNodeContainerPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryControlTokenProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryControlTokenPropertyItemProvider unaryControlTokenPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryControlTokenProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryControlTokenPropertyAdapter() {
		if (unaryControlTokenPropertyItemProvider == null) {
			unaryControlTokenPropertyItemProvider = new UnaryControlTokenPropertyItemProvider(this);
		}

		return unaryControlTokenPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryControlTokenProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryControlTokenPropertyItemProvider binaryControlTokenPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryControlTokenProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryControlTokenPropertyAdapter() {
		if (binaryControlTokenPropertyItemProvider == null) {
			binaryControlTokenPropertyItemProvider = new BinaryControlTokenPropertyItemProvider(this);
		}

		return binaryControlTokenPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityNodeHeldTokensProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityNodeHeldTokensPropertyItemProvider activityNodeHeldTokensPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityNodeHeldTokensProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityNodeHeldTokensPropertyAdapter() {
		if (activityNodeHeldTokensPropertyItemProvider == null) {
			activityNodeHeldTokensPropertyItemProvider = new ActivityNodeHeldTokensPropertyItemProvider(this);
		}

		return activityNodeHeldTokensPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityEdgeActivityContainerProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityEdgeActivityContainerPropertyItemProvider activityEdgeActivityContainerPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityEdgeActivityContainerProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityEdgeActivityContainerPropertyAdapter() {
		if (activityEdgeActivityContainerPropertyItemProvider == null) {
			activityEdgeActivityContainerPropertyItemProvider = new ActivityEdgeActivityContainerPropertyItemProvider(this);
		}

		return activityEdgeActivityContainerPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryActivityEdgeProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryActivityEdgePropertyItemProvider unaryActivityEdgePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryActivityEdgeProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryActivityEdgePropertyAdapter() {
		if (unaryActivityEdgePropertyItemProvider == null) {
			unaryActivityEdgePropertyItemProvider = new UnaryActivityEdgePropertyItemProvider(this);
		}

		return unaryActivityEdgePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryActivityEdgeProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryActivityEdgePropertyItemProvider binaryActivityEdgePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryActivityEdgeProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryActivityEdgePropertyAdapter() {
		if (binaryActivityEdgePropertyItemProvider == null) {
			binaryActivityEdgePropertyItemProvider = new BinaryActivityEdgePropertyItemProvider(this);
		}

		return binaryActivityEdgePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityEdgeNameProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityEdgeNamePropertyItemProvider activityEdgeNamePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityEdgeNameProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityEdgeNamePropertyAdapter() {
		if (activityEdgeNamePropertyItemProvider == null) {
			activityEdgeNamePropertyItemProvider = new ActivityEdgeNamePropertyItemProvider(this);
		}

		return activityEdgeNamePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityEdgeSourceProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityEdgeSourcePropertyItemProvider activityEdgeSourcePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityEdgeSourceProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityEdgeSourcePropertyAdapter() {
		if (activityEdgeSourcePropertyItemProvider == null) {
			activityEdgeSourcePropertyItemProvider = new ActivityEdgeSourcePropertyItemProvider(this);
		}

		return activityEdgeSourcePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityEdgeTargetProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityEdgeTargetPropertyItemProvider activityEdgeTargetPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityEdgeTargetProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityEdgeTargetPropertyAdapter() {
		if (activityEdgeTargetPropertyItemProvider == null) {
			activityEdgeTargetPropertyItemProvider = new ActivityEdgeTargetPropertyItemProvider(this);
		}

		return activityEdgeTargetPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenActivityEdgeContainerProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlTokenActivityEdgeContainerPropertyItemProvider controlTokenActivityEdgeContainerPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenActivityEdgeContainerProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlTokenActivityEdgeContainerPropertyAdapter() {
		if (controlTokenActivityEdgeContainerPropertyItemProvider == null) {
			controlTokenActivityEdgeContainerPropertyItemProvider = new ControlTokenActivityEdgeContainerPropertyItemProvider(this);
		}

		return controlTokenActivityEdgeContainerPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityEdgeOfferedTokensProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityEdgeOfferedTokensPropertyItemProvider activityEdgeOfferedTokensPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityEdgeOfferedTokensProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityEdgeOfferedTokensPropertyAdapter() {
		if (activityEdgeOfferedTokensPropertyItemProvider == null) {
			activityEdgeOfferedTokensPropertyItemProvider = new ActivityEdgeOfferedTokensPropertyItemProvider(this);
		}

		return activityEdgeOfferedTokensPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityEdgesProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityEdgesPropertyItemProvider activityEdgesPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityEdgesProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityEdgesPropertyAdapter() {
		if (activityEdgesPropertyItemProvider == null) {
			activityEdgesPropertyItemProvider = new ActivityEdgesPropertyItemProvider(this);
		}

		return activityEdgesPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.VariableActivityContainerProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableActivityContainerPropertyItemProvider variableActivityContainerPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.VariableActivityContainerProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableActivityContainerPropertyAdapter() {
		if (variableActivityContainerPropertyItemProvider == null) {
			variableActivityContainerPropertyItemProvider = new VariableActivityContainerPropertyItemProvider(this);
		}

		return variableActivityContainerPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryExpressionProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryExpressionPropertyItemProvider unaryExpressionPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryExpressionProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryExpressionPropertyAdapter() {
		if (unaryExpressionPropertyItemProvider == null) {
			unaryExpressionPropertyItemProvider = new UnaryExpressionPropertyItemProvider(this);
		}

		return unaryExpressionPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryExpressionProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryExpressionPropertyItemProvider binaryExpressionPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryExpressionProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryExpressionPropertyAdapter() {
		if (binaryExpressionPropertyItemProvider == null) {
			binaryExpressionPropertyItemProvider = new BinaryExpressionPropertyItemProvider(this);
		}

		return binaryExpressionPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryVariableProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryVariablePropertyItemProvider unaryVariablePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryVariableProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryVariablePropertyAdapter() {
		if (unaryVariablePropertyItemProvider == null) {
			unaryVariablePropertyItemProvider = new UnaryVariablePropertyItemProvider(this);
		}

		return unaryVariablePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryVariableProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryVariablePropertyItemProvider binaryVariablePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryVariableProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryVariablePropertyAdapter() {
		if (binaryVariablePropertyItemProvider == null) {
			binaryVariablePropertyItemProvider = new BinaryVariablePropertyItemProvider(this);
		}

		return binaryVariablePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.VariableNameProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableNamePropertyItemProvider variableNamePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.VariableNameProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableNamePropertyAdapter() {
		if (variableNamePropertyItemProvider == null) {
			variableNamePropertyItemProvider = new VariableNamePropertyItemProvider(this);
		}

		return variableNamePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityLocalsProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityLocalsPropertyItemProvider activityLocalsPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityLocalsProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityLocalsPropertyAdapter() {
		if (activityLocalsPropertyItemProvider == null) {
			activityLocalsPropertyItemProvider = new ActivityLocalsPropertyItemProvider(this);
		}

		return activityLocalsPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryControlFlowProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryControlFlowPropertyItemProvider unaryControlFlowPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryControlFlowProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryControlFlowPropertyAdapter() {
		if (unaryControlFlowPropertyItemProvider == null) {
			unaryControlFlowPropertyItemProvider = new UnaryControlFlowPropertyItemProvider(this);
		}

		return unaryControlFlowPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryControlFlowProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryControlFlowPropertyItemProvider binaryControlFlowPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryControlFlowProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryControlFlowPropertyAdapter() {
		if (binaryControlFlowPropertyItemProvider == null) {
			binaryControlFlowPropertyItemProvider = new BinaryControlFlowPropertyItemProvider(this);
		}

		return binaryControlFlowPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlFlowNameProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlFlowNamePropertyItemProvider controlFlowNamePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlFlowNameProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlFlowNamePropertyAdapter() {
		if (controlFlowNamePropertyItemProvider == null) {
			controlFlowNamePropertyItemProvider = new ControlFlowNamePropertyItemProvider(this);
		}

		return controlFlowNamePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlFlowSourceProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlFlowSourcePropertyItemProvider controlFlowSourcePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlFlowSourceProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlFlowSourcePropertyAdapter() {
		if (controlFlowSourcePropertyItemProvider == null) {
			controlFlowSourcePropertyItemProvider = new ControlFlowSourcePropertyItemProvider(this);
		}

		return controlFlowSourcePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlFlowTargetProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlFlowTargetPropertyItemProvider controlFlowTargetPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlFlowTargetProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlFlowTargetPropertyAdapter() {
		if (controlFlowTargetPropertyItemProvider == null) {
			controlFlowTargetPropertyItemProvider = new ControlFlowTargetPropertyItemProvider(this);
		}

		return controlFlowTargetPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenControlFlowContainerProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlTokenControlFlowContainerPropertyItemProvider controlTokenControlFlowContainerPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenControlFlowContainerProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlTokenControlFlowContainerPropertyAdapter() {
		if (controlTokenControlFlowContainerPropertyItemProvider == null) {
			controlTokenControlFlowContainerPropertyItemProvider = new ControlTokenControlFlowContainerPropertyItemProvider(this);
		}

		return controlTokenControlFlowContainerPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlFlowOfferedTokensProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlFlowOfferedTokensPropertyItemProvider controlFlowOfferedTokensPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlFlowOfferedTokensProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlFlowOfferedTokensPropertyAdapter() {
		if (controlFlowOfferedTokensPropertyItemProvider == null) {
			controlFlowOfferedTokensPropertyItemProvider = new ControlFlowOfferedTokensPropertyItemProvider(this);
		}

		return controlFlowOfferedTokensPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlFlowGuardProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlFlowGuardPropertyItemProvider controlFlowGuardPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlFlowGuardProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlFlowGuardPropertyAdapter() {
		if (controlFlowGuardPropertyItemProvider == null) {
			controlFlowGuardPropertyItemProvider = new ControlFlowGuardPropertyItemProvider(this);
		}

		return controlFlowGuardPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryBooleanExpressionProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryBooleanExpressionPropertyItemProvider unaryBooleanExpressionPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryBooleanExpressionProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryBooleanExpressionPropertyAdapter() {
		if (unaryBooleanExpressionPropertyItemProvider == null) {
			unaryBooleanExpressionPropertyItemProvider = new UnaryBooleanExpressionPropertyItemProvider(this);
		}

		return unaryBooleanExpressionPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryBooleanExpressionProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryBooleanExpressionPropertyItemProvider binaryBooleanExpressionPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryBooleanExpressionProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryBooleanExpressionPropertyAdapter() {
		if (binaryBooleanExpressionPropertyItemProvider == null) {
			binaryBooleanExpressionPropertyItemProvider = new BinaryBooleanExpressionPropertyItemProvider(this);
		}

		return binaryBooleanExpressionPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryBooleanVariableProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryBooleanVariablePropertyItemProvider unaryBooleanVariablePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryBooleanVariableProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryBooleanVariablePropertyAdapter() {
		if (unaryBooleanVariablePropertyItemProvider == null) {
			unaryBooleanVariablePropertyItemProvider = new UnaryBooleanVariablePropertyItemProvider(this);
		}

		return unaryBooleanVariablePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryBooleanVariableProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryBooleanVariablePropertyItemProvider binaryBooleanVariablePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryBooleanVariableProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryBooleanVariablePropertyAdapter() {
		if (binaryBooleanVariablePropertyItemProvider == null) {
			binaryBooleanVariablePropertyItemProvider = new BinaryBooleanVariablePropertyItemProvider(this);
		}

		return binaryBooleanVariablePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BooleanVariableNameProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanVariableNamePropertyItemProvider booleanVariableNamePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BooleanVariableNameProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanVariableNamePropertyAdapter() {
		if (booleanVariableNamePropertyItemProvider == null) {
			booleanVariableNamePropertyItemProvider = new BooleanVariableNamePropertyItemProvider(this);
		}

		return booleanVariableNamePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BooleanVariableInitialValueProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanVariableInitialValuePropertyItemProvider booleanVariableInitialValuePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BooleanVariableInitialValueProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanVariableInitialValuePropertyAdapter() {
		if (booleanVariableInitialValuePropertyItemProvider == null) {
			booleanVariableInitialValuePropertyItemProvider = new BooleanVariableInitialValuePropertyItemProvider(this);
		}

		return booleanVariableInitialValuePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BooleanVariableCurrentValueProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanVariableCurrentValuePropertyItemProvider booleanVariableCurrentValuePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BooleanVariableCurrentValueProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanVariableCurrentValuePropertyAdapter() {
		if (booleanVariableCurrentValuePropertyItemProvider == null) {
			booleanVariableCurrentValuePropertyItemProvider = new BooleanVariableCurrentValuePropertyItemProvider(this);
		}

		return booleanVariableCurrentValuePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryActionProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryActionPropertyItemProvider unaryActionPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryActionProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryActionPropertyAdapter() {
		if (unaryActionPropertyItemProvider == null) {
			unaryActionPropertyItemProvider = new UnaryActionPropertyItemProvider(this);
		}

		return unaryActionPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryActionProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryActionPropertyItemProvider binaryActionPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryActionProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryActionPropertyAdapter() {
		if (binaryActionPropertyItemProvider == null) {
			binaryActionPropertyItemProvider = new BinaryActionPropertyItemProvider(this);
		}

		return binaryActionPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActionNameProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionNamePropertyItemProvider actionNamePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActionNameProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionNamePropertyAdapter() {
		if (actionNamePropertyItemProvider == null) {
			actionNamePropertyItemProvider = new ActionNamePropertyItemProvider(this);
		}

		return actionNamePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActionActivityProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionActivityPropertyItemProvider actionActivityPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActionActivityProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionActivityPropertyAdapter() {
		if (actionActivityPropertyItemProvider == null) {
			actionActivityPropertyItemProvider = new ActionActivityPropertyItemProvider(this);
		}

		return actionActivityPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActionRunningProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionRunningPropertyItemProvider actionRunningPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActionRunningProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionRunningPropertyAdapter() {
		if (actionRunningPropertyItemProvider == null) {
			actionRunningPropertyItemProvider = new ActionRunningPropertyItemProvider(this);
		}

		return actionRunningPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenActionContainerProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlTokenActionContainerPropertyItemProvider controlTokenActionContainerPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenActionContainerProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlTokenActionContainerPropertyAdapter() {
		if (controlTokenActionContainerPropertyItemProvider == null) {
			controlTokenActionContainerPropertyItemProvider = new ControlTokenActionContainerPropertyItemProvider(this);
		}

		return controlTokenActionContainerPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActionHeldTokensProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionHeldTokensPropertyItemProvider actionHeldTokensPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActionHeldTokensProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionHeldTokensPropertyAdapter() {
		if (actionHeldTokensPropertyItemProvider == null) {
			actionHeldTokensPropertyItemProvider = new ActionHeldTokensPropertyItemProvider(this);
		}

		return actionHeldTokensPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActionIncomingProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionIncomingPropertyItemProvider actionIncomingPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActionIncomingProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionIncomingPropertyAdapter() {
		if (actionIncomingPropertyItemProvider == null) {
			actionIncomingPropertyItemProvider = new ActionIncomingPropertyItemProvider(this);
		}

		return actionIncomingPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActionOutgoingProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionOutgoingPropertyItemProvider actionOutgoingPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActionOutgoingProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionOutgoingPropertyAdapter() {
		if (actionOutgoingPropertyItemProvider == null) {
			actionOutgoingPropertyItemProvider = new ActionOutgoingPropertyItemProvider(this);
		}

		return actionOutgoingPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryOpaqueActionProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryOpaqueActionPropertyItemProvider unaryOpaqueActionPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryOpaqueActionProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryOpaqueActionPropertyAdapter() {
		if (unaryOpaqueActionPropertyItemProvider == null) {
			unaryOpaqueActionPropertyItemProvider = new UnaryOpaqueActionPropertyItemProvider(this);
		}

		return unaryOpaqueActionPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryOpaqueActionProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryOpaqueActionPropertyItemProvider binaryOpaqueActionPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryOpaqueActionProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryOpaqueActionPropertyAdapter() {
		if (binaryOpaqueActionPropertyItemProvider == null) {
			binaryOpaqueActionPropertyItemProvider = new BinaryOpaqueActionPropertyItemProvider(this);
		}

		return binaryOpaqueActionPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.OpaqueActionNameProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpaqueActionNamePropertyItemProvider opaqueActionNamePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.OpaqueActionNameProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpaqueActionNamePropertyAdapter() {
		if (opaqueActionNamePropertyItemProvider == null) {
			opaqueActionNamePropertyItemProvider = new OpaqueActionNamePropertyItemProvider(this);
		}

		return opaqueActionNamePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.OpaqueActionActivityProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpaqueActionActivityPropertyItemProvider opaqueActionActivityPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.OpaqueActionActivityProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpaqueActionActivityPropertyAdapter() {
		if (opaqueActionActivityPropertyItemProvider == null) {
			opaqueActionActivityPropertyItemProvider = new OpaqueActionActivityPropertyItemProvider(this);
		}

		return opaqueActionActivityPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.OpaqueActionRunningProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpaqueActionRunningPropertyItemProvider opaqueActionRunningPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.OpaqueActionRunningProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpaqueActionRunningPropertyAdapter() {
		if (opaqueActionRunningPropertyItemProvider == null) {
			opaqueActionRunningPropertyItemProvider = new OpaqueActionRunningPropertyItemProvider(this);
		}

		return opaqueActionRunningPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenOpaqueActionContainerProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlTokenOpaqueActionContainerPropertyItemProvider controlTokenOpaqueActionContainerPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenOpaqueActionContainerProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlTokenOpaqueActionContainerPropertyAdapter() {
		if (controlTokenOpaqueActionContainerPropertyItemProvider == null) {
			controlTokenOpaqueActionContainerPropertyItemProvider = new ControlTokenOpaqueActionContainerPropertyItemProvider(this);
		}

		return controlTokenOpaqueActionContainerPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.OpaqueActionHeldTokensProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpaqueActionHeldTokensPropertyItemProvider opaqueActionHeldTokensPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.OpaqueActionHeldTokensProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpaqueActionHeldTokensPropertyAdapter() {
		if (opaqueActionHeldTokensPropertyItemProvider == null) {
			opaqueActionHeldTokensPropertyItemProvider = new OpaqueActionHeldTokensPropertyItemProvider(this);
		}

		return opaqueActionHeldTokensPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.OpaqueActionIncomingProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpaqueActionIncomingPropertyItemProvider opaqueActionIncomingPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.OpaqueActionIncomingProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpaqueActionIncomingPropertyAdapter() {
		if (opaqueActionIncomingPropertyItemProvider == null) {
			opaqueActionIncomingPropertyItemProvider = new OpaqueActionIncomingPropertyItemProvider(this);
		}

		return opaqueActionIncomingPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.OpaqueActionOutgoingProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpaqueActionOutgoingPropertyItemProvider opaqueActionOutgoingPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.OpaqueActionOutgoingProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpaqueActionOutgoingPropertyAdapter() {
		if (opaqueActionOutgoingPropertyItemProvider == null) {
			opaqueActionOutgoingPropertyItemProvider = new OpaqueActionOutgoingPropertyItemProvider(this);
		}

		return opaqueActionOutgoingPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.VariableAssignmentOpaqueActionContainerProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableAssignmentOpaqueActionContainerPropertyItemProvider variableAssignmentOpaqueActionContainerPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.VariableAssignmentOpaqueActionContainerProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableAssignmentOpaqueActionContainerPropertyAdapter() {
		if (variableAssignmentOpaqueActionContainerPropertyItemProvider == null) {
			variableAssignmentOpaqueActionContainerPropertyItemProvider = new VariableAssignmentOpaqueActionContainerPropertyItemProvider(this);
		}

		return variableAssignmentOpaqueActionContainerPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryVariableAssignmentProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryVariableAssignmentPropertyItemProvider unaryVariableAssignmentPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryVariableAssignmentProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryVariableAssignmentPropertyAdapter() {
		if (unaryVariableAssignmentPropertyItemProvider == null) {
			unaryVariableAssignmentPropertyItemProvider = new UnaryVariableAssignmentPropertyItemProvider(this);
		}

		return unaryVariableAssignmentPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryVariableAssignmentProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryVariableAssignmentPropertyItemProvider binaryVariableAssignmentPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryVariableAssignmentProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryVariableAssignmentPropertyAdapter() {
		if (binaryVariableAssignmentPropertyItemProvider == null) {
			binaryVariableAssignmentPropertyItemProvider = new BinaryVariableAssignmentPropertyItemProvider(this);
		}

		return binaryVariableAssignmentPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.OpaqueActionAssignmentsProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpaqueActionAssignmentsPropertyItemProvider opaqueActionAssignmentsPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.OpaqueActionAssignmentsProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpaqueActionAssignmentsPropertyAdapter() {
		if (opaqueActionAssignmentsPropertyItemProvider == null) {
			opaqueActionAssignmentsPropertyItemProvider = new OpaqueActionAssignmentsPropertyItemProvider(this);
		}

		return opaqueActionAssignmentsPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryAcceptEventActionProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryAcceptEventActionPropertyItemProvider unaryAcceptEventActionPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryAcceptEventActionProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryAcceptEventActionPropertyAdapter() {
		if (unaryAcceptEventActionPropertyItemProvider == null) {
			unaryAcceptEventActionPropertyItemProvider = new UnaryAcceptEventActionPropertyItemProvider(this);
		}

		return unaryAcceptEventActionPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryAcceptEventActionProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryAcceptEventActionPropertyItemProvider binaryAcceptEventActionPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryAcceptEventActionProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryAcceptEventActionPropertyAdapter() {
		if (binaryAcceptEventActionPropertyItemProvider == null) {
			binaryAcceptEventActionPropertyItemProvider = new BinaryAcceptEventActionPropertyItemProvider(this);
		}

		return binaryAcceptEventActionPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.AcceptEventActionNameProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AcceptEventActionNamePropertyItemProvider acceptEventActionNamePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.AcceptEventActionNameProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAcceptEventActionNamePropertyAdapter() {
		if (acceptEventActionNamePropertyItemProvider == null) {
			acceptEventActionNamePropertyItemProvider = new AcceptEventActionNamePropertyItemProvider(this);
		}

		return acceptEventActionNamePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.AcceptEventActionActivityProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AcceptEventActionActivityPropertyItemProvider acceptEventActionActivityPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.AcceptEventActionActivityProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAcceptEventActionActivityPropertyAdapter() {
		if (acceptEventActionActivityPropertyItemProvider == null) {
			acceptEventActionActivityPropertyItemProvider = new AcceptEventActionActivityPropertyItemProvider(this);
		}

		return acceptEventActionActivityPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.AcceptEventActionRunningProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AcceptEventActionRunningPropertyItemProvider acceptEventActionRunningPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.AcceptEventActionRunningProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAcceptEventActionRunningPropertyAdapter() {
		if (acceptEventActionRunningPropertyItemProvider == null) {
			acceptEventActionRunningPropertyItemProvider = new AcceptEventActionRunningPropertyItemProvider(this);
		}

		return acceptEventActionRunningPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenAcceptEventActionContainerProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlTokenAcceptEventActionContainerPropertyItemProvider controlTokenAcceptEventActionContainerPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenAcceptEventActionContainerProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlTokenAcceptEventActionContainerPropertyAdapter() {
		if (controlTokenAcceptEventActionContainerPropertyItemProvider == null) {
			controlTokenAcceptEventActionContainerPropertyItemProvider = new ControlTokenAcceptEventActionContainerPropertyItemProvider(this);
		}

		return controlTokenAcceptEventActionContainerPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.AcceptEventActionHeldTokensProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AcceptEventActionHeldTokensPropertyItemProvider acceptEventActionHeldTokensPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.AcceptEventActionHeldTokensProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAcceptEventActionHeldTokensPropertyAdapter() {
		if (acceptEventActionHeldTokensPropertyItemProvider == null) {
			acceptEventActionHeldTokensPropertyItemProvider = new AcceptEventActionHeldTokensPropertyItemProvider(this);
		}

		return acceptEventActionHeldTokensPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.AcceptEventActionEventTypeProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AcceptEventActionEventTypePropertyItemProvider acceptEventActionEventTypePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.AcceptEventActionEventTypeProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAcceptEventActionEventTypePropertyAdapter() {
		if (acceptEventActionEventTypePropertyItemProvider == null) {
			acceptEventActionEventTypePropertyItemProvider = new AcceptEventActionEventTypePropertyItemProvider(this);
		}

		return acceptEventActionEventTypePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.AcceptEventActionIncomingProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AcceptEventActionIncomingPropertyItemProvider acceptEventActionIncomingPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.AcceptEventActionIncomingProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAcceptEventActionIncomingPropertyAdapter() {
		if (acceptEventActionIncomingPropertyItemProvider == null) {
			acceptEventActionIncomingPropertyItemProvider = new AcceptEventActionIncomingPropertyItemProvider(this);
		}

		return acceptEventActionIncomingPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.AcceptEventActionOutgoingProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AcceptEventActionOutgoingPropertyItemProvider acceptEventActionOutgoingPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.AcceptEventActionOutgoingProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAcceptEventActionOutgoingPropertyAdapter() {
		if (acceptEventActionOutgoingPropertyItemProvider == null) {
			acceptEventActionOutgoingPropertyItemProvider = new AcceptEventActionOutgoingPropertyItemProvider(this);
		}

		return acceptEventActionOutgoingPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryControlNodeProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryControlNodePropertyItemProvider unaryControlNodePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryControlNodeProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryControlNodePropertyAdapter() {
		if (unaryControlNodePropertyItemProvider == null) {
			unaryControlNodePropertyItemProvider = new UnaryControlNodePropertyItemProvider(this);
		}

		return unaryControlNodePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryControlNodeProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryControlNodePropertyItemProvider binaryControlNodePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryControlNodeProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryControlNodePropertyAdapter() {
		if (binaryControlNodePropertyItemProvider == null) {
			binaryControlNodePropertyItemProvider = new BinaryControlNodePropertyItemProvider(this);
		}

		return binaryControlNodePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlNodeNameProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlNodeNamePropertyItemProvider controlNodeNamePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlNodeNameProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlNodeNamePropertyAdapter() {
		if (controlNodeNamePropertyItemProvider == null) {
			controlNodeNamePropertyItemProvider = new ControlNodeNamePropertyItemProvider(this);
		}

		return controlNodeNamePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlNodeActivityProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlNodeActivityPropertyItemProvider controlNodeActivityPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlNodeActivityProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlNodeActivityPropertyAdapter() {
		if (controlNodeActivityPropertyItemProvider == null) {
			controlNodeActivityPropertyItemProvider = new ControlNodeActivityPropertyItemProvider(this);
		}

		return controlNodeActivityPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlNodeRunningProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlNodeRunningPropertyItemProvider controlNodeRunningPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlNodeRunningProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlNodeRunningPropertyAdapter() {
		if (controlNodeRunningPropertyItemProvider == null) {
			controlNodeRunningPropertyItemProvider = new ControlNodeRunningPropertyItemProvider(this);
		}

		return controlNodeRunningPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenControlNodeContainerProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlTokenControlNodeContainerPropertyItemProvider controlTokenControlNodeContainerPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenControlNodeContainerProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlTokenControlNodeContainerPropertyAdapter() {
		if (controlTokenControlNodeContainerPropertyItemProvider == null) {
			controlTokenControlNodeContainerPropertyItemProvider = new ControlTokenControlNodeContainerPropertyItemProvider(this);
		}

		return controlTokenControlNodeContainerPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlNodeHeldTokensProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlNodeHeldTokensPropertyItemProvider controlNodeHeldTokensPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlNodeHeldTokensProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlNodeHeldTokensPropertyAdapter() {
		if (controlNodeHeldTokensPropertyItemProvider == null) {
			controlNodeHeldTokensPropertyItemProvider = new ControlNodeHeldTokensPropertyItemProvider(this);
		}

		return controlNodeHeldTokensPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryInitialNodeProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryInitialNodePropertyItemProvider unaryInitialNodePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryInitialNodeProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryInitialNodePropertyAdapter() {
		if (unaryInitialNodePropertyItemProvider == null) {
			unaryInitialNodePropertyItemProvider = new UnaryInitialNodePropertyItemProvider(this);
		}

		return unaryInitialNodePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryInitialNodeProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryInitialNodePropertyItemProvider binaryInitialNodePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryInitialNodeProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryInitialNodePropertyAdapter() {
		if (binaryInitialNodePropertyItemProvider == null) {
			binaryInitialNodePropertyItemProvider = new BinaryInitialNodePropertyItemProvider(this);
		}

		return binaryInitialNodePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.InitialNodeNameProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitialNodeNamePropertyItemProvider initialNodeNamePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.InitialNodeNameProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitialNodeNamePropertyAdapter() {
		if (initialNodeNamePropertyItemProvider == null) {
			initialNodeNamePropertyItemProvider = new InitialNodeNamePropertyItemProvider(this);
		}

		return initialNodeNamePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.InitialNodeActivityProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitialNodeActivityPropertyItemProvider initialNodeActivityPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.InitialNodeActivityProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitialNodeActivityPropertyAdapter() {
		if (initialNodeActivityPropertyItemProvider == null) {
			initialNodeActivityPropertyItemProvider = new InitialNodeActivityPropertyItemProvider(this);
		}

		return initialNodeActivityPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.InitialNodeRunningProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitialNodeRunningPropertyItemProvider initialNodeRunningPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.InitialNodeRunningProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitialNodeRunningPropertyAdapter() {
		if (initialNodeRunningPropertyItemProvider == null) {
			initialNodeRunningPropertyItemProvider = new InitialNodeRunningPropertyItemProvider(this);
		}

		return initialNodeRunningPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenInitialNodeContainerProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlTokenInitialNodeContainerPropertyItemProvider controlTokenInitialNodeContainerPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenInitialNodeContainerProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlTokenInitialNodeContainerPropertyAdapter() {
		if (controlTokenInitialNodeContainerPropertyItemProvider == null) {
			controlTokenInitialNodeContainerPropertyItemProvider = new ControlTokenInitialNodeContainerPropertyItemProvider(this);
		}

		return controlTokenInitialNodeContainerPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.InitialNodeHeldTokensProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitialNodeHeldTokensPropertyItemProvider initialNodeHeldTokensPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.InitialNodeHeldTokensProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitialNodeHeldTokensPropertyAdapter() {
		if (initialNodeHeldTokensPropertyItemProvider == null) {
			initialNodeHeldTokensPropertyItemProvider = new InitialNodeHeldTokensPropertyItemProvider(this);
		}

		return initialNodeHeldTokensPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.InitialNodeOutgoingProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitialNodeOutgoingPropertyItemProvider initialNodeOutgoingPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.InitialNodeOutgoingProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitialNodeOutgoingPropertyAdapter() {
		if (initialNodeOutgoingPropertyItemProvider == null) {
			initialNodeOutgoingPropertyItemProvider = new InitialNodeOutgoingPropertyItemProvider(this);
		}

		return initialNodeOutgoingPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryDecisionNodeProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryDecisionNodePropertyItemProvider unaryDecisionNodePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryDecisionNodeProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryDecisionNodePropertyAdapter() {
		if (unaryDecisionNodePropertyItemProvider == null) {
			unaryDecisionNodePropertyItemProvider = new UnaryDecisionNodePropertyItemProvider(this);
		}

		return unaryDecisionNodePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryDecisionNodeProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryDecisionNodePropertyItemProvider binaryDecisionNodePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryDecisionNodeProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryDecisionNodePropertyAdapter() {
		if (binaryDecisionNodePropertyItemProvider == null) {
			binaryDecisionNodePropertyItemProvider = new BinaryDecisionNodePropertyItemProvider(this);
		}

		return binaryDecisionNodePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.DecisionNodeNameProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecisionNodeNamePropertyItemProvider decisionNodeNamePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.DecisionNodeNameProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecisionNodeNamePropertyAdapter() {
		if (decisionNodeNamePropertyItemProvider == null) {
			decisionNodeNamePropertyItemProvider = new DecisionNodeNamePropertyItemProvider(this);
		}

		return decisionNodeNamePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.DecisionNodeActivityProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecisionNodeActivityPropertyItemProvider decisionNodeActivityPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.DecisionNodeActivityProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecisionNodeActivityPropertyAdapter() {
		if (decisionNodeActivityPropertyItemProvider == null) {
			decisionNodeActivityPropertyItemProvider = new DecisionNodeActivityPropertyItemProvider(this);
		}

		return decisionNodeActivityPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.DecisionNodeRunningProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecisionNodeRunningPropertyItemProvider decisionNodeRunningPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.DecisionNodeRunningProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecisionNodeRunningPropertyAdapter() {
		if (decisionNodeRunningPropertyItemProvider == null) {
			decisionNodeRunningPropertyItemProvider = new DecisionNodeRunningPropertyItemProvider(this);
		}

		return decisionNodeRunningPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenDecisionNodeContainerProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlTokenDecisionNodeContainerPropertyItemProvider controlTokenDecisionNodeContainerPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenDecisionNodeContainerProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlTokenDecisionNodeContainerPropertyAdapter() {
		if (controlTokenDecisionNodeContainerPropertyItemProvider == null) {
			controlTokenDecisionNodeContainerPropertyItemProvider = new ControlTokenDecisionNodeContainerPropertyItemProvider(this);
		}

		return controlTokenDecisionNodeContainerPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.DecisionNodeHeldTokensProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecisionNodeHeldTokensPropertyItemProvider decisionNodeHeldTokensPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.DecisionNodeHeldTokensProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecisionNodeHeldTokensPropertyAdapter() {
		if (decisionNodeHeldTokensPropertyItemProvider == null) {
			decisionNodeHeldTokensPropertyItemProvider = new DecisionNodeHeldTokensPropertyItemProvider(this);
		}

		return decisionNodeHeldTokensPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.DecisionNodeIncomingProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecisionNodeIncomingPropertyItemProvider decisionNodeIncomingPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.DecisionNodeIncomingProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecisionNodeIncomingPropertyAdapter() {
		if (decisionNodeIncomingPropertyItemProvider == null) {
			decisionNodeIncomingPropertyItemProvider = new DecisionNodeIncomingPropertyItemProvider(this);
		}

		return decisionNodeIncomingPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.DecisionNodeOutgoingProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecisionNodeOutgoingPropertyItemProvider decisionNodeOutgoingPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.DecisionNodeOutgoingProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecisionNodeOutgoingPropertyAdapter() {
		if (decisionNodeOutgoingPropertyItemProvider == null) {
			decisionNodeOutgoingPropertyItemProvider = new DecisionNodeOutgoingPropertyItemProvider(this);
		}

		return decisionNodeOutgoingPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryMergeNodeProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryMergeNodePropertyItemProvider unaryMergeNodePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryMergeNodeProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryMergeNodePropertyAdapter() {
		if (unaryMergeNodePropertyItemProvider == null) {
			unaryMergeNodePropertyItemProvider = new UnaryMergeNodePropertyItemProvider(this);
		}

		return unaryMergeNodePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryMergeNodeProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryMergeNodePropertyItemProvider binaryMergeNodePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryMergeNodeProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryMergeNodePropertyAdapter() {
		if (binaryMergeNodePropertyItemProvider == null) {
			binaryMergeNodePropertyItemProvider = new BinaryMergeNodePropertyItemProvider(this);
		}

		return binaryMergeNodePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.MergeNodeNameProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MergeNodeNamePropertyItemProvider mergeNodeNamePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.MergeNodeNameProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMergeNodeNamePropertyAdapter() {
		if (mergeNodeNamePropertyItemProvider == null) {
			mergeNodeNamePropertyItemProvider = new MergeNodeNamePropertyItemProvider(this);
		}

		return mergeNodeNamePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.MergeNodeActivityProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MergeNodeActivityPropertyItemProvider mergeNodeActivityPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.MergeNodeActivityProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMergeNodeActivityPropertyAdapter() {
		if (mergeNodeActivityPropertyItemProvider == null) {
			mergeNodeActivityPropertyItemProvider = new MergeNodeActivityPropertyItemProvider(this);
		}

		return mergeNodeActivityPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.MergeNodeRunningProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MergeNodeRunningPropertyItemProvider mergeNodeRunningPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.MergeNodeRunningProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMergeNodeRunningPropertyAdapter() {
		if (mergeNodeRunningPropertyItemProvider == null) {
			mergeNodeRunningPropertyItemProvider = new MergeNodeRunningPropertyItemProvider(this);
		}

		return mergeNodeRunningPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenMergeNodeContainerProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlTokenMergeNodeContainerPropertyItemProvider controlTokenMergeNodeContainerPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenMergeNodeContainerProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlTokenMergeNodeContainerPropertyAdapter() {
		if (controlTokenMergeNodeContainerPropertyItemProvider == null) {
			controlTokenMergeNodeContainerPropertyItemProvider = new ControlTokenMergeNodeContainerPropertyItemProvider(this);
		}

		return controlTokenMergeNodeContainerPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.MergeNodeHeldTokensProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MergeNodeHeldTokensPropertyItemProvider mergeNodeHeldTokensPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.MergeNodeHeldTokensProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMergeNodeHeldTokensPropertyAdapter() {
		if (mergeNodeHeldTokensPropertyItemProvider == null) {
			mergeNodeHeldTokensPropertyItemProvider = new MergeNodeHeldTokensPropertyItemProvider(this);
		}

		return mergeNodeHeldTokensPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.MergeNodeIncomingProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MergeNodeIncomingPropertyItemProvider mergeNodeIncomingPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.MergeNodeIncomingProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMergeNodeIncomingPropertyAdapter() {
		if (mergeNodeIncomingPropertyItemProvider == null) {
			mergeNodeIncomingPropertyItemProvider = new MergeNodeIncomingPropertyItemProvider(this);
		}

		return mergeNodeIncomingPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.MergeNodeOutgoingProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MergeNodeOutgoingPropertyItemProvider mergeNodeOutgoingPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.MergeNodeOutgoingProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMergeNodeOutgoingPropertyAdapter() {
		if (mergeNodeOutgoingPropertyItemProvider == null) {
			mergeNodeOutgoingPropertyItemProvider = new MergeNodeOutgoingPropertyItemProvider(this);
		}

		return mergeNodeOutgoingPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryForkNodeProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryForkNodePropertyItemProvider unaryForkNodePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryForkNodeProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryForkNodePropertyAdapter() {
		if (unaryForkNodePropertyItemProvider == null) {
			unaryForkNodePropertyItemProvider = new UnaryForkNodePropertyItemProvider(this);
		}

		return unaryForkNodePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryForkNodeProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryForkNodePropertyItemProvider binaryForkNodePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryForkNodeProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryForkNodePropertyAdapter() {
		if (binaryForkNodePropertyItemProvider == null) {
			binaryForkNodePropertyItemProvider = new BinaryForkNodePropertyItemProvider(this);
		}

		return binaryForkNodePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ForkNodeNameProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForkNodeNamePropertyItemProvider forkNodeNamePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ForkNodeNameProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForkNodeNamePropertyAdapter() {
		if (forkNodeNamePropertyItemProvider == null) {
			forkNodeNamePropertyItemProvider = new ForkNodeNamePropertyItemProvider(this);
		}

		return forkNodeNamePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ForkNodeActivityProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForkNodeActivityPropertyItemProvider forkNodeActivityPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ForkNodeActivityProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForkNodeActivityPropertyAdapter() {
		if (forkNodeActivityPropertyItemProvider == null) {
			forkNodeActivityPropertyItemProvider = new ForkNodeActivityPropertyItemProvider(this);
		}

		return forkNodeActivityPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ForkNodeRunningProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForkNodeRunningPropertyItemProvider forkNodeRunningPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ForkNodeRunningProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForkNodeRunningPropertyAdapter() {
		if (forkNodeRunningPropertyItemProvider == null) {
			forkNodeRunningPropertyItemProvider = new ForkNodeRunningPropertyItemProvider(this);
		}

		return forkNodeRunningPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenForkNodeContainerProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlTokenForkNodeContainerPropertyItemProvider controlTokenForkNodeContainerPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenForkNodeContainerProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlTokenForkNodeContainerPropertyAdapter() {
		if (controlTokenForkNodeContainerPropertyItemProvider == null) {
			controlTokenForkNodeContainerPropertyItemProvider = new ControlTokenForkNodeContainerPropertyItemProvider(this);
		}

		return controlTokenForkNodeContainerPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ForkNodeHeldTokensProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForkNodeHeldTokensPropertyItemProvider forkNodeHeldTokensPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ForkNodeHeldTokensProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForkNodeHeldTokensPropertyAdapter() {
		if (forkNodeHeldTokensPropertyItemProvider == null) {
			forkNodeHeldTokensPropertyItemProvider = new ForkNodeHeldTokensPropertyItemProvider(this);
		}

		return forkNodeHeldTokensPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ForkNodeIncomingProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForkNodeIncomingPropertyItemProvider forkNodeIncomingPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ForkNodeIncomingProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForkNodeIncomingPropertyAdapter() {
		if (forkNodeIncomingPropertyItemProvider == null) {
			forkNodeIncomingPropertyItemProvider = new ForkNodeIncomingPropertyItemProvider(this);
		}

		return forkNodeIncomingPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ForkNodeOutgoingProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForkNodeOutgoingPropertyItemProvider forkNodeOutgoingPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ForkNodeOutgoingProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForkNodeOutgoingPropertyAdapter() {
		if (forkNodeOutgoingPropertyItemProvider == null) {
			forkNodeOutgoingPropertyItemProvider = new ForkNodeOutgoingPropertyItemProvider(this);
		}

		return forkNodeOutgoingPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryJoinNodeProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryJoinNodePropertyItemProvider unaryJoinNodePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryJoinNodeProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryJoinNodePropertyAdapter() {
		if (unaryJoinNodePropertyItemProvider == null) {
			unaryJoinNodePropertyItemProvider = new UnaryJoinNodePropertyItemProvider(this);
		}

		return unaryJoinNodePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryJoinNodeProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryJoinNodePropertyItemProvider binaryJoinNodePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryJoinNodeProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryJoinNodePropertyAdapter() {
		if (binaryJoinNodePropertyItemProvider == null) {
			binaryJoinNodePropertyItemProvider = new BinaryJoinNodePropertyItemProvider(this);
		}

		return binaryJoinNodePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.JoinNodeNameProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JoinNodeNamePropertyItemProvider joinNodeNamePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.JoinNodeNameProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJoinNodeNamePropertyAdapter() {
		if (joinNodeNamePropertyItemProvider == null) {
			joinNodeNamePropertyItemProvider = new JoinNodeNamePropertyItemProvider(this);
		}

		return joinNodeNamePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.JoinNodeActivityProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JoinNodeActivityPropertyItemProvider joinNodeActivityPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.JoinNodeActivityProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJoinNodeActivityPropertyAdapter() {
		if (joinNodeActivityPropertyItemProvider == null) {
			joinNodeActivityPropertyItemProvider = new JoinNodeActivityPropertyItemProvider(this);
		}

		return joinNodeActivityPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.JoinNodeRunningProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JoinNodeRunningPropertyItemProvider joinNodeRunningPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.JoinNodeRunningProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJoinNodeRunningPropertyAdapter() {
		if (joinNodeRunningPropertyItemProvider == null) {
			joinNodeRunningPropertyItemProvider = new JoinNodeRunningPropertyItemProvider(this);
		}

		return joinNodeRunningPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenJoinNodeContainerProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlTokenJoinNodeContainerPropertyItemProvider controlTokenJoinNodeContainerPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenJoinNodeContainerProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlTokenJoinNodeContainerPropertyAdapter() {
		if (controlTokenJoinNodeContainerPropertyItemProvider == null) {
			controlTokenJoinNodeContainerPropertyItemProvider = new ControlTokenJoinNodeContainerPropertyItemProvider(this);
		}

		return controlTokenJoinNodeContainerPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.JoinNodeHeldTokensProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JoinNodeHeldTokensPropertyItemProvider joinNodeHeldTokensPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.JoinNodeHeldTokensProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJoinNodeHeldTokensPropertyAdapter() {
		if (joinNodeHeldTokensPropertyItemProvider == null) {
			joinNodeHeldTokensPropertyItemProvider = new JoinNodeHeldTokensPropertyItemProvider(this);
		}

		return joinNodeHeldTokensPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.JoinNodeIncomingProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JoinNodeIncomingPropertyItemProvider joinNodeIncomingPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.JoinNodeIncomingProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJoinNodeIncomingPropertyAdapter() {
		if (joinNodeIncomingPropertyItemProvider == null) {
			joinNodeIncomingPropertyItemProvider = new JoinNodeIncomingPropertyItemProvider(this);
		}

		return joinNodeIncomingPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.JoinNodeOutgoingProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JoinNodeOutgoingPropertyItemProvider joinNodeOutgoingPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.JoinNodeOutgoingProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJoinNodeOutgoingPropertyAdapter() {
		if (joinNodeOutgoingPropertyItemProvider == null) {
			joinNodeOutgoingPropertyItemProvider = new JoinNodeOutgoingPropertyItemProvider(this);
		}

		return joinNodeOutgoingPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryFinalNodeProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryFinalNodePropertyItemProvider unaryFinalNodePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryFinalNodeProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryFinalNodePropertyAdapter() {
		if (unaryFinalNodePropertyItemProvider == null) {
			unaryFinalNodePropertyItemProvider = new UnaryFinalNodePropertyItemProvider(this);
		}

		return unaryFinalNodePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryFinalNodeProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryFinalNodePropertyItemProvider binaryFinalNodePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryFinalNodeProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryFinalNodePropertyAdapter() {
		if (binaryFinalNodePropertyItemProvider == null) {
			binaryFinalNodePropertyItemProvider = new BinaryFinalNodePropertyItemProvider(this);
		}

		return binaryFinalNodePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.FinalNodeNameProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FinalNodeNamePropertyItemProvider finalNodeNamePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.FinalNodeNameProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFinalNodeNamePropertyAdapter() {
		if (finalNodeNamePropertyItemProvider == null) {
			finalNodeNamePropertyItemProvider = new FinalNodeNamePropertyItemProvider(this);
		}

		return finalNodeNamePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.FinalNodeActivityProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FinalNodeActivityPropertyItemProvider finalNodeActivityPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.FinalNodeActivityProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFinalNodeActivityPropertyAdapter() {
		if (finalNodeActivityPropertyItemProvider == null) {
			finalNodeActivityPropertyItemProvider = new FinalNodeActivityPropertyItemProvider(this);
		}

		return finalNodeActivityPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.FinalNodeRunningProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FinalNodeRunningPropertyItemProvider finalNodeRunningPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.FinalNodeRunningProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFinalNodeRunningPropertyAdapter() {
		if (finalNodeRunningPropertyItemProvider == null) {
			finalNodeRunningPropertyItemProvider = new FinalNodeRunningPropertyItemProvider(this);
		}

		return finalNodeRunningPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenFinalNodeContainerProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlTokenFinalNodeContainerPropertyItemProvider controlTokenFinalNodeContainerPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenFinalNodeContainerProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlTokenFinalNodeContainerPropertyAdapter() {
		if (controlTokenFinalNodeContainerPropertyItemProvider == null) {
			controlTokenFinalNodeContainerPropertyItemProvider = new ControlTokenFinalNodeContainerPropertyItemProvider(this);
		}

		return controlTokenFinalNodeContainerPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.FinalNodeHeldTokensProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FinalNodeHeldTokensPropertyItemProvider finalNodeHeldTokensPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.FinalNodeHeldTokensProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFinalNodeHeldTokensPropertyAdapter() {
		if (finalNodeHeldTokensPropertyItemProvider == null) {
			finalNodeHeldTokensPropertyItemProvider = new FinalNodeHeldTokensPropertyItemProvider(this);
		}

		return finalNodeHeldTokensPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.FinalNodeIncomingProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FinalNodeIncomingPropertyItemProvider finalNodeIncomingPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.FinalNodeIncomingProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFinalNodeIncomingPropertyAdapter() {
		if (finalNodeIncomingPropertyItemProvider == null) {
			finalNodeIncomingPropertyItemProvider = new FinalNodeIncomingPropertyItemProvider(this);
		}

		return finalNodeIncomingPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryActivityFinalNodeProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryActivityFinalNodePropertyItemProvider unaryActivityFinalNodePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryActivityFinalNodeProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryActivityFinalNodePropertyAdapter() {
		if (unaryActivityFinalNodePropertyItemProvider == null) {
			unaryActivityFinalNodePropertyItemProvider = new UnaryActivityFinalNodePropertyItemProvider(this);
		}

		return unaryActivityFinalNodePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryActivityFinalNodeProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryActivityFinalNodePropertyItemProvider binaryActivityFinalNodePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryActivityFinalNodeProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryActivityFinalNodePropertyAdapter() {
		if (binaryActivityFinalNodePropertyItemProvider == null) {
			binaryActivityFinalNodePropertyItemProvider = new BinaryActivityFinalNodePropertyItemProvider(this);
		}

		return binaryActivityFinalNodePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityFinalNodeNameProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityFinalNodeNamePropertyItemProvider activityFinalNodeNamePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityFinalNodeNameProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityFinalNodeNamePropertyAdapter() {
		if (activityFinalNodeNamePropertyItemProvider == null) {
			activityFinalNodeNamePropertyItemProvider = new ActivityFinalNodeNamePropertyItemProvider(this);
		}

		return activityFinalNodeNamePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityFinalNodeActivityProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityFinalNodeActivityPropertyItemProvider activityFinalNodeActivityPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityFinalNodeActivityProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityFinalNodeActivityPropertyAdapter() {
		if (activityFinalNodeActivityPropertyItemProvider == null) {
			activityFinalNodeActivityPropertyItemProvider = new ActivityFinalNodeActivityPropertyItemProvider(this);
		}

		return activityFinalNodeActivityPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityFinalNodeRunningProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityFinalNodeRunningPropertyItemProvider activityFinalNodeRunningPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityFinalNodeRunningProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityFinalNodeRunningPropertyAdapter() {
		if (activityFinalNodeRunningPropertyItemProvider == null) {
			activityFinalNodeRunningPropertyItemProvider = new ActivityFinalNodeRunningPropertyItemProvider(this);
		}

		return activityFinalNodeRunningPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenActivityFinalNodeContainerProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlTokenActivityFinalNodeContainerPropertyItemProvider controlTokenActivityFinalNodeContainerPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenActivityFinalNodeContainerProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlTokenActivityFinalNodeContainerPropertyAdapter() {
		if (controlTokenActivityFinalNodeContainerPropertyItemProvider == null) {
			controlTokenActivityFinalNodeContainerPropertyItemProvider = new ControlTokenActivityFinalNodeContainerPropertyItemProvider(this);
		}

		return controlTokenActivityFinalNodeContainerPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityFinalNodeHeldTokensProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityFinalNodeHeldTokensPropertyItemProvider activityFinalNodeHeldTokensPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityFinalNodeHeldTokensProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityFinalNodeHeldTokensPropertyAdapter() {
		if (activityFinalNodeHeldTokensPropertyItemProvider == null) {
			activityFinalNodeHeldTokensPropertyItemProvider = new ActivityFinalNodeHeldTokensPropertyItemProvider(this);
		}

		return activityFinalNodeHeldTokensPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityFinalNodeIncomingProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityFinalNodeIncomingPropertyItemProvider activityFinalNodeIncomingPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ActivityFinalNodeIncomingProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityFinalNodeIncomingPropertyAdapter() {
		if (activityFinalNodeIncomingPropertyItemProvider == null) {
			activityFinalNodeIncomingPropertyItemProvider = new ActivityFinalNodeIncomingPropertyItemProvider(this);
		}

		return activityFinalNodeIncomingPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryFlowFinalNodeProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryFlowFinalNodePropertyItemProvider unaryFlowFinalNodePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryFlowFinalNodeProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryFlowFinalNodePropertyAdapter() {
		if (unaryFlowFinalNodePropertyItemProvider == null) {
			unaryFlowFinalNodePropertyItemProvider = new UnaryFlowFinalNodePropertyItemProvider(this);
		}

		return unaryFlowFinalNodePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryFlowFinalNodeProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryFlowFinalNodePropertyItemProvider binaryFlowFinalNodePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryFlowFinalNodeProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryFlowFinalNodePropertyAdapter() {
		if (binaryFlowFinalNodePropertyItemProvider == null) {
			binaryFlowFinalNodePropertyItemProvider = new BinaryFlowFinalNodePropertyItemProvider(this);
		}

		return binaryFlowFinalNodePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.FlowFinalNodeNameProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowFinalNodeNamePropertyItemProvider flowFinalNodeNamePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.FlowFinalNodeNameProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowFinalNodeNamePropertyAdapter() {
		if (flowFinalNodeNamePropertyItemProvider == null) {
			flowFinalNodeNamePropertyItemProvider = new FlowFinalNodeNamePropertyItemProvider(this);
		}

		return flowFinalNodeNamePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.FlowFinalNodeActivityProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowFinalNodeActivityPropertyItemProvider flowFinalNodeActivityPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.FlowFinalNodeActivityProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowFinalNodeActivityPropertyAdapter() {
		if (flowFinalNodeActivityPropertyItemProvider == null) {
			flowFinalNodeActivityPropertyItemProvider = new FlowFinalNodeActivityPropertyItemProvider(this);
		}

		return flowFinalNodeActivityPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.FlowFinalNodeRunningProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowFinalNodeRunningPropertyItemProvider flowFinalNodeRunningPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.FlowFinalNodeRunningProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowFinalNodeRunningPropertyAdapter() {
		if (flowFinalNodeRunningPropertyItemProvider == null) {
			flowFinalNodeRunningPropertyItemProvider = new FlowFinalNodeRunningPropertyItemProvider(this);
		}

		return flowFinalNodeRunningPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenFlowFinalNodeContainerProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ControlTokenFlowFinalNodeContainerPropertyItemProvider controlTokenFlowFinalNodeContainerPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.ControlTokenFlowFinalNodeContainerProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createControlTokenFlowFinalNodeContainerPropertyAdapter() {
		if (controlTokenFlowFinalNodeContainerPropertyItemProvider == null) {
			controlTokenFlowFinalNodeContainerPropertyItemProvider = new ControlTokenFlowFinalNodeContainerPropertyItemProvider(this);
		}

		return controlTokenFlowFinalNodeContainerPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.FlowFinalNodeHeldTokensProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowFinalNodeHeldTokensPropertyItemProvider flowFinalNodeHeldTokensPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.FlowFinalNodeHeldTokensProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowFinalNodeHeldTokensPropertyAdapter() {
		if (flowFinalNodeHeldTokensPropertyItemProvider == null) {
			flowFinalNodeHeldTokensPropertyItemProvider = new FlowFinalNodeHeldTokensPropertyItemProvider(this);
		}

		return flowFinalNodeHeldTokensPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.FlowFinalNodeIncomingProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowFinalNodeIncomingPropertyItemProvider flowFinalNodeIncomingPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.FlowFinalNodeIncomingProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowFinalNodeIncomingPropertyAdapter() {
		if (flowFinalNodeIncomingPropertyItemProvider == null) {
			flowFinalNodeIncomingPropertyItemProvider = new FlowFinalNodeIncomingPropertyItemProvider(this);
		}

		return flowFinalNodeIncomingPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryValueProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryValuePropertyItemProvider unaryValuePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryValueProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryValuePropertyAdapter() {
		if (unaryValuePropertyItemProvider == null) {
			unaryValuePropertyItemProvider = new UnaryValuePropertyItemProvider(this);
		}

		return unaryValuePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryValueProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryValuePropertyItemProvider binaryValuePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryValueProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryValuePropertyAdapter() {
		if (binaryValuePropertyItemProvider == null) {
			binaryValuePropertyItemProvider = new BinaryValuePropertyItemProvider(this);
		}

		return binaryValuePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryIntegerExpressionProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryIntegerExpressionPropertyItemProvider unaryIntegerExpressionPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryIntegerExpressionProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryIntegerExpressionPropertyAdapter() {
		if (unaryIntegerExpressionPropertyItemProvider == null) {
			unaryIntegerExpressionPropertyItemProvider = new UnaryIntegerExpressionPropertyItemProvider(this);
		}

		return unaryIntegerExpressionPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryIntegerExpressionProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryIntegerExpressionPropertyItemProvider binaryIntegerExpressionPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryIntegerExpressionProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryIntegerExpressionPropertyAdapter() {
		if (binaryIntegerExpressionPropertyItemProvider == null) {
			binaryIntegerExpressionPropertyItemProvider = new BinaryIntegerExpressionPropertyItemProvider(this);
		}

		return binaryIntegerExpressionPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryIntegerVariableProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryIntegerVariablePropertyItemProvider unaryIntegerVariablePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryIntegerVariableProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryIntegerVariablePropertyAdapter() {
		if (unaryIntegerVariablePropertyItemProvider == null) {
			unaryIntegerVariablePropertyItemProvider = new UnaryIntegerVariablePropertyItemProvider(this);
		}

		return unaryIntegerVariablePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryIntegerVariableProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryIntegerVariablePropertyItemProvider binaryIntegerVariablePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryIntegerVariableProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryIntegerVariablePropertyAdapter() {
		if (binaryIntegerVariablePropertyItemProvider == null) {
			binaryIntegerVariablePropertyItemProvider = new BinaryIntegerVariablePropertyItemProvider(this);
		}

		return binaryIntegerVariablePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.IntegerVariableNameProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerVariableNamePropertyItemProvider integerVariableNamePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.IntegerVariableNameProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerVariableNamePropertyAdapter() {
		if (integerVariableNamePropertyItemProvider == null) {
			integerVariableNamePropertyItemProvider = new IntegerVariableNamePropertyItemProvider(this);
		}

		return integerVariableNamePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.IntegerVariableInitialValueProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerVariableInitialValuePropertyItemProvider integerVariableInitialValuePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.IntegerVariableInitialValueProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerVariableInitialValuePropertyAdapter() {
		if (integerVariableInitialValuePropertyItemProvider == null) {
			integerVariableInitialValuePropertyItemProvider = new IntegerVariableInitialValuePropertyItemProvider(this);
		}

		return integerVariableInitialValuePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.IntegerVariableCurrentValueProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerVariableCurrentValuePropertyItemProvider integerVariableCurrentValuePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.IntegerVariableCurrentValueProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerVariableCurrentValuePropertyAdapter() {
		if (integerVariableCurrentValuePropertyItemProvider == null) {
			integerVariableCurrentValuePropertyItemProvider = new IntegerVariableCurrentValuePropertyItemProvider(this);
		}

		return integerVariableCurrentValuePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryBooleanValueProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryBooleanValuePropertyItemProvider unaryBooleanValuePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryBooleanValueProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryBooleanValuePropertyAdapter() {
		if (unaryBooleanValuePropertyItemProvider == null) {
			unaryBooleanValuePropertyItemProvider = new UnaryBooleanValuePropertyItemProvider(this);
		}

		return unaryBooleanValuePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryBooleanValueProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryBooleanValuePropertyItemProvider binaryBooleanValuePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryBooleanValueProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryBooleanValuePropertyAdapter() {
		if (binaryBooleanValuePropertyItemProvider == null) {
			binaryBooleanValuePropertyItemProvider = new BinaryBooleanValuePropertyItemProvider(this);
		}

		return binaryBooleanValuePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BooleanValueValueProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanValueValuePropertyItemProvider booleanValueValuePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BooleanValueValueProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanValueValuePropertyAdapter() {
		if (booleanValueValuePropertyItemProvider == null) {
			booleanValueValuePropertyItemProvider = new BooleanValueValuePropertyItemProvider(this);
		}

		return booleanValueValuePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryIntegerValueProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryIntegerValuePropertyItemProvider unaryIntegerValuePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryIntegerValueProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryIntegerValuePropertyAdapter() {
		if (unaryIntegerValuePropertyItemProvider == null) {
			unaryIntegerValuePropertyItemProvider = new UnaryIntegerValuePropertyItemProvider(this);
		}

		return unaryIntegerValuePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryIntegerValueProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryIntegerValuePropertyItemProvider binaryIntegerValuePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryIntegerValueProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryIntegerValuePropertyAdapter() {
		if (binaryIntegerValuePropertyItemProvider == null) {
			binaryIntegerValuePropertyItemProvider = new BinaryIntegerValuePropertyItemProvider(this);
		}

		return binaryIntegerValuePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.IntegerValueValueProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerValueValuePropertyItemProvider integerValueValuePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.IntegerValueValueProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerValueValuePropertyAdapter() {
		if (integerValueValuePropertyItemProvider == null) {
			integerValueValuePropertyItemProvider = new IntegerValueValuePropertyItemProvider(this);
		}

		return integerValueValuePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryIntegerBinaryExpressionProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryIntegerBinaryExpressionPropertyItemProvider unaryIntegerBinaryExpressionPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryIntegerBinaryExpressionProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryIntegerBinaryExpressionPropertyAdapter() {
		if (unaryIntegerBinaryExpressionPropertyItemProvider == null) {
			unaryIntegerBinaryExpressionPropertyItemProvider = new UnaryIntegerBinaryExpressionPropertyItemProvider(this);
		}

		return unaryIntegerBinaryExpressionPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryIntegerBinaryExpressionProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryIntegerBinaryExpressionPropertyItemProvider binaryIntegerBinaryExpressionPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryIntegerBinaryExpressionProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryIntegerBinaryExpressionPropertyAdapter() {
		if (binaryIntegerBinaryExpressionPropertyItemProvider == null) {
			binaryIntegerBinaryExpressionPropertyItemProvider = new BinaryIntegerBinaryExpressionPropertyItemProvider(this);
		}

		return binaryIntegerBinaryExpressionPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.IntegerBinaryExpressionOperand1Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerBinaryExpressionOperand1PropertyItemProvider integerBinaryExpressionOperand1PropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.IntegerBinaryExpressionOperand1Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerBinaryExpressionOperand1PropertyAdapter() {
		if (integerBinaryExpressionOperand1PropertyItemProvider == null) {
			integerBinaryExpressionOperand1PropertyItemProvider = new IntegerBinaryExpressionOperand1PropertyItemProvider(this);
		}

		return integerBinaryExpressionOperand1PropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.IntegerBinaryExpressionOperand2Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerBinaryExpressionOperand2PropertyItemProvider integerBinaryExpressionOperand2PropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.IntegerBinaryExpressionOperand2Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerBinaryExpressionOperand2PropertyAdapter() {
		if (integerBinaryExpressionOperand2PropertyItemProvider == null) {
			integerBinaryExpressionOperand2PropertyItemProvider = new IntegerBinaryExpressionOperand2PropertyItemProvider(this);
		}

		return integerBinaryExpressionOperand2PropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.IntegerBinaryExpressionOperatorProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerBinaryExpressionOperatorPropertyItemProvider integerBinaryExpressionOperatorPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.IntegerBinaryExpressionOperatorProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerBinaryExpressionOperatorPropertyAdapter() {
		if (integerBinaryExpressionOperatorPropertyItemProvider == null) {
			integerBinaryExpressionOperatorPropertyItemProvider = new IntegerBinaryExpressionOperatorPropertyItemProvider(this);
		}

		return integerBinaryExpressionOperatorPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryIntegerComparisonExpressionProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryIntegerComparisonExpressionPropertyItemProvider unaryIntegerComparisonExpressionPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryIntegerComparisonExpressionProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryIntegerComparisonExpressionPropertyAdapter() {
		if (unaryIntegerComparisonExpressionPropertyItemProvider == null) {
			unaryIntegerComparisonExpressionPropertyItemProvider = new UnaryIntegerComparisonExpressionPropertyItemProvider(this);
		}

		return unaryIntegerComparisonExpressionPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryIntegerComparisonExpressionProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryIntegerComparisonExpressionPropertyItemProvider binaryIntegerComparisonExpressionPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryIntegerComparisonExpressionProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryIntegerComparisonExpressionPropertyAdapter() {
		if (binaryIntegerComparisonExpressionPropertyItemProvider == null) {
			binaryIntegerComparisonExpressionPropertyItemProvider = new BinaryIntegerComparisonExpressionPropertyItemProvider(this);
		}

		return binaryIntegerComparisonExpressionPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.IntegerComparisonExpressionOperatorProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerComparisonExpressionOperatorPropertyItemProvider integerComparisonExpressionOperatorPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.IntegerComparisonExpressionOperatorProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerComparisonExpressionOperatorPropertyAdapter() {
		if (integerComparisonExpressionOperatorPropertyItemProvider == null) {
			integerComparisonExpressionOperatorPropertyItemProvider = new IntegerComparisonExpressionOperatorPropertyItemProvider(this);
		}

		return integerComparisonExpressionOperatorPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.IntegerComparisonExpressionOperand1Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerComparisonExpressionOperand1PropertyItemProvider integerComparisonExpressionOperand1PropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.IntegerComparisonExpressionOperand1Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerComparisonExpressionOperand1PropertyAdapter() {
		if (integerComparisonExpressionOperand1PropertyItemProvider == null) {
			integerComparisonExpressionOperand1PropertyItemProvider = new IntegerComparisonExpressionOperand1PropertyItemProvider(this);
		}

		return integerComparisonExpressionOperand1PropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.IntegerComparisonExpressionOperand2Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerComparisonExpressionOperand2PropertyItemProvider integerComparisonExpressionOperand2PropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.IntegerComparisonExpressionOperand2Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerComparisonExpressionOperand2PropertyAdapter() {
		if (integerComparisonExpressionOperand2PropertyItemProvider == null) {
			integerComparisonExpressionOperand2PropertyItemProvider = new IntegerComparisonExpressionOperand2PropertyItemProvider(this);
		}

		return integerComparisonExpressionOperand2PropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryBooleanUnaryExpressionProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryBooleanUnaryExpressionPropertyItemProvider unaryBooleanUnaryExpressionPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryBooleanUnaryExpressionProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryBooleanUnaryExpressionPropertyAdapter() {
		if (unaryBooleanUnaryExpressionPropertyItemProvider == null) {
			unaryBooleanUnaryExpressionPropertyItemProvider = new UnaryBooleanUnaryExpressionPropertyItemProvider(this);
		}

		return unaryBooleanUnaryExpressionPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryBooleanUnaryExpressionProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryBooleanUnaryExpressionPropertyItemProvider binaryBooleanUnaryExpressionPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryBooleanUnaryExpressionProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryBooleanUnaryExpressionPropertyAdapter() {
		if (binaryBooleanUnaryExpressionPropertyItemProvider == null) {
			binaryBooleanUnaryExpressionPropertyItemProvider = new BinaryBooleanUnaryExpressionPropertyItemProvider(this);
		}

		return binaryBooleanUnaryExpressionPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BooleanUnaryExpressionOperandProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanUnaryExpressionOperandPropertyItemProvider booleanUnaryExpressionOperandPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BooleanUnaryExpressionOperandProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanUnaryExpressionOperandPropertyAdapter() {
		if (booleanUnaryExpressionOperandPropertyItemProvider == null) {
			booleanUnaryExpressionOperandPropertyItemProvider = new BooleanUnaryExpressionOperandPropertyItemProvider(this);
		}

		return booleanUnaryExpressionOperandPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BooleanUnaryExpressionOperatorProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanUnaryExpressionOperatorPropertyItemProvider booleanUnaryExpressionOperatorPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BooleanUnaryExpressionOperatorProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanUnaryExpressionOperatorPropertyAdapter() {
		if (booleanUnaryExpressionOperatorPropertyItemProvider == null) {
			booleanUnaryExpressionOperatorPropertyItemProvider = new BooleanUnaryExpressionOperatorPropertyItemProvider(this);
		}

		return booleanUnaryExpressionOperatorPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryBooleanBinaryExpressionProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryBooleanBinaryExpressionPropertyItemProvider unaryBooleanBinaryExpressionPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryBooleanBinaryExpressionProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryBooleanBinaryExpressionPropertyAdapter() {
		if (unaryBooleanBinaryExpressionPropertyItemProvider == null) {
			unaryBooleanBinaryExpressionPropertyItemProvider = new UnaryBooleanBinaryExpressionPropertyItemProvider(this);
		}

		return unaryBooleanBinaryExpressionPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryBooleanBinaryExpressionProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryBooleanBinaryExpressionPropertyItemProvider binaryBooleanBinaryExpressionPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryBooleanBinaryExpressionProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryBooleanBinaryExpressionPropertyAdapter() {
		if (binaryBooleanBinaryExpressionPropertyItemProvider == null) {
			binaryBooleanBinaryExpressionPropertyItemProvider = new BinaryBooleanBinaryExpressionPropertyItemProvider(this);
		}

		return binaryBooleanBinaryExpressionPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BooleanBinaryExpressionOperand1Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanBinaryExpressionOperand1PropertyItemProvider booleanBinaryExpressionOperand1PropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BooleanBinaryExpressionOperand1Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanBinaryExpressionOperand1PropertyAdapter() {
		if (booleanBinaryExpressionOperand1PropertyItemProvider == null) {
			booleanBinaryExpressionOperand1PropertyItemProvider = new BooleanBinaryExpressionOperand1PropertyItemProvider(this);
		}

		return booleanBinaryExpressionOperand1PropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BooleanBinaryExpressionOperand2Property} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanBinaryExpressionOperand2PropertyItemProvider booleanBinaryExpressionOperand2PropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BooleanBinaryExpressionOperand2Property}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanBinaryExpressionOperand2PropertyAdapter() {
		if (booleanBinaryExpressionOperand2PropertyItemProvider == null) {
			booleanBinaryExpressionOperand2PropertyItemProvider = new BooleanBinaryExpressionOperand2PropertyItemProvider(this);
		}

		return booleanBinaryExpressionOperand2PropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BooleanBinaryExpressionOperatorProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanBinaryExpressionOperatorPropertyItemProvider booleanBinaryExpressionOperatorPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BooleanBinaryExpressionOperatorProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanBinaryExpressionOperatorPropertyAdapter() {
		if (booleanBinaryExpressionOperatorPropertyItemProvider == null) {
			booleanBinaryExpressionOperatorPropertyItemProvider = new BooleanBinaryExpressionOperatorPropertyItemProvider(this);
		}

		return booleanBinaryExpressionOperatorPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryBooleanVariableAssignmentProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryBooleanVariableAssignmentPropertyItemProvider unaryBooleanVariableAssignmentPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryBooleanVariableAssignmentProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryBooleanVariableAssignmentPropertyAdapter() {
		if (unaryBooleanVariableAssignmentPropertyItemProvider == null) {
			unaryBooleanVariableAssignmentPropertyItemProvider = new UnaryBooleanVariableAssignmentPropertyItemProvider(this);
		}

		return unaryBooleanVariableAssignmentPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryBooleanVariableAssignmentProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryBooleanVariableAssignmentPropertyItemProvider binaryBooleanVariableAssignmentPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryBooleanVariableAssignmentProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryBooleanVariableAssignmentPropertyAdapter() {
		if (binaryBooleanVariableAssignmentPropertyItemProvider == null) {
			binaryBooleanVariableAssignmentPropertyItemProvider = new BinaryBooleanVariableAssignmentPropertyItemProvider(this);
		}

		return binaryBooleanVariableAssignmentPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BooleanVariableAssignmentAssigneeProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanVariableAssignmentAssigneePropertyItemProvider booleanVariableAssignmentAssigneePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BooleanVariableAssignmentAssigneeProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanVariableAssignmentAssigneePropertyAdapter() {
		if (booleanVariableAssignmentAssigneePropertyItemProvider == null) {
			booleanVariableAssignmentAssigneePropertyItemProvider = new BooleanVariableAssignmentAssigneePropertyItemProvider(this);
		}

		return booleanVariableAssignmentAssigneePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BooleanExpressionBooleanVariableAssignmentContainerProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanExpressionBooleanVariableAssignmentContainerPropertyItemProvider booleanExpressionBooleanVariableAssignmentContainerPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BooleanExpressionBooleanVariableAssignmentContainerProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanExpressionBooleanVariableAssignmentContainerPropertyAdapter() {
		if (booleanExpressionBooleanVariableAssignmentContainerPropertyItemProvider == null) {
			booleanExpressionBooleanVariableAssignmentContainerPropertyItemProvider = new BooleanExpressionBooleanVariableAssignmentContainerPropertyItemProvider(this);
		}

		return booleanExpressionBooleanVariableAssignmentContainerPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BooleanVariableAssignmentExpressionProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanVariableAssignmentExpressionPropertyItemProvider booleanVariableAssignmentExpressionPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BooleanVariableAssignmentExpressionProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanVariableAssignmentExpressionPropertyAdapter() {
		if (booleanVariableAssignmentExpressionPropertyItemProvider == null) {
			booleanVariableAssignmentExpressionPropertyItemProvider = new BooleanVariableAssignmentExpressionPropertyItemProvider(this);
		}

		return booleanVariableAssignmentExpressionPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryIntegerVariableAssignmentProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryIntegerVariableAssignmentPropertyItemProvider unaryIntegerVariableAssignmentPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryIntegerVariableAssignmentProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryIntegerVariableAssignmentPropertyAdapter() {
		if (unaryIntegerVariableAssignmentPropertyItemProvider == null) {
			unaryIntegerVariableAssignmentPropertyItemProvider = new UnaryIntegerVariableAssignmentPropertyItemProvider(this);
		}

		return unaryIntegerVariableAssignmentPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryIntegerVariableAssignmentProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryIntegerVariableAssignmentPropertyItemProvider binaryIntegerVariableAssignmentPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryIntegerVariableAssignmentProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryIntegerVariableAssignmentPropertyAdapter() {
		if (binaryIntegerVariableAssignmentPropertyItemProvider == null) {
			binaryIntegerVariableAssignmentPropertyItemProvider = new BinaryIntegerVariableAssignmentPropertyItemProvider(this);
		}

		return binaryIntegerVariableAssignmentPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.IntegerVariableAssignmentAssigneeProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerVariableAssignmentAssigneePropertyItemProvider integerVariableAssignmentAssigneePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.IntegerVariableAssignmentAssigneeProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerVariableAssignmentAssigneePropertyAdapter() {
		if (integerVariableAssignmentAssigneePropertyItemProvider == null) {
			integerVariableAssignmentAssigneePropertyItemProvider = new IntegerVariableAssignmentAssigneePropertyItemProvider(this);
		}

		return integerVariableAssignmentAssigneePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.IntegerExpressionIntegerVariableAssignmentContainerProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerExpressionIntegerVariableAssignmentContainerPropertyItemProvider integerExpressionIntegerVariableAssignmentContainerPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.IntegerExpressionIntegerVariableAssignmentContainerProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerExpressionIntegerVariableAssignmentContainerPropertyAdapter() {
		if (integerExpressionIntegerVariableAssignmentContainerPropertyItemProvider == null) {
			integerExpressionIntegerVariableAssignmentContainerPropertyItemProvider = new IntegerExpressionIntegerVariableAssignmentContainerPropertyItemProvider(this);
		}

		return integerExpressionIntegerVariableAssignmentContainerPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.IntegerVariableAssignmentExpressionProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerVariableAssignmentExpressionPropertyItemProvider integerVariableAssignmentExpressionPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.IntegerVariableAssignmentExpressionProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerVariableAssignmentExpressionPropertyAdapter() {
		if (integerVariableAssignmentExpressionPropertyItemProvider == null) {
			integerVariableAssignmentExpressionPropertyItemProvider = new IntegerVariableAssignmentExpressionPropertyItemProvider(this);
		}

		return integerVariableAssignmentExpressionPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryOfferProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UnaryOfferPropertyItemProvider unaryOfferPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.UnaryOfferProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUnaryOfferPropertyAdapter() {
		if (unaryOfferPropertyItemProvider == null) {
			unaryOfferPropertyItemProvider = new UnaryOfferPropertyItemProvider(this);
		}

		return unaryOfferPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryOfferProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BinaryOfferPropertyItemProvider binaryOfferPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.BinaryOfferProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBinaryOfferPropertyAdapter() {
		if (binaryOfferPropertyItemProvider == null) {
			binaryOfferPropertyItemProvider = new BinaryOfferPropertyItemProvider(this);
		}

		return binaryOfferPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.XActivityDiagramNextProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XActivityDiagramNextPropertyItemProvider xActivityDiagramNextPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.XActivityDiagramNextProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXActivityDiagramNextPropertyAdapter() {
		if (xActivityDiagramNextPropertyItemProvider == null) {
			xActivityDiagramNextPropertyItemProvider = new XActivityDiagramNextPropertyItemProvider(this);
		}

		return xActivityDiagramNextPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.XActivityDiagramUntilProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XActivityDiagramUntilPropertyItemProvider xActivityDiagramUntilPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.XActivityDiagramUntilProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXActivityDiagramUntilPropertyAdapter() {
		if (xActivityDiagramUntilPropertyItemProvider == null) {
			xActivityDiagramUntilPropertyItemProvider = new XActivityDiagramUntilPropertyItemProvider(this);
		}

		return xActivityDiagramUntilPropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.XActivityDiagramReleaseProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XActivityDiagramReleasePropertyItemProvider xActivityDiagramReleasePropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.XActivityDiagramReleaseProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXActivityDiagramReleasePropertyAdapter() {
		if (xActivityDiagramReleasePropertyItemProvider == null) {
			xActivityDiagramReleasePropertyItemProvider = new XActivityDiagramReleasePropertyItemProvider(this);
		}

		return xActivityDiagramReleasePropertyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.XActivityDiagramNegationTemporalProperty} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected XActivityDiagramNegationTemporalPropertyItemProvider xActivityDiagramNegationTemporalPropertyItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProperty.XActivityDiagramNegationTemporalProperty}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createXActivityDiagramNegationTemporalPropertyAdapter() {
		if (xActivityDiagramNegationTemporalPropertyItemProvider == null) {
			xActivityDiagramNegationTemporalPropertyItemProvider = new XActivityDiagramNegationTemporalPropertyItemProvider(this);
		}

		return xActivityDiagramNegationTemporalPropertyItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (activityNodeRemoveTokenPropertyItemProvider != null) activityNodeRemoveTokenPropertyItemProvider.dispose();
		if (mergeNodeExecutePropertyItemProvider != null) mergeNodeExecutePropertyItemProvider.dispose();
		if (acceptEventActionAcceptPropertyItemProvider != null) acceptEventActionAcceptPropertyItemProvider.dispose();
		if (integerVariableAssignmentExecutePropertyItemProvider != null) integerVariableAssignmentExecutePropertyItemProvider.dispose();
		if (activityNodeAddTokenPropertyItemProvider != null) activityNodeAddTokenPropertyItemProvider.dispose();
		if (activityNodeTerminatePropertyItemProvider != null) activityNodeTerminatePropertyItemProvider.dispose();
		if (acceptEventActionExecutePropertyItemProvider != null) acceptEventActionExecutePropertyItemProvider.dispose();
		if (finalNodeExecutePropertyItemProvider != null) finalNodeExecutePropertyItemProvider.dispose();
		if (activityNodeExecutePropertyItemProvider != null) activityNodeExecutePropertyItemProvider.dispose();
		if (flowFinalNodeExecutePropertyItemProvider != null) flowFinalNodeExecutePropertyItemProvider.dispose();
		if (decisionNodeExecutePropertyItemProvider != null) decisionNodeExecutePropertyItemProvider.dispose();
		if (variableAssignmentExecutePropertyItemProvider != null) variableAssignmentExecutePropertyItemProvider.dispose();
		if (acceptEventActionWaitForEventPropertyItemProvider != null) acceptEventActionWaitForEventPropertyItemProvider.dispose();
		if (booleanVariableAssignmentExecutePropertyItemProvider != null) booleanVariableAssignmentExecutePropertyItemProvider.dispose();
		if (activityExecutePropertyItemProvider != null) activityExecutePropertyItemProvider.dispose();
		if (opaqueActionExecutePropertyItemProvider != null) opaqueActionExecutePropertyItemProvider.dispose();
		if (activityFinalNodeExecutePropertyItemProvider != null) activityFinalNodeExecutePropertyItemProvider.dispose();
		if (variableInitPropertyItemProvider != null) variableInitPropertyItemProvider.dispose();
		if (initialNodeExecutePropertyItemProvider != null) initialNodeExecutePropertyItemProvider.dispose();
		if (joinNodeExecutePropertyItemProvider != null) joinNodeExecutePropertyItemProvider.dispose();
		if (forkNodeExecutePropertyItemProvider != null) forkNodeExecutePropertyItemProvider.dispose();
		if (unaryNamedElementPropertyItemProvider != null) unaryNamedElementPropertyItemProvider.dispose();
		if (binaryNamedElementPropertyItemProvider != null) binaryNamedElementPropertyItemProvider.dispose();
		if (namedElementNamePropertyItemProvider != null) namedElementNamePropertyItemProvider.dispose();
		if (unaryActivityPropertyItemProvider != null) unaryActivityPropertyItemProvider.dispose();
		if (binaryActivityPropertyItemProvider != null) binaryActivityPropertyItemProvider.dispose();
		if (activityNamePropertyItemProvider != null) activityNamePropertyItemProvider.dispose();
		if (eventActivityContainerPropertyItemProvider != null) eventActivityContainerPropertyItemProvider.dispose();
		if (unaryEventPropertyItemProvider != null) unaryEventPropertyItemProvider.dispose();
		if (binaryEventPropertyItemProvider != null) binaryEventPropertyItemProvider.dispose();
		if (eventNamePropertyItemProvider != null) eventNamePropertyItemProvider.dispose();
		if (activityEventsPropertyItemProvider != null) activityEventsPropertyItemProvider.dispose();
		if (activityNodesPropertyItemProvider != null) activityNodesPropertyItemProvider.dispose();
		if (unaryActivityNodePropertyItemProvider != null) unaryActivityNodePropertyItemProvider.dispose();
		if (binaryActivityNodePropertyItemProvider != null) binaryActivityNodePropertyItemProvider.dispose();
		if (activityNodeNamePropertyItemProvider != null) activityNodeNamePropertyItemProvider.dispose();
		if (activityNodeActivityPropertyItemProvider != null) activityNodeActivityPropertyItemProvider.dispose();
		if (activityNodeRunningPropertyItemProvider != null) activityNodeRunningPropertyItemProvider.dispose();
		if (controlTokenActivityNodeContainerPropertyItemProvider != null) controlTokenActivityNodeContainerPropertyItemProvider.dispose();
		if (unaryControlTokenPropertyItemProvider != null) unaryControlTokenPropertyItemProvider.dispose();
		if (binaryControlTokenPropertyItemProvider != null) binaryControlTokenPropertyItemProvider.dispose();
		if (activityNodeHeldTokensPropertyItemProvider != null) activityNodeHeldTokensPropertyItemProvider.dispose();
		if (activityEdgeActivityContainerPropertyItemProvider != null) activityEdgeActivityContainerPropertyItemProvider.dispose();
		if (unaryActivityEdgePropertyItemProvider != null) unaryActivityEdgePropertyItemProvider.dispose();
		if (binaryActivityEdgePropertyItemProvider != null) binaryActivityEdgePropertyItemProvider.dispose();
		if (activityEdgeNamePropertyItemProvider != null) activityEdgeNamePropertyItemProvider.dispose();
		if (activityEdgeSourcePropertyItemProvider != null) activityEdgeSourcePropertyItemProvider.dispose();
		if (activityEdgeTargetPropertyItemProvider != null) activityEdgeTargetPropertyItemProvider.dispose();
		if (controlTokenActivityEdgeContainerPropertyItemProvider != null) controlTokenActivityEdgeContainerPropertyItemProvider.dispose();
		if (activityEdgeOfferedTokensPropertyItemProvider != null) activityEdgeOfferedTokensPropertyItemProvider.dispose();
		if (activityEdgesPropertyItemProvider != null) activityEdgesPropertyItemProvider.dispose();
		if (variableActivityContainerPropertyItemProvider != null) variableActivityContainerPropertyItemProvider.dispose();
		if (unaryExpressionPropertyItemProvider != null) unaryExpressionPropertyItemProvider.dispose();
		if (binaryExpressionPropertyItemProvider != null) binaryExpressionPropertyItemProvider.dispose();
		if (unaryVariablePropertyItemProvider != null) unaryVariablePropertyItemProvider.dispose();
		if (binaryVariablePropertyItemProvider != null) binaryVariablePropertyItemProvider.dispose();
		if (variableNamePropertyItemProvider != null) variableNamePropertyItemProvider.dispose();
		if (activityLocalsPropertyItemProvider != null) activityLocalsPropertyItemProvider.dispose();
		if (unaryControlFlowPropertyItemProvider != null) unaryControlFlowPropertyItemProvider.dispose();
		if (binaryControlFlowPropertyItemProvider != null) binaryControlFlowPropertyItemProvider.dispose();
		if (controlFlowNamePropertyItemProvider != null) controlFlowNamePropertyItemProvider.dispose();
		if (controlFlowSourcePropertyItemProvider != null) controlFlowSourcePropertyItemProvider.dispose();
		if (controlFlowTargetPropertyItemProvider != null) controlFlowTargetPropertyItemProvider.dispose();
		if (controlTokenControlFlowContainerPropertyItemProvider != null) controlTokenControlFlowContainerPropertyItemProvider.dispose();
		if (controlFlowOfferedTokensPropertyItemProvider != null) controlFlowOfferedTokensPropertyItemProvider.dispose();
		if (controlFlowGuardPropertyItemProvider != null) controlFlowGuardPropertyItemProvider.dispose();
		if (unaryBooleanExpressionPropertyItemProvider != null) unaryBooleanExpressionPropertyItemProvider.dispose();
		if (binaryBooleanExpressionPropertyItemProvider != null) binaryBooleanExpressionPropertyItemProvider.dispose();
		if (unaryBooleanVariablePropertyItemProvider != null) unaryBooleanVariablePropertyItemProvider.dispose();
		if (binaryBooleanVariablePropertyItemProvider != null) binaryBooleanVariablePropertyItemProvider.dispose();
		if (booleanVariableNamePropertyItemProvider != null) booleanVariableNamePropertyItemProvider.dispose();
		if (booleanVariableInitialValuePropertyItemProvider != null) booleanVariableInitialValuePropertyItemProvider.dispose();
		if (booleanVariableCurrentValuePropertyItemProvider != null) booleanVariableCurrentValuePropertyItemProvider.dispose();
		if (unaryActionPropertyItemProvider != null) unaryActionPropertyItemProvider.dispose();
		if (binaryActionPropertyItemProvider != null) binaryActionPropertyItemProvider.dispose();
		if (actionNamePropertyItemProvider != null) actionNamePropertyItemProvider.dispose();
		if (actionActivityPropertyItemProvider != null) actionActivityPropertyItemProvider.dispose();
		if (actionRunningPropertyItemProvider != null) actionRunningPropertyItemProvider.dispose();
		if (controlTokenActionContainerPropertyItemProvider != null) controlTokenActionContainerPropertyItemProvider.dispose();
		if (actionHeldTokensPropertyItemProvider != null) actionHeldTokensPropertyItemProvider.dispose();
		if (actionIncomingPropertyItemProvider != null) actionIncomingPropertyItemProvider.dispose();
		if (actionOutgoingPropertyItemProvider != null) actionOutgoingPropertyItemProvider.dispose();
		if (unaryOpaqueActionPropertyItemProvider != null) unaryOpaqueActionPropertyItemProvider.dispose();
		if (binaryOpaqueActionPropertyItemProvider != null) binaryOpaqueActionPropertyItemProvider.dispose();
		if (opaqueActionNamePropertyItemProvider != null) opaqueActionNamePropertyItemProvider.dispose();
		if (opaqueActionActivityPropertyItemProvider != null) opaqueActionActivityPropertyItemProvider.dispose();
		if (opaqueActionRunningPropertyItemProvider != null) opaqueActionRunningPropertyItemProvider.dispose();
		if (controlTokenOpaqueActionContainerPropertyItemProvider != null) controlTokenOpaqueActionContainerPropertyItemProvider.dispose();
		if (opaqueActionHeldTokensPropertyItemProvider != null) opaqueActionHeldTokensPropertyItemProvider.dispose();
		if (opaqueActionIncomingPropertyItemProvider != null) opaqueActionIncomingPropertyItemProvider.dispose();
		if (opaqueActionOutgoingPropertyItemProvider != null) opaqueActionOutgoingPropertyItemProvider.dispose();
		if (variableAssignmentOpaqueActionContainerPropertyItemProvider != null) variableAssignmentOpaqueActionContainerPropertyItemProvider.dispose();
		if (unaryVariableAssignmentPropertyItemProvider != null) unaryVariableAssignmentPropertyItemProvider.dispose();
		if (binaryVariableAssignmentPropertyItemProvider != null) binaryVariableAssignmentPropertyItemProvider.dispose();
		if (opaqueActionAssignmentsPropertyItemProvider != null) opaqueActionAssignmentsPropertyItemProvider.dispose();
		if (unaryAcceptEventActionPropertyItemProvider != null) unaryAcceptEventActionPropertyItemProvider.dispose();
		if (binaryAcceptEventActionPropertyItemProvider != null) binaryAcceptEventActionPropertyItemProvider.dispose();
		if (acceptEventActionNamePropertyItemProvider != null) acceptEventActionNamePropertyItemProvider.dispose();
		if (acceptEventActionActivityPropertyItemProvider != null) acceptEventActionActivityPropertyItemProvider.dispose();
		if (acceptEventActionRunningPropertyItemProvider != null) acceptEventActionRunningPropertyItemProvider.dispose();
		if (controlTokenAcceptEventActionContainerPropertyItemProvider != null) controlTokenAcceptEventActionContainerPropertyItemProvider.dispose();
		if (acceptEventActionHeldTokensPropertyItemProvider != null) acceptEventActionHeldTokensPropertyItemProvider.dispose();
		if (acceptEventActionEventTypePropertyItemProvider != null) acceptEventActionEventTypePropertyItemProvider.dispose();
		if (acceptEventActionIncomingPropertyItemProvider != null) acceptEventActionIncomingPropertyItemProvider.dispose();
		if (acceptEventActionOutgoingPropertyItemProvider != null) acceptEventActionOutgoingPropertyItemProvider.dispose();
		if (unaryControlNodePropertyItemProvider != null) unaryControlNodePropertyItemProvider.dispose();
		if (binaryControlNodePropertyItemProvider != null) binaryControlNodePropertyItemProvider.dispose();
		if (controlNodeNamePropertyItemProvider != null) controlNodeNamePropertyItemProvider.dispose();
		if (controlNodeActivityPropertyItemProvider != null) controlNodeActivityPropertyItemProvider.dispose();
		if (controlNodeRunningPropertyItemProvider != null) controlNodeRunningPropertyItemProvider.dispose();
		if (controlTokenControlNodeContainerPropertyItemProvider != null) controlTokenControlNodeContainerPropertyItemProvider.dispose();
		if (controlNodeHeldTokensPropertyItemProvider != null) controlNodeHeldTokensPropertyItemProvider.dispose();
		if (unaryInitialNodePropertyItemProvider != null) unaryInitialNodePropertyItemProvider.dispose();
		if (binaryInitialNodePropertyItemProvider != null) binaryInitialNodePropertyItemProvider.dispose();
		if (initialNodeNamePropertyItemProvider != null) initialNodeNamePropertyItemProvider.dispose();
		if (initialNodeActivityPropertyItemProvider != null) initialNodeActivityPropertyItemProvider.dispose();
		if (initialNodeRunningPropertyItemProvider != null) initialNodeRunningPropertyItemProvider.dispose();
		if (controlTokenInitialNodeContainerPropertyItemProvider != null) controlTokenInitialNodeContainerPropertyItemProvider.dispose();
		if (initialNodeHeldTokensPropertyItemProvider != null) initialNodeHeldTokensPropertyItemProvider.dispose();
		if (initialNodeOutgoingPropertyItemProvider != null) initialNodeOutgoingPropertyItemProvider.dispose();
		if (unaryDecisionNodePropertyItemProvider != null) unaryDecisionNodePropertyItemProvider.dispose();
		if (binaryDecisionNodePropertyItemProvider != null) binaryDecisionNodePropertyItemProvider.dispose();
		if (decisionNodeNamePropertyItemProvider != null) decisionNodeNamePropertyItemProvider.dispose();
		if (decisionNodeActivityPropertyItemProvider != null) decisionNodeActivityPropertyItemProvider.dispose();
		if (decisionNodeRunningPropertyItemProvider != null) decisionNodeRunningPropertyItemProvider.dispose();
		if (controlTokenDecisionNodeContainerPropertyItemProvider != null) controlTokenDecisionNodeContainerPropertyItemProvider.dispose();
		if (decisionNodeHeldTokensPropertyItemProvider != null) decisionNodeHeldTokensPropertyItemProvider.dispose();
		if (decisionNodeIncomingPropertyItemProvider != null) decisionNodeIncomingPropertyItemProvider.dispose();
		if (decisionNodeOutgoingPropertyItemProvider != null) decisionNodeOutgoingPropertyItemProvider.dispose();
		if (unaryMergeNodePropertyItemProvider != null) unaryMergeNodePropertyItemProvider.dispose();
		if (binaryMergeNodePropertyItemProvider != null) binaryMergeNodePropertyItemProvider.dispose();
		if (mergeNodeNamePropertyItemProvider != null) mergeNodeNamePropertyItemProvider.dispose();
		if (mergeNodeActivityPropertyItemProvider != null) mergeNodeActivityPropertyItemProvider.dispose();
		if (mergeNodeRunningPropertyItemProvider != null) mergeNodeRunningPropertyItemProvider.dispose();
		if (controlTokenMergeNodeContainerPropertyItemProvider != null) controlTokenMergeNodeContainerPropertyItemProvider.dispose();
		if (mergeNodeHeldTokensPropertyItemProvider != null) mergeNodeHeldTokensPropertyItemProvider.dispose();
		if (mergeNodeIncomingPropertyItemProvider != null) mergeNodeIncomingPropertyItemProvider.dispose();
		if (mergeNodeOutgoingPropertyItemProvider != null) mergeNodeOutgoingPropertyItemProvider.dispose();
		if (unaryForkNodePropertyItemProvider != null) unaryForkNodePropertyItemProvider.dispose();
		if (binaryForkNodePropertyItemProvider != null) binaryForkNodePropertyItemProvider.dispose();
		if (forkNodeNamePropertyItemProvider != null) forkNodeNamePropertyItemProvider.dispose();
		if (forkNodeActivityPropertyItemProvider != null) forkNodeActivityPropertyItemProvider.dispose();
		if (forkNodeRunningPropertyItemProvider != null) forkNodeRunningPropertyItemProvider.dispose();
		if (controlTokenForkNodeContainerPropertyItemProvider != null) controlTokenForkNodeContainerPropertyItemProvider.dispose();
		if (forkNodeHeldTokensPropertyItemProvider != null) forkNodeHeldTokensPropertyItemProvider.dispose();
		if (forkNodeIncomingPropertyItemProvider != null) forkNodeIncomingPropertyItemProvider.dispose();
		if (forkNodeOutgoingPropertyItemProvider != null) forkNodeOutgoingPropertyItemProvider.dispose();
		if (unaryJoinNodePropertyItemProvider != null) unaryJoinNodePropertyItemProvider.dispose();
		if (binaryJoinNodePropertyItemProvider != null) binaryJoinNodePropertyItemProvider.dispose();
		if (joinNodeNamePropertyItemProvider != null) joinNodeNamePropertyItemProvider.dispose();
		if (joinNodeActivityPropertyItemProvider != null) joinNodeActivityPropertyItemProvider.dispose();
		if (joinNodeRunningPropertyItemProvider != null) joinNodeRunningPropertyItemProvider.dispose();
		if (controlTokenJoinNodeContainerPropertyItemProvider != null) controlTokenJoinNodeContainerPropertyItemProvider.dispose();
		if (joinNodeHeldTokensPropertyItemProvider != null) joinNodeHeldTokensPropertyItemProvider.dispose();
		if (joinNodeIncomingPropertyItemProvider != null) joinNodeIncomingPropertyItemProvider.dispose();
		if (joinNodeOutgoingPropertyItemProvider != null) joinNodeOutgoingPropertyItemProvider.dispose();
		if (unaryFinalNodePropertyItemProvider != null) unaryFinalNodePropertyItemProvider.dispose();
		if (binaryFinalNodePropertyItemProvider != null) binaryFinalNodePropertyItemProvider.dispose();
		if (finalNodeNamePropertyItemProvider != null) finalNodeNamePropertyItemProvider.dispose();
		if (finalNodeActivityPropertyItemProvider != null) finalNodeActivityPropertyItemProvider.dispose();
		if (finalNodeRunningPropertyItemProvider != null) finalNodeRunningPropertyItemProvider.dispose();
		if (controlTokenFinalNodeContainerPropertyItemProvider != null) controlTokenFinalNodeContainerPropertyItemProvider.dispose();
		if (finalNodeHeldTokensPropertyItemProvider != null) finalNodeHeldTokensPropertyItemProvider.dispose();
		if (finalNodeIncomingPropertyItemProvider != null) finalNodeIncomingPropertyItemProvider.dispose();
		if (unaryActivityFinalNodePropertyItemProvider != null) unaryActivityFinalNodePropertyItemProvider.dispose();
		if (binaryActivityFinalNodePropertyItemProvider != null) binaryActivityFinalNodePropertyItemProvider.dispose();
		if (activityFinalNodeNamePropertyItemProvider != null) activityFinalNodeNamePropertyItemProvider.dispose();
		if (activityFinalNodeActivityPropertyItemProvider != null) activityFinalNodeActivityPropertyItemProvider.dispose();
		if (activityFinalNodeRunningPropertyItemProvider != null) activityFinalNodeRunningPropertyItemProvider.dispose();
		if (controlTokenActivityFinalNodeContainerPropertyItemProvider != null) controlTokenActivityFinalNodeContainerPropertyItemProvider.dispose();
		if (activityFinalNodeHeldTokensPropertyItemProvider != null) activityFinalNodeHeldTokensPropertyItemProvider.dispose();
		if (activityFinalNodeIncomingPropertyItemProvider != null) activityFinalNodeIncomingPropertyItemProvider.dispose();
		if (unaryFlowFinalNodePropertyItemProvider != null) unaryFlowFinalNodePropertyItemProvider.dispose();
		if (binaryFlowFinalNodePropertyItemProvider != null) binaryFlowFinalNodePropertyItemProvider.dispose();
		if (flowFinalNodeNamePropertyItemProvider != null) flowFinalNodeNamePropertyItemProvider.dispose();
		if (flowFinalNodeActivityPropertyItemProvider != null) flowFinalNodeActivityPropertyItemProvider.dispose();
		if (flowFinalNodeRunningPropertyItemProvider != null) flowFinalNodeRunningPropertyItemProvider.dispose();
		if (controlTokenFlowFinalNodeContainerPropertyItemProvider != null) controlTokenFlowFinalNodeContainerPropertyItemProvider.dispose();
		if (flowFinalNodeHeldTokensPropertyItemProvider != null) flowFinalNodeHeldTokensPropertyItemProvider.dispose();
		if (flowFinalNodeIncomingPropertyItemProvider != null) flowFinalNodeIncomingPropertyItemProvider.dispose();
		if (unaryValuePropertyItemProvider != null) unaryValuePropertyItemProvider.dispose();
		if (binaryValuePropertyItemProvider != null) binaryValuePropertyItemProvider.dispose();
		if (unaryIntegerExpressionPropertyItemProvider != null) unaryIntegerExpressionPropertyItemProvider.dispose();
		if (binaryIntegerExpressionPropertyItemProvider != null) binaryIntegerExpressionPropertyItemProvider.dispose();
		if (unaryIntegerVariablePropertyItemProvider != null) unaryIntegerVariablePropertyItemProvider.dispose();
		if (binaryIntegerVariablePropertyItemProvider != null) binaryIntegerVariablePropertyItemProvider.dispose();
		if (integerVariableNamePropertyItemProvider != null) integerVariableNamePropertyItemProvider.dispose();
		if (integerVariableInitialValuePropertyItemProvider != null) integerVariableInitialValuePropertyItemProvider.dispose();
		if (integerVariableCurrentValuePropertyItemProvider != null) integerVariableCurrentValuePropertyItemProvider.dispose();
		if (unaryBooleanValuePropertyItemProvider != null) unaryBooleanValuePropertyItemProvider.dispose();
		if (binaryBooleanValuePropertyItemProvider != null) binaryBooleanValuePropertyItemProvider.dispose();
		if (booleanValueValuePropertyItemProvider != null) booleanValueValuePropertyItemProvider.dispose();
		if (unaryIntegerValuePropertyItemProvider != null) unaryIntegerValuePropertyItemProvider.dispose();
		if (binaryIntegerValuePropertyItemProvider != null) binaryIntegerValuePropertyItemProvider.dispose();
		if (integerValueValuePropertyItemProvider != null) integerValueValuePropertyItemProvider.dispose();
		if (unaryIntegerBinaryExpressionPropertyItemProvider != null) unaryIntegerBinaryExpressionPropertyItemProvider.dispose();
		if (binaryIntegerBinaryExpressionPropertyItemProvider != null) binaryIntegerBinaryExpressionPropertyItemProvider.dispose();
		if (integerBinaryExpressionOperand1PropertyItemProvider != null) integerBinaryExpressionOperand1PropertyItemProvider.dispose();
		if (integerBinaryExpressionOperand2PropertyItemProvider != null) integerBinaryExpressionOperand2PropertyItemProvider.dispose();
		if (integerBinaryExpressionOperatorPropertyItemProvider != null) integerBinaryExpressionOperatorPropertyItemProvider.dispose();
		if (unaryIntegerComparisonExpressionPropertyItemProvider != null) unaryIntegerComparisonExpressionPropertyItemProvider.dispose();
		if (binaryIntegerComparisonExpressionPropertyItemProvider != null) binaryIntegerComparisonExpressionPropertyItemProvider.dispose();
		if (integerComparisonExpressionOperatorPropertyItemProvider != null) integerComparisonExpressionOperatorPropertyItemProvider.dispose();
		if (integerComparisonExpressionOperand1PropertyItemProvider != null) integerComparisonExpressionOperand1PropertyItemProvider.dispose();
		if (integerComparisonExpressionOperand2PropertyItemProvider != null) integerComparisonExpressionOperand2PropertyItemProvider.dispose();
		if (unaryBooleanUnaryExpressionPropertyItemProvider != null) unaryBooleanUnaryExpressionPropertyItemProvider.dispose();
		if (binaryBooleanUnaryExpressionPropertyItemProvider != null) binaryBooleanUnaryExpressionPropertyItemProvider.dispose();
		if (booleanUnaryExpressionOperandPropertyItemProvider != null) booleanUnaryExpressionOperandPropertyItemProvider.dispose();
		if (booleanUnaryExpressionOperatorPropertyItemProvider != null) booleanUnaryExpressionOperatorPropertyItemProvider.dispose();
		if (unaryBooleanBinaryExpressionPropertyItemProvider != null) unaryBooleanBinaryExpressionPropertyItemProvider.dispose();
		if (binaryBooleanBinaryExpressionPropertyItemProvider != null) binaryBooleanBinaryExpressionPropertyItemProvider.dispose();
		if (booleanBinaryExpressionOperand1PropertyItemProvider != null) booleanBinaryExpressionOperand1PropertyItemProvider.dispose();
		if (booleanBinaryExpressionOperand2PropertyItemProvider != null) booleanBinaryExpressionOperand2PropertyItemProvider.dispose();
		if (booleanBinaryExpressionOperatorPropertyItemProvider != null) booleanBinaryExpressionOperatorPropertyItemProvider.dispose();
		if (unaryBooleanVariableAssignmentPropertyItemProvider != null) unaryBooleanVariableAssignmentPropertyItemProvider.dispose();
		if (binaryBooleanVariableAssignmentPropertyItemProvider != null) binaryBooleanVariableAssignmentPropertyItemProvider.dispose();
		if (booleanVariableAssignmentAssigneePropertyItemProvider != null) booleanVariableAssignmentAssigneePropertyItemProvider.dispose();
		if (booleanExpressionBooleanVariableAssignmentContainerPropertyItemProvider != null) booleanExpressionBooleanVariableAssignmentContainerPropertyItemProvider.dispose();
		if (booleanVariableAssignmentExpressionPropertyItemProvider != null) booleanVariableAssignmentExpressionPropertyItemProvider.dispose();
		if (unaryIntegerVariableAssignmentPropertyItemProvider != null) unaryIntegerVariableAssignmentPropertyItemProvider.dispose();
		if (binaryIntegerVariableAssignmentPropertyItemProvider != null) binaryIntegerVariableAssignmentPropertyItemProvider.dispose();
		if (integerVariableAssignmentAssigneePropertyItemProvider != null) integerVariableAssignmentAssigneePropertyItemProvider.dispose();
		if (integerExpressionIntegerVariableAssignmentContainerPropertyItemProvider != null) integerExpressionIntegerVariableAssignmentContainerPropertyItemProvider.dispose();
		if (integerVariableAssignmentExpressionPropertyItemProvider != null) integerVariableAssignmentExpressionPropertyItemProvider.dispose();
		if (unaryOfferPropertyItemProvider != null) unaryOfferPropertyItemProvider.dispose();
		if (binaryOfferPropertyItemProvider != null) binaryOfferPropertyItemProvider.dispose();
		if (xActivityDiagramNextPropertyItemProvider != null) xActivityDiagramNextPropertyItemProvider.dispose();
		if (xActivityDiagramUntilPropertyItemProvider != null) xActivityDiagramUntilPropertyItemProvider.dispose();
		if (xActivityDiagramReleasePropertyItemProvider != null) xActivityDiagramReleasePropertyItemProvider.dispose();
		if (xActivityDiagramNegationTemporalPropertyItemProvider != null) xActivityDiagramNegationTemporalPropertyItemProvider.dispose();
	}

}
