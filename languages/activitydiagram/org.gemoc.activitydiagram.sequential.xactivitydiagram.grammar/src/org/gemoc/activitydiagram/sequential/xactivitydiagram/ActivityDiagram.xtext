// automatically generated by Xtext
grammar org.gemoc.activitydiagram.sequential.xactivitydiagram.ActivityDiagram with org.eclipse.xtext.common.Terminals

import "http://org.gemoc.activitydiagram.sequential.xactivitydiagram/activitydiagram/"
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Activity returns Activity:
	{Activity}
	'activity'
	name=EString
	'{'
		(locals+=Variable ( "," locals+=Variable)* )?
		('events' '{' events+=Event ( "," events+=Event)* '}')?
		('nodes' '{' nodes+=ActivityNode ( "," nodes+=ActivityNode)* '}' )?
		('edges' '{' edges+=ActivityEdge ( "," edges+=ActivityEdge)* '}' )?

	'}';

Event returns Event:
	{Event}
	name=EString
;

ActivityNode returns ActivityNode:
	OpaqueAction | AcceptEventAction | InitialNode | ActivityFinalNode | ForkNode | JoinNode | MergeNode | DecisionNode;

ActivityEdge returns ActivityEdge:
	ControlFlow;

Variable returns Variable:
	IntegerVariable | BooleanVariable;

Expression returns Expression:
	IntegerBinaryExpression | IntegerComparisonExpression | BooleanUnaryExpression | BooleanBinaryExpression;

EString returns ecore::EString:
	STRING | ID;

OpaqueAction returns OpaqueAction:
	{OpaqueAction}
	'action'
	name=EString
		('comp' '{' assignments+=VariableAssignment ( "," assignments+=VariableAssignment)* '}' )?
		('in' '(' incoming=[ActivityEdge] ')' )?
		('out' '(' outgoing=[ActivityEdge] ')' )?
		;

AcceptEventAction returns AcceptEventAction:
	{AcceptEventAction}
	'accept'
	name=EString
		'type' '(' eventType=[Event] ')'
		('in' '(' incoming=[ActivityEdge] ')' )?
		('out' '(' outgoing=[ActivityEdge] ')' )?
;

InitialNode returns InitialNode:
	{InitialNode}
	'initial'
	name=EString
		('out' '(' outgoing=[ActivityEdge] ')' )
	;

ActivityFinalNode returns ActivityFinalNode:
	{ActivityFinalNode}
	'final'
	name=EString
		('in' '(' incoming=[ActivityEdge] ')' )
	;

ForkNode returns ForkNode:
	{ForkNode}
	'fork'
	name=EString
		('in' '(' incoming=[ActivityEdge] ')' )
		('out' '(' outgoing+=[ActivityEdge] ( "," outgoing+=[ActivityEdge])* ')' )?
	;

JoinNode returns JoinNode:
	{JoinNode}
	'join'
	name=EString
		('in' '(' incoming+=[ActivityEdge] ( "," incoming+=[ActivityEdge])* ')' )?
		('out' '(' outgoing=[ActivityEdge] ')' )
	;

MergeNode returns MergeNode:
	{MergeNode}
	'merge'
	name=EString
		('in' '(' incoming+=[ActivityEdge] ( "," incoming+=[ActivityEdge])* ')' )?
		('out' '(' outgoing=[ActivityEdge] ')' )
	;

DecisionNode returns DecisionNode:
	{DecisionNode}
	'decision'
	name=EString
		('in' '(' incoming=[ActivityEdge] ')' )
		('out' '(' outgoing+=[ActivityEdge] ( "," outgoing+=[ActivityEdge])* ')' )?
	;

VariableAssignment returns VariableAssignment:
	IntegerVariableAssignment | BooleanVariableAssignment
	;

IntegerVariableAssignment returns IntegerVariableAssignment:
	assignee=[IntegerVariable] '=' expression=IntegerExpression
	;

BooleanVariableAssignment returns BooleanVariableAssignment:
	assignee=[BooleanVariable] '=' expression=BooleanExpression
	;

IntegerExpression returns IntegerExpression:
	IntegerBinaryExpression | IntegerValue | IntegerVariable
;

BooleanExpression returns BooleanExpression:
	BooleanBinaryExpression |  BooleanUnaryExpression | IntegerComparisonExpression | BooleanValue | BooleanVariable
;

IntegerBinaryExpression returns IntegerBinaryExpression:
		operand1=[IntegerExpression]
		operator=IntegerCalculationOperator
		operand2=[IntegerExpression];

IntegerComparisonExpression returns IntegerComparisonExpression:
		operand1=[IntegerExpression]
		operator=IntegerComparisonOperator
		operand2=[IntegerExpression];

BooleanUnaryExpression returns BooleanUnaryExpression:
		operator=BooleanUnaryOperator
		operand=[BooleanVariable];

BooleanBinaryExpression returns BooleanBinaryExpression:
		operand1=[BooleanVariable]
		operator=BooleanBinaryOperator
		operand2=[BooleanVariable];

IntegerVariable returns IntegerVariable:
	{IntegerVariable}
	'int'
	name=EString
		('=' initialValue=EInt)?;
	
BooleanVariable returns BooleanVariable:
	{BooleanVariable}
	'bool'
	name=EString
		('=' initialValue=EBoolean)?;

BooleanValue returns BooleanValue:
	value=EBoolean;

IntegerValue returns IntegerValue:
	value=EInt;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

EInt returns ecore::EInt:
	'-'? INT;

enum IntegerCalculationOperator returns IntegerCalculationOperator:
				ADD = '+' | SUBRACT = '-';

enum IntegerComparisonOperator returns IntegerComparisonOperator:
				SMALLER = '<' | SMALLER_EQUALS = '<=' | EQUALS = '==' | GREATER_EQUALS = '>=' | GREATER = '>';

enum BooleanUnaryOperator returns BooleanUnaryOperator:
				NOT = '!';

enum BooleanBinaryOperator returns BooleanBinaryOperator:
				AND = '&' | OR = '|';

ControlFlow returns ControlFlow:
	'flow'
	name=EString
		'from' source=[ActivityNode]
		'to' target=[ActivityNode]
		('[' guard=[BooleanVariable] ']')?;