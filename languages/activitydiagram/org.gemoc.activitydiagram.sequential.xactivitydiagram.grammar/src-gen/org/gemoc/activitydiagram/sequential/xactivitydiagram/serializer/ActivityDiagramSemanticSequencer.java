/*
 * generated by Xtext 2.10.0
 */
package org.gemoc.activitydiagram.sequential.xactivitydiagram.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.gemoc.activitydiagram.sequential.xactivitydiagram.activitydiagram.AcceptEventAction;
import org.gemoc.activitydiagram.sequential.xactivitydiagram.activitydiagram.Activity;
import org.gemoc.activitydiagram.sequential.xactivitydiagram.activitydiagram.ActivityFinalNode;
import org.gemoc.activitydiagram.sequential.xactivitydiagram.activitydiagram.ActivitydiagramPackage;
import org.gemoc.activitydiagram.sequential.xactivitydiagram.activitydiagram.BooleanBinaryExpression;
import org.gemoc.activitydiagram.sequential.xactivitydiagram.activitydiagram.BooleanUnaryExpression;
import org.gemoc.activitydiagram.sequential.xactivitydiagram.activitydiagram.BooleanValue;
import org.gemoc.activitydiagram.sequential.xactivitydiagram.activitydiagram.BooleanVariable;
import org.gemoc.activitydiagram.sequential.xactivitydiagram.activitydiagram.BooleanVariableAssignment;
import org.gemoc.activitydiagram.sequential.xactivitydiagram.activitydiagram.ControlFlow;
import org.gemoc.activitydiagram.sequential.xactivitydiagram.activitydiagram.DecisionNode;
import org.gemoc.activitydiagram.sequential.xactivitydiagram.activitydiagram.Event;
import org.gemoc.activitydiagram.sequential.xactivitydiagram.activitydiagram.ForkNode;
import org.gemoc.activitydiagram.sequential.xactivitydiagram.activitydiagram.InitialNode;
import org.gemoc.activitydiagram.sequential.xactivitydiagram.activitydiagram.IntegerBinaryExpression;
import org.gemoc.activitydiagram.sequential.xactivitydiagram.activitydiagram.IntegerComparisonExpression;
import org.gemoc.activitydiagram.sequential.xactivitydiagram.activitydiagram.IntegerValue;
import org.gemoc.activitydiagram.sequential.xactivitydiagram.activitydiagram.IntegerVariable;
import org.gemoc.activitydiagram.sequential.xactivitydiagram.activitydiagram.IntegerVariableAssignment;
import org.gemoc.activitydiagram.sequential.xactivitydiagram.activitydiagram.JoinNode;
import org.gemoc.activitydiagram.sequential.xactivitydiagram.activitydiagram.MergeNode;
import org.gemoc.activitydiagram.sequential.xactivitydiagram.activitydiagram.OpaqueAction;
import org.gemoc.activitydiagram.sequential.xactivitydiagram.services.ActivityDiagramGrammarAccess;

@SuppressWarnings("all")
public class ActivityDiagramSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ActivityDiagramGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ActivitydiagramPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ActivitydiagramPackage.ACCEPT_EVENT_ACTION:
				sequence_AcceptEventAction(context, (AcceptEventAction) semanticObject); 
				return; 
			case ActivitydiagramPackage.ACTIVITY:
				sequence_Activity(context, (Activity) semanticObject); 
				return; 
			case ActivitydiagramPackage.ACTIVITY_FINAL_NODE:
				sequence_ActivityFinalNode(context, (ActivityFinalNode) semanticObject); 
				return; 
			case ActivitydiagramPackage.BOOLEAN_BINARY_EXPRESSION:
				sequence_BooleanBinaryExpression(context, (BooleanBinaryExpression) semanticObject); 
				return; 
			case ActivitydiagramPackage.BOOLEAN_UNARY_EXPRESSION:
				sequence_BooleanUnaryExpression(context, (BooleanUnaryExpression) semanticObject); 
				return; 
			case ActivitydiagramPackage.BOOLEAN_VALUE:
				sequence_BooleanValue(context, (BooleanValue) semanticObject); 
				return; 
			case ActivitydiagramPackage.BOOLEAN_VARIABLE:
				sequence_BooleanVariable(context, (BooleanVariable) semanticObject); 
				return; 
			case ActivitydiagramPackage.BOOLEAN_VARIABLE_ASSIGNMENT:
				sequence_BooleanVariableAssignment(context, (BooleanVariableAssignment) semanticObject); 
				return; 
			case ActivitydiagramPackage.CONTROL_FLOW:
				sequence_ControlFlow(context, (ControlFlow) semanticObject); 
				return; 
			case ActivitydiagramPackage.DECISION_NODE:
				sequence_DecisionNode(context, (DecisionNode) semanticObject); 
				return; 
			case ActivitydiagramPackage.EVENT:
				sequence_Event(context, (Event) semanticObject); 
				return; 
			case ActivitydiagramPackage.FORK_NODE:
				sequence_ForkNode(context, (ForkNode) semanticObject); 
				return; 
			case ActivitydiagramPackage.INITIAL_NODE:
				sequence_InitialNode(context, (InitialNode) semanticObject); 
				return; 
			case ActivitydiagramPackage.INTEGER_BINARY_EXPRESSION:
				sequence_IntegerBinaryExpression(context, (IntegerBinaryExpression) semanticObject); 
				return; 
			case ActivitydiagramPackage.INTEGER_COMPARISON_EXPRESSION:
				sequence_IntegerComparisonExpression(context, (IntegerComparisonExpression) semanticObject); 
				return; 
			case ActivitydiagramPackage.INTEGER_VALUE:
				sequence_IntegerValue(context, (IntegerValue) semanticObject); 
				return; 
			case ActivitydiagramPackage.INTEGER_VARIABLE:
				sequence_IntegerVariable(context, (IntegerVariable) semanticObject); 
				return; 
			case ActivitydiagramPackage.INTEGER_VARIABLE_ASSIGNMENT:
				sequence_IntegerVariableAssignment(context, (IntegerVariableAssignment) semanticObject); 
				return; 
			case ActivitydiagramPackage.JOIN_NODE:
				sequence_JoinNode(context, (JoinNode) semanticObject); 
				return; 
			case ActivitydiagramPackage.MERGE_NODE:
				sequence_MergeNode(context, (MergeNode) semanticObject); 
				return; 
			case ActivitydiagramPackage.OPAQUE_ACTION:
				sequence_OpaqueAction(context, (OpaqueAction) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ActivityNode returns AcceptEventAction
	 *     AcceptEventAction returns AcceptEventAction
	 *
	 * Constraint:
	 *     (name=EString eventType=[Event|ID] incoming=[ActivityEdge|ID]? outgoing=[ActivityEdge|ID]?)
	 */
	protected void sequence_AcceptEventAction(ISerializationContext context, AcceptEventAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns ActivityFinalNode
	 *     ActivityFinalNode returns ActivityFinalNode
	 *
	 * Constraint:
	 *     (name=EString incoming=[ActivityEdge|ID])
	 */
	protected void sequence_ActivityFinalNode(ISerializationContext context, ActivityFinalNode semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ActivitydiagramPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ActivitydiagramPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, ActivitydiagramPackage.Literals.FINAL_NODE__INCOMING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ActivitydiagramPackage.Literals.FINAL_NODE__INCOMING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getActivityFinalNodeAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getActivityFinalNodeAccess().getIncomingActivityEdgeIDTerminalRuleCall_3_2_0_1(), semanticObject.getIncoming());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Activity returns Activity
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (locals+=Variable locals+=Variable*)? 
	 *         (events+=Event events+=Event*)? 
	 *         (nodes+=ActivityNode nodes+=ActivityNode*)? 
	 *         (edges+=ActivityEdge edges+=ActivityEdge*)?
	 *     )
	 */
	protected void sequence_Activity(ISerializationContext context, Activity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns BooleanBinaryExpression
	 *     BooleanExpression returns BooleanBinaryExpression
	 *     BooleanBinaryExpression returns BooleanBinaryExpression
	 *
	 * Constraint:
	 *     (operand1=[BooleanVariable|ID] operator=BooleanBinaryOperator operand2=[BooleanVariable|ID])
	 */
	protected void sequence_BooleanBinaryExpression(ISerializationContext context, BooleanBinaryExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ActivitydiagramPackage.Literals.BOOLEAN_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ActivitydiagramPackage.Literals.BOOLEAN_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, ActivitydiagramPackage.Literals.BOOLEAN_BINARY_EXPRESSION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ActivitydiagramPackage.Literals.BOOLEAN_BINARY_EXPRESSION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, ActivitydiagramPackage.Literals.BOOLEAN_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ActivitydiagramPackage.Literals.BOOLEAN_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanBinaryExpressionAccess().getOperand1BooleanVariableIDTerminalRuleCall_0_0_1(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getBooleanBinaryExpressionAccess().getOperatorBooleanBinaryOperatorEnumRuleCall_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getBooleanBinaryExpressionAccess().getOperand2BooleanVariableIDTerminalRuleCall_2_0_1(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns BooleanUnaryExpression
	 *     BooleanExpression returns BooleanUnaryExpression
	 *     BooleanUnaryExpression returns BooleanUnaryExpression
	 *
	 * Constraint:
	 *     (operator=BooleanUnaryOperator operand=[BooleanVariable|ID])
	 */
	protected void sequence_BooleanUnaryExpression(ISerializationContext context, BooleanUnaryExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ActivitydiagramPackage.Literals.BOOLEAN_UNARY_EXPRESSION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ActivitydiagramPackage.Literals.BOOLEAN_UNARY_EXPRESSION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, ActivitydiagramPackage.Literals.BOOLEAN_UNARY_EXPRESSION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ActivitydiagramPackage.Literals.BOOLEAN_UNARY_EXPRESSION__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanUnaryExpressionAccess().getOperatorBooleanUnaryOperatorEnumRuleCall_0_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getBooleanUnaryExpressionAccess().getOperandBooleanVariableIDTerminalRuleCall_1_0_1(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     BooleanExpression returns BooleanValue
	 *     BooleanValue returns BooleanValue
	 *
	 * Constraint:
	 *     value=EBoolean
	 */
	protected void sequence_BooleanValue(ISerializationContext context, BooleanValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ActivitydiagramPackage.Literals.BOOLEAN_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ActivitydiagramPackage.Literals.BOOLEAN_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanValueAccess().getValueEBooleanParserRuleCall_0(), semanticObject.isValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VariableAssignment returns BooleanVariableAssignment
	 *     BooleanVariableAssignment returns BooleanVariableAssignment
	 *
	 * Constraint:
	 *     (assignee=[BooleanVariable|ID] expression=BooleanExpression)
	 */
	protected void sequence_BooleanVariableAssignment(ISerializationContext context, BooleanVariableAssignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ActivitydiagramPackage.Literals.BOOLEAN_VARIABLE_ASSIGNMENT__ASSIGNEE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ActivitydiagramPackage.Literals.BOOLEAN_VARIABLE_ASSIGNMENT__ASSIGNEE));
			if (transientValues.isValueTransient(semanticObject, ActivitydiagramPackage.Literals.BOOLEAN_VARIABLE_ASSIGNMENT__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ActivitydiagramPackage.Literals.BOOLEAN_VARIABLE_ASSIGNMENT__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getBooleanVariableAssignmentAccess().getAssigneeBooleanVariableIDTerminalRuleCall_0_0_1(), semanticObject.getAssignee());
		feeder.accept(grammarAccess.getBooleanVariableAssignmentAccess().getExpressionBooleanExpressionParserRuleCall_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns BooleanVariable
	 *     BooleanExpression returns BooleanVariable
	 *     BooleanVariable returns BooleanVariable
	 *
	 * Constraint:
	 *     (name=EString initialValue=EBoolean?)
	 */
	protected void sequence_BooleanVariable(ISerializationContext context, BooleanVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityEdge returns ControlFlow
	 *     ControlFlow returns ControlFlow
	 *
	 * Constraint:
	 *     (name=EString source=[ActivityNode|ID] target=[ActivityNode|ID] guard=[BooleanVariable|ID]?)
	 */
	protected void sequence_ControlFlow(ISerializationContext context, ControlFlow semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns DecisionNode
	 *     DecisionNode returns DecisionNode
	 *
	 * Constraint:
	 *     (name=EString incoming=[ActivityEdge|ID] (outgoing+=[ActivityEdge|ID] outgoing+=[ActivityEdge|ID]*)?)
	 */
	protected void sequence_DecisionNode(ISerializationContext context, DecisionNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Event returns Event
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Event(ISerializationContext context, Event semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ActivitydiagramPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ActivitydiagramPackage.Literals.NAMED_ELEMENT__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getEventAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns ForkNode
	 *     ForkNode returns ForkNode
	 *
	 * Constraint:
	 *     (name=EString incoming=[ActivityEdge|ID] (outgoing+=[ActivityEdge|ID] outgoing+=[ActivityEdge|ID]*)?)
	 */
	protected void sequence_ForkNode(ISerializationContext context, ForkNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns InitialNode
	 *     InitialNode returns InitialNode
	 *
	 * Constraint:
	 *     (name=EString outgoing=[ActivityEdge|ID])
	 */
	protected void sequence_InitialNode(ISerializationContext context, InitialNode semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ActivitydiagramPackage.Literals.NAMED_ELEMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ActivitydiagramPackage.Literals.NAMED_ELEMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, ActivitydiagramPackage.Literals.INITIAL_NODE__OUTGOING) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ActivitydiagramPackage.Literals.INITIAL_NODE__OUTGOING));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getInitialNodeAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getInitialNodeAccess().getOutgoingActivityEdgeIDTerminalRuleCall_3_2_0_1(), semanticObject.getOutgoing());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns IntegerBinaryExpression
	 *     IntegerExpression returns IntegerBinaryExpression
	 *     IntegerBinaryExpression returns IntegerBinaryExpression
	 *
	 * Constraint:
	 *     (operand1=[IntegerExpression|ID] operator=IntegerCalculationOperator operand2=[IntegerExpression|ID])
	 */
	protected void sequence_IntegerBinaryExpression(ISerializationContext context, IntegerBinaryExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ActivitydiagramPackage.Literals.INTEGER_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ActivitydiagramPackage.Literals.INTEGER_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, ActivitydiagramPackage.Literals.INTEGER_BINARY_EXPRESSION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ActivitydiagramPackage.Literals.INTEGER_BINARY_EXPRESSION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, ActivitydiagramPackage.Literals.INTEGER_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ActivitydiagramPackage.Literals.INTEGER_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntegerBinaryExpressionAccess().getOperand1IntegerExpressionIDTerminalRuleCall_0_0_1(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getIntegerBinaryExpressionAccess().getOperatorIntegerCalculationOperatorEnumRuleCall_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getIntegerBinaryExpressionAccess().getOperand2IntegerExpressionIDTerminalRuleCall_2_0_1(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Expression returns IntegerComparisonExpression
	 *     BooleanExpression returns IntegerComparisonExpression
	 *     IntegerComparisonExpression returns IntegerComparisonExpression
	 *
	 * Constraint:
	 *     (operand1=[IntegerExpression|ID] operator=IntegerComparisonOperator operand2=[IntegerExpression|ID])
	 */
	protected void sequence_IntegerComparisonExpression(ISerializationContext context, IntegerComparisonExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ActivitydiagramPackage.Literals.INTEGER_COMPARISON_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ActivitydiagramPackage.Literals.INTEGER_COMPARISON_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, ActivitydiagramPackage.Literals.INTEGER_COMPARISON_EXPRESSION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ActivitydiagramPackage.Literals.INTEGER_COMPARISON_EXPRESSION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, ActivitydiagramPackage.Literals.INTEGER_COMPARISON_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ActivitydiagramPackage.Literals.INTEGER_COMPARISON_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntegerComparisonExpressionAccess().getOperand1IntegerExpressionIDTerminalRuleCall_0_0_1(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getIntegerComparisonExpressionAccess().getOperatorIntegerComparisonOperatorEnumRuleCall_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getIntegerComparisonExpressionAccess().getOperand2IntegerExpressionIDTerminalRuleCall_2_0_1(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     IntegerExpression returns IntegerValue
	 *     IntegerValue returns IntegerValue
	 *
	 * Constraint:
	 *     value=EInt
	 */
	protected void sequence_IntegerValue(ISerializationContext context, IntegerValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ActivitydiagramPackage.Literals.INTEGER_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ActivitydiagramPackage.Literals.INTEGER_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntegerValueAccess().getValueEIntParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     VariableAssignment returns IntegerVariableAssignment
	 *     IntegerVariableAssignment returns IntegerVariableAssignment
	 *
	 * Constraint:
	 *     (assignee=[IntegerVariable|ID] expression=IntegerExpression)
	 */
	protected void sequence_IntegerVariableAssignment(ISerializationContext context, IntegerVariableAssignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ActivitydiagramPackage.Literals.INTEGER_VARIABLE_ASSIGNMENT__ASSIGNEE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ActivitydiagramPackage.Literals.INTEGER_VARIABLE_ASSIGNMENT__ASSIGNEE));
			if (transientValues.isValueTransient(semanticObject, ActivitydiagramPackage.Literals.INTEGER_VARIABLE_ASSIGNMENT__EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ActivitydiagramPackage.Literals.INTEGER_VARIABLE_ASSIGNMENT__EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIntegerVariableAssignmentAccess().getAssigneeIntegerVariableIDTerminalRuleCall_0_0_1(), semanticObject.getAssignee());
		feeder.accept(grammarAccess.getIntegerVariableAssignmentAccess().getExpressionIntegerExpressionParserRuleCall_2_0(), semanticObject.getExpression());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Variable returns IntegerVariable
	 *     IntegerExpression returns IntegerVariable
	 *     IntegerVariable returns IntegerVariable
	 *
	 * Constraint:
	 *     (name=EString initialValue=EInt?)
	 */
	protected void sequence_IntegerVariable(ISerializationContext context, IntegerVariable semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns JoinNode
	 *     JoinNode returns JoinNode
	 *
	 * Constraint:
	 *     (name=EString (incoming+=[ActivityEdge|ID] incoming+=[ActivityEdge|ID]*)? outgoing=[ActivityEdge|ID])
	 */
	protected void sequence_JoinNode(ISerializationContext context, JoinNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns MergeNode
	 *     MergeNode returns MergeNode
	 *
	 * Constraint:
	 *     (name=EString (incoming+=[ActivityEdge|ID] incoming+=[ActivityEdge|ID]*)? outgoing=[ActivityEdge|ID])
	 */
	protected void sequence_MergeNode(ISerializationContext context, MergeNode semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ActivityNode returns OpaqueAction
	 *     OpaqueAction returns OpaqueAction
	 *
	 * Constraint:
	 *     (name=EString (assignments+=VariableAssignment assignments+=VariableAssignment*)? incoming=[ActivityEdge|ID]? outgoing=[ActivityEdge|ID]?)
	 */
	protected void sequence_OpaqueAction(ISerializationContext context, OpaqueAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
