/**
 */
package org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.util.XActivityDiagramProviderAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class XActivityDiagramProviderItemProviderAdapterFactory extends XActivityDiagramProviderAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public XActivityDiagramProviderItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.AcceptEventActionReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AcceptEventActionReferenceItemProvider acceptEventActionReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.AcceptEventActionReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAcceptEventActionReferenceAdapter() {
		if (acceptEventActionReferenceItemProvider == null) {
			acceptEventActionReferenceItemProvider = new AcceptEventActionReferenceItemProvider(this);
		}

		return acceptEventActionReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.AcceptEventActionQuery} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AcceptEventActionQueryItemProvider acceptEventActionQueryItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.AcceptEventActionQuery}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAcceptEventActionQueryAdapter() {
		if (acceptEventActionQueryItemProvider == null) {
			acceptEventActionQueryItemProvider = new AcceptEventActionQueryItemProvider(this);
		}

		return acceptEventActionQueryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.EventReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventReferenceItemProvider eventReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.EventReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventReferenceAdapter() {
		if (eventReferenceItemProvider == null) {
			eventReferenceItemProvider = new EventReferenceItemProvider(this);
		}

		return eventReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.EventQuery} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EventQueryItemProvider eventQueryItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.EventQuery}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEventQueryAdapter() {
		if (eventQueryItemProvider == null) {
			eventQueryItemProvider = new EventQueryItemProvider(this);
		}

		return eventQueryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.ActivityNodeReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityNodeReferenceItemProvider activityNodeReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.ActivityNodeReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityNodeReferenceAdapter() {
		if (activityNodeReferenceItemProvider == null) {
			activityNodeReferenceItemProvider = new ActivityNodeReferenceItemProvider(this);
		}

		return activityNodeReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.ActivityNodeQuery} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityNodeQueryItemProvider activityNodeQueryItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.ActivityNodeQuery}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityNodeQueryAdapter() {
		if (activityNodeQueryItemProvider == null) {
			activityNodeQueryItemProvider = new ActivityNodeQueryItemProvider(this);
		}

		return activityNodeQueryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.MergeNodeReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MergeNodeReferenceItemProvider mergeNodeReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.MergeNodeReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMergeNodeReferenceAdapter() {
		if (mergeNodeReferenceItemProvider == null) {
			mergeNodeReferenceItemProvider = new MergeNodeReferenceItemProvider(this);
		}

		return mergeNodeReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.MergeNodeQuery} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MergeNodeQueryItemProvider mergeNodeQueryItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.MergeNodeQuery}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMergeNodeQueryAdapter() {
		if (mergeNodeQueryItemProvider == null) {
			mergeNodeQueryItemProvider = new MergeNodeQueryItemProvider(this);
		}

		return mergeNodeQueryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.IntegerVariableAssignmentReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerVariableAssignmentReferenceItemProvider integerVariableAssignmentReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.IntegerVariableAssignmentReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerVariableAssignmentReferenceAdapter() {
		if (integerVariableAssignmentReferenceItemProvider == null) {
			integerVariableAssignmentReferenceItemProvider = new IntegerVariableAssignmentReferenceItemProvider(this);
		}

		return integerVariableAssignmentReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.IntegerVariableAssignmentQuery} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IntegerVariableAssignmentQueryItemProvider integerVariableAssignmentQueryItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.IntegerVariableAssignmentQuery}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIntegerVariableAssignmentQueryAdapter() {
		if (integerVariableAssignmentQueryItemProvider == null) {
			integerVariableAssignmentQueryItemProvider = new IntegerVariableAssignmentQueryItemProvider(this);
		}

		return integerVariableAssignmentQueryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.FinalNodeReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FinalNodeReferenceItemProvider finalNodeReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.FinalNodeReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFinalNodeReferenceAdapter() {
		if (finalNodeReferenceItemProvider == null) {
			finalNodeReferenceItemProvider = new FinalNodeReferenceItemProvider(this);
		}

		return finalNodeReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.FinalNodeQuery} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FinalNodeQueryItemProvider finalNodeQueryItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.FinalNodeQuery}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFinalNodeQueryAdapter() {
		if (finalNodeQueryItemProvider == null) {
			finalNodeQueryItemProvider = new FinalNodeQueryItemProvider(this);
		}

		return finalNodeQueryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.FlowFinalNodeReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowFinalNodeReferenceItemProvider flowFinalNodeReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.FlowFinalNodeReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowFinalNodeReferenceAdapter() {
		if (flowFinalNodeReferenceItemProvider == null) {
			flowFinalNodeReferenceItemProvider = new FlowFinalNodeReferenceItemProvider(this);
		}

		return flowFinalNodeReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.FlowFinalNodeQuery} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FlowFinalNodeQueryItemProvider flowFinalNodeQueryItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.FlowFinalNodeQuery}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFlowFinalNodeQueryAdapter() {
		if (flowFinalNodeQueryItemProvider == null) {
			flowFinalNodeQueryItemProvider = new FlowFinalNodeQueryItemProvider(this);
		}

		return flowFinalNodeQueryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.DecisionNodeReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecisionNodeReferenceItemProvider decisionNodeReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.DecisionNodeReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecisionNodeReferenceAdapter() {
		if (decisionNodeReferenceItemProvider == null) {
			decisionNodeReferenceItemProvider = new DecisionNodeReferenceItemProvider(this);
		}

		return decisionNodeReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.DecisionNodeQuery} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DecisionNodeQueryItemProvider decisionNodeQueryItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.DecisionNodeQuery}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDecisionNodeQueryAdapter() {
		if (decisionNodeQueryItemProvider == null) {
			decisionNodeQueryItemProvider = new DecisionNodeQueryItemProvider(this);
		}

		return decisionNodeQueryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.VariableAssignmentReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableAssignmentReferenceItemProvider variableAssignmentReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.VariableAssignmentReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableAssignmentReferenceAdapter() {
		if (variableAssignmentReferenceItemProvider == null) {
			variableAssignmentReferenceItemProvider = new VariableAssignmentReferenceItemProvider(this);
		}

		return variableAssignmentReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.VariableAssignmentQuery} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableAssignmentQueryItemProvider variableAssignmentQueryItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.VariableAssignmentQuery}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableAssignmentQueryAdapter() {
		if (variableAssignmentQueryItemProvider == null) {
			variableAssignmentQueryItemProvider = new VariableAssignmentQueryItemProvider(this);
		}

		return variableAssignmentQueryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.BooleanVariableAssignmentReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanVariableAssignmentReferenceItemProvider booleanVariableAssignmentReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.BooleanVariableAssignmentReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanVariableAssignmentReferenceAdapter() {
		if (booleanVariableAssignmentReferenceItemProvider == null) {
			booleanVariableAssignmentReferenceItemProvider = new BooleanVariableAssignmentReferenceItemProvider(this);
		}

		return booleanVariableAssignmentReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.BooleanVariableAssignmentQuery} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BooleanVariableAssignmentQueryItemProvider booleanVariableAssignmentQueryItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.BooleanVariableAssignmentQuery}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBooleanVariableAssignmentQueryAdapter() {
		if (booleanVariableAssignmentQueryItemProvider == null) {
			booleanVariableAssignmentQueryItemProvider = new BooleanVariableAssignmentQueryItemProvider(this);
		}

		return booleanVariableAssignmentQueryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.ActivityReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityReferenceItemProvider activityReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.ActivityReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityReferenceAdapter() {
		if (activityReferenceItemProvider == null) {
			activityReferenceItemProvider = new ActivityReferenceItemProvider(this);
		}

		return activityReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.ActivityQuery} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityQueryItemProvider activityQueryItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.ActivityQuery}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityQueryAdapter() {
		if (activityQueryItemProvider == null) {
			activityQueryItemProvider = new ActivityQueryItemProvider(this);
		}

		return activityQueryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.OpaqueActionReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpaqueActionReferenceItemProvider opaqueActionReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.OpaqueActionReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpaqueActionReferenceAdapter() {
		if (opaqueActionReferenceItemProvider == null) {
			opaqueActionReferenceItemProvider = new OpaqueActionReferenceItemProvider(this);
		}

		return opaqueActionReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.OpaqueActionQuery} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OpaqueActionQueryItemProvider opaqueActionQueryItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.OpaqueActionQuery}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOpaqueActionQueryAdapter() {
		if (opaqueActionQueryItemProvider == null) {
			opaqueActionQueryItemProvider = new OpaqueActionQueryItemProvider(this);
		}

		return opaqueActionQueryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.ActivityFinalNodeReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityFinalNodeReferenceItemProvider activityFinalNodeReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.ActivityFinalNodeReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityFinalNodeReferenceAdapter() {
		if (activityFinalNodeReferenceItemProvider == null) {
			activityFinalNodeReferenceItemProvider = new ActivityFinalNodeReferenceItemProvider(this);
		}

		return activityFinalNodeReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.ActivityFinalNodeQuery} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActivityFinalNodeQueryItemProvider activityFinalNodeQueryItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.ActivityFinalNodeQuery}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActivityFinalNodeQueryAdapter() {
		if (activityFinalNodeQueryItemProvider == null) {
			activityFinalNodeQueryItemProvider = new ActivityFinalNodeQueryItemProvider(this);
		}

		return activityFinalNodeQueryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.VariableReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableReferenceItemProvider variableReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.VariableReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableReferenceAdapter() {
		if (variableReferenceItemProvider == null) {
			variableReferenceItemProvider = new VariableReferenceItemProvider(this);
		}

		return variableReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.VariableQuery} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VariableQueryItemProvider variableQueryItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.VariableQuery}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVariableQueryAdapter() {
		if (variableQueryItemProvider == null) {
			variableQueryItemProvider = new VariableQueryItemProvider(this);
		}

		return variableQueryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.InitialNodeReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitialNodeReferenceItemProvider initialNodeReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.InitialNodeReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitialNodeReferenceAdapter() {
		if (initialNodeReferenceItemProvider == null) {
			initialNodeReferenceItemProvider = new InitialNodeReferenceItemProvider(this);
		}

		return initialNodeReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.InitialNodeQuery} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InitialNodeQueryItemProvider initialNodeQueryItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.InitialNodeQuery}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInitialNodeQueryAdapter() {
		if (initialNodeQueryItemProvider == null) {
			initialNodeQueryItemProvider = new InitialNodeQueryItemProvider(this);
		}

		return initialNodeQueryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.JoinNodeReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JoinNodeReferenceItemProvider joinNodeReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.JoinNodeReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJoinNodeReferenceAdapter() {
		if (joinNodeReferenceItemProvider == null) {
			joinNodeReferenceItemProvider = new JoinNodeReferenceItemProvider(this);
		}

		return joinNodeReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.JoinNodeQuery} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JoinNodeQueryItemProvider joinNodeQueryItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.JoinNodeQuery}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJoinNodeQueryAdapter() {
		if (joinNodeQueryItemProvider == null) {
			joinNodeQueryItemProvider = new JoinNodeQueryItemProvider(this);
		}

		return joinNodeQueryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.ForkNodeReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForkNodeReferenceItemProvider forkNodeReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.ForkNodeReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForkNodeReferenceAdapter() {
		if (forkNodeReferenceItemProvider == null) {
			forkNodeReferenceItemProvider = new ForkNodeReferenceItemProvider(this);
		}

		return forkNodeReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.ForkNodeQuery} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ForkNodeQueryItemProvider forkNodeQueryItemProvider;

	/**
	 * This creates an adapter for a {@link org.gemoc.activitydiagram.sequential.xactivitydiagram.scenario.xactivitydiagramscenario.XActivityDiagramProvider.ForkNodeQuery}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createForkNodeQueryAdapter() {
		if (forkNodeQueryItemProvider == null) {
			forkNodeQueryItemProvider = new ForkNodeQueryItemProvider(this);
		}

		return forkNodeQueryItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (acceptEventActionReferenceItemProvider != null) acceptEventActionReferenceItemProvider.dispose();
		if (acceptEventActionQueryItemProvider != null) acceptEventActionQueryItemProvider.dispose();
		if (eventReferenceItemProvider != null) eventReferenceItemProvider.dispose();
		if (eventQueryItemProvider != null) eventQueryItemProvider.dispose();
		if (activityNodeReferenceItemProvider != null) activityNodeReferenceItemProvider.dispose();
		if (activityNodeQueryItemProvider != null) activityNodeQueryItemProvider.dispose();
		if (mergeNodeReferenceItemProvider != null) mergeNodeReferenceItemProvider.dispose();
		if (mergeNodeQueryItemProvider != null) mergeNodeQueryItemProvider.dispose();
		if (integerVariableAssignmentReferenceItemProvider != null) integerVariableAssignmentReferenceItemProvider.dispose();
		if (integerVariableAssignmentQueryItemProvider != null) integerVariableAssignmentQueryItemProvider.dispose();
		if (finalNodeReferenceItemProvider != null) finalNodeReferenceItemProvider.dispose();
		if (finalNodeQueryItemProvider != null) finalNodeQueryItemProvider.dispose();
		if (flowFinalNodeReferenceItemProvider != null) flowFinalNodeReferenceItemProvider.dispose();
		if (flowFinalNodeQueryItemProvider != null) flowFinalNodeQueryItemProvider.dispose();
		if (decisionNodeReferenceItemProvider != null) decisionNodeReferenceItemProvider.dispose();
		if (decisionNodeQueryItemProvider != null) decisionNodeQueryItemProvider.dispose();
		if (variableAssignmentReferenceItemProvider != null) variableAssignmentReferenceItemProvider.dispose();
		if (variableAssignmentQueryItemProvider != null) variableAssignmentQueryItemProvider.dispose();
		if (booleanVariableAssignmentReferenceItemProvider != null) booleanVariableAssignmentReferenceItemProvider.dispose();
		if (booleanVariableAssignmentQueryItemProvider != null) booleanVariableAssignmentQueryItemProvider.dispose();
		if (activityReferenceItemProvider != null) activityReferenceItemProvider.dispose();
		if (activityQueryItemProvider != null) activityQueryItemProvider.dispose();
		if (opaqueActionReferenceItemProvider != null) opaqueActionReferenceItemProvider.dispose();
		if (opaqueActionQueryItemProvider != null) opaqueActionQueryItemProvider.dispose();
		if (activityFinalNodeReferenceItemProvider != null) activityFinalNodeReferenceItemProvider.dispose();
		if (activityFinalNodeQueryItemProvider != null) activityFinalNodeQueryItemProvider.dispose();
		if (variableReferenceItemProvider != null) variableReferenceItemProvider.dispose();
		if (variableQueryItemProvider != null) variableQueryItemProvider.dispose();
		if (initialNodeReferenceItemProvider != null) initialNodeReferenceItemProvider.dispose();
		if (initialNodeQueryItemProvider != null) initialNodeQueryItemProvider.dispose();
		if (joinNodeReferenceItemProvider != null) joinNodeReferenceItemProvider.dispose();
		if (joinNodeQueryItemProvider != null) joinNodeQueryItemProvider.dispose();
		if (forkNodeReferenceItemProvider != null) forkNodeReferenceItemProvider.dispose();
		if (forkNodeQueryItemProvider != null) forkNodeQueryItemProvider.dispose();
	}

}
